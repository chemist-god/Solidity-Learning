{
	"id": "74ece44f9c012f88aee4c19d7001b0f4",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/ERC_Token.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// Compatible with OpenZeppelin Contracts ^5.0.0\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\";\r\n\r\ncontract GhanaCommunicationTechnologyUniversity is ERC20, ERC20Burnable, ERC20Pausable, Ownable, ERC20Permit {\r\n    constructor(address initialOwner)\r\n        ERC20(\"Ghana Communication Technology University \", \"GCTU\")\r\n        Ownable(initialOwner)\r\n        ERC20Permit(\"Ghana Communication Technology University \")\r\n    {}\r\n\r\n    function pause() public onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function mint(address to, uint256 amount) public onlyOwner {\r\n        _mint(to, amount);\r\n    }\r\n\r\n    // The following functions are overrides required by Solidity.\r\n\r\n    function _update(address from, address to, uint256 value)\r\n        internal\r\n        override(ERC20, ERC20Pausable)\r\n    {\r\n        super._update(from, to, value);\r\n    }\r\n}"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20Permit} from \"./IERC20Permit.sol\";\nimport {ERC20} from \"../ERC20.sol\";\nimport {ECDSA} from \"../../../utils/cryptography/ECDSA.sol\";\nimport {EIP712} from \"../../../utils/cryptography/EIP712.sol\";\nimport {Nonces} from \"../../../utils/Nonces.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\n    bytes32 private constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Permit deadline has expired.\n     */\n    error ERC2612ExpiredSignature(uint256 deadline);\n\n    /**\n     * @dev Mismatched signature.\n     */\n    error ERC2612InvalidSigner(address signer, address owner);\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        if (block.timestamp > deadline) {\n            revert ERC2612ExpiredSignature(deadline);\n        }\n\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        if (signer != owner) {\n            revert ERC2612InvalidSigner(signer, owner);\n        }\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\n        return super.nonces(owner);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n}\n"
			},
			"@openzeppelin/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"../ERC20.sol\";\nimport {Pausable} from \"../../../utils/Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n *\n * IMPORTANT: This contract does not include public pause and unpause functions. In\n * addition to inheriting this contract, you must define both functions, invoking the\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\n * make the contract pause mechanism of the contract unreachable, and thus unusable.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_update}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {\n        super._update(from, to, value);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"../ERC20.sol\";\nimport {Context} from \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys a `value` amount of tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 value) public virtual {\n        _burn(_msgSender(), value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\n     * the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `value`.\n     */\n    function burnFrom(address account, uint256 value) public virtual {\n        _spendAllowance(account, _msgSender(), value);\n        _burn(account, value);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Nonces.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\n */\nabstract contract Nonces {\n    /**\n     * @dev The nonce used for an `account` is not the expected current nonce.\n     */\n    error InvalidAccountNonce(address account, uint256 currentNonce);\n\n    mapping(address account => uint256) private _nonces;\n\n    /**\n     * @dev Returns the next unused nonce for an address.\n     */\n    function nonces(address owner) public view virtual returns (uint256) {\n        return _nonces[owner];\n    }\n\n    /**\n     * @dev Consumes a nonce.\n     *\n     * Returns the current value and increments nonce.\n     */\n    function _useNonce(address owner) internal virtual returns (uint256) {\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\n        // decremented or reset. This guarantees that the nonce never overflows.\n        unchecked {\n            // It is important to do x++ and not ++x here.\n            return _nonces[owner]++;\n        }\n    }\n\n    /**\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\n     */\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\n        uint256 current = _useNonce(owner);\n        if (nonce != current) {\n            revert InvalidAccountNonce(owner, current);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"./MessageHashUtils.sol\";\nimport {ShortStrings, ShortString} from \"../ShortStrings.sol\";\nimport {IERC5267} from \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {IERC-5267}.\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _name which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Name() internal view returns (string memory) {\n        return _name.toStringWithFallback(_nameFallback);\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _version which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Version() internal view returns (string memory) {\n        return _version.toStringWithFallback(_versionFallback);\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts/utils/Pausable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/interfaces/IERC5267.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
			},
			"@openzeppelin/contracts/utils/ShortStrings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n     * {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/StorageSlot.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the address provided by the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "@openzeppelin/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/IERC5267.sol": {
				"IERC5267": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							}
						},
						"kind": "dev",
						"methods": {
							"eip712Domain()": {
								"details": "returns the fields and values that describe the domain separator used by this contract for EIP-712 signature."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"eip712Domain()": "84b0196e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":\"IERC5267\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 332,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 338,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 340,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 342,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 344,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
				"ERC20Burnable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}."
							},
							"burnFrom(address,uint256)": {
								"details": "Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":\"ERC20Burnable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c345af1b0e7ea28d1216d6a04ab28f5534a5229b9edf9ca3cd0e84950ae58d26\",\"dweb:/ipfs/QmY63jtSrYpLRe8Gj1ep2vMDCKxGNNG3hnNVKBVnrs2nmA\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 332,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 338,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 340,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 342,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 344,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol": {
				"ERC20Pausable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "EnforcedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExpectedPause",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "ERC20 token with pausable token transfers, minting and burning. Useful for scenarios such as preventing trades until the end of an evaluation period, or having an emergency switch for freezing all token transfers in the event of a large bug. IMPORTANT: This contract does not include public pause and unpause functions. In addition to inheriting this contract, you must define both functions, invoking the {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate access control, e.g. using {AccessControl} or {Ownable}. Not doing so will make the contract pause mechanism of the contract unreachable, and thus unusable.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"EnforcedPause()": [
								{
									"details": "The operation failed because the contract is paused."
								}
							],
							"ExpectedPause()": [
								{
									"details": "The operation failed because the contract is not paused."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"paused()": "5c975abb",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC20 token with pausable token transfers, minting and burning. Useful for scenarios such as preventing trades until the end of an evaluation period, or having an emergency switch for freezing all token transfers in the event of a large bug. IMPORTANT: This contract does not include public pause and unpause functions. In addition to inheriting this contract, you must define both functions, invoking the {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate access control, e.g. using {AccessControl} or {Ownable}. Not doing so will make the contract pause mechanism of the contract unreachable, and thus unusable.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":\"ERC20Pausable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":{\"keccak256\":\"0xb18c53aecf95e53339972e3d496a56c42e6b60a03a49ce8e6a37d3bd9d5d0a67\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4a8e54b0924a1acd92806a843998568d6bec01798c550bc440a85cfcd9cfba99\",\"dweb:/ipfs/QmZ26Y3ibYPbCRVB65NAQrGBF1UKDEu2fB8CHHMhYbBqmV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1a4b83328c98d518a2699c2cbe9e9b055e78aa57fa8639f1b88deb8b3750b5dc\",\"dweb:/ipfs/QmXdcYj5v7zQxXFPULShHkR5p4Wa2zYuupbHnFdV3cHYtc\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 332,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:ERC20Pausable",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 338,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:ERC20Pausable",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 340,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:ERC20Pausable",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 342,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:ERC20Pausable",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 344,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:ERC20Pausable",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 1305,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol:ERC20Pausable",
								"label": "_paused",
								"offset": 0,
								"slot": "5",
								"type": "t_bool"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
				"ERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "ERC2612ExpiredSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "signer",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC2612InvalidSigner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC2612ExpiredSignature(uint256)": [
								{
									"details": "Permit deadline has expired."
								}
							],
							"ERC2612InvalidSigner(address,address)": [
								{
									"details": "Mismatched signature."
								}
							],
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`. It's a good idea to use the same `name` that is defined as the ERC20 token name."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"eip712Domain()": "84b0196e",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC2612ExpiredSignature(uint256)\":[{\"details\":\"Permit deadline has expired.\"}],\"ERC2612InvalidSigner(address,address)\":[{\"details\":\"Mismatched signature.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`. It's a good idea to use the same `name` that is defined as the ERC20 token name.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":\"ERC20Permit\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0xc858a86a35701004d89022a5e98819aac46ccbdc4072fc9dd43928a676b1a2ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://18acebb483c512c0eaafcb437f09c839972c3f0d36f0201ea7baa2926b987dd2\",\"dweb:/ipfs/Qmd9bf2noaDSYDtf6FMSzKu7LPhuf91jsVNmcoCuTCuGic\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c\",\"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0798def67258d9a3cc20b2b4da7ebf351a5cefe0abfdd665d2d81f8e32f89b21\",\"dweb:/ipfs/QmPEvJosnPfzHNjKvCv2D3891mA2Ww8eUwkqrxBjuYdHCt\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 332,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 338,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 340,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 342,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 344,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 2380,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "5",
								"type": "t_string_storage"
							},
							{
								"astId": 2382,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "6",
								"type": "t_string_storage"
							},
							{
								"astId": 1242,
								"contract": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_nonces",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Nonces.sol": {
				"Nonces": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Provides tracking nonces for addresses. Nonces will only increment.",
						"errors": {
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"nonces(address)": {
								"details": "Returns the next unused nonce for an address."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"nonces(address)": "7ecebe00"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Provides tracking nonces for addresses. Nonces will only increment.\",\"errors\":{\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"kind\":\"dev\",\"methods\":{\"nonces(address)\":{\"details\":\"Returns the next unused nonce for an address.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Nonces.sol\":\"Nonces\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1242,
								"contract": "@openzeppelin/contracts/utils/Nonces.sol:Nonces",
								"label": "_nonces",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Pausable.sol": {
				"Pausable": {
					"abi": [
						{
							"inputs": [],
							"name": "EnforcedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExpectedPause",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.",
						"errors": {
							"EnforcedPause()": [
								{
									"details": "The operation failed because the contract is paused."
								}
							],
							"ExpectedPause()": [
								{
									"details": "The operation failed because the contract is not paused."
								}
							]
						},
						"events": {
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract in unpaused state."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"paused()": "5c975abb"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract in unpaused state.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Pausable.sol\":\"Pausable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1a4b83328c98d518a2699c2cbe9e9b055e78aa57fa8639f1b88deb8b3750b5dc\",\"dweb:/ipfs/QmXdcYj5v7zQxXFPULShHkR5p4Wa2zYuupbHnFdV3cHYtc\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1305,
								"contract": "@openzeppelin/contracts/utils/Pausable.sol:Pausable",
								"label": "_paused",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/ShortStrings.sol": {
				"ShortStrings": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1255:4308  library ShortStrings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1255:4308  library ShortStrings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122092e7974dc7ef4ad877420d80b069519c824c66460f2f39ae01e72c0c58b540e264736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122092e7974dc7ef4ad877420d80b069519c824c66460f2f39ae01e72c0c58b540e264736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP3 0xE7 SWAP8 0x4D 0xC7 0xEF BLOBBASEFEE 0xD8 PUSH24 0x420D80B069519C824C66460F2F39AE01E72C0C58B540E264 PUSH20 0x6F6C634300081A00330000000000000000000000 ",
							"sourceMap": "1255:3053:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122092e7974dc7ef4ad877420d80b069519c824c66460f2f39ae01e72c0c58b540e264736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP3 0xE7 SWAP8 0x4D 0xC7 0xEF BLOBBASEFEE 0xD8 PUSH24 0x420D80B069519C824C66460F2F39AE01E72C0C58B540E264 PUSH20 0x6F6C634300081A00330000000000000000000000 ",
							"sourceMap": "1255:3053:13:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"byteLength(ShortString)": "infinite",
								"byteLengthWithFallback(ShortString,string storage pointer)": "infinite",
								"toShortString(string memory)": "infinite",
								"toShortStringWithFallback(string memory,string storage pointer)": "infinite",
								"toString(ShortString)": "infinite",
								"toStringWithFallback(ShortString,string storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH #[$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH [$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 13,
									"value": "B"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "CODECOPY",
									"source": 13
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "BYTE",
									"source": 13
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 13,
									"value": "73"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "EQ",
									"source": 13
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 13,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 13,
									"value": "4"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 13,
									"value": "24"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "tag",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "ADDRESS",
									"source": 13
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 13,
									"value": "73"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "MSTORE8",
									"source": 13
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "RETURN",
									"source": 13
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122092e7974dc7ef4ad877420d80b069519c824c66460f2f39ae01e72c0c58b540e264736f6c634300081a0033",
									".code": [
										{
											"begin": 1255,
											"end": 4308,
											"name": "PUSHDEPLOYADDRESS",
											"source": 13
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "ADDRESS",
											"source": 13
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "REVERT",
											"source": 13
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/Pausable.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/ERC_Token.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ShortStrings.sol\":\"ShortStrings\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c\",\"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/StorageSlot.sol": {
				"StorageSlot": {
					"abi": [],
					"devdoc": {
						"details": "Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ```",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/StorageSlot.sol\":1245:3930  library StorageSlot {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/StorageSlot.sol\":1245:3930  library StorageSlot {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220a5de81185457c7b31b766a5d9e994bec595239b32a0552536f64f0a64f1e90b164736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220a5de81185457c7b31b766a5d9e994bec595239b32a0552536f64f0a64f1e90b164736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA5 0xDE DUP2 XOR SLOAD JUMPI 0xC7 0xB3 SHL PUSH23 0x6A5D9E994BEC595239B32A0552536F64F0A64F1E90B164 PUSH20 0x6F6C634300081A00330000000000000000000000 ",
							"sourceMap": "1245:2685:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220a5de81185457c7b31b766a5d9e994bec595239b32a0552536f64f0a64f1e90b164736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA5 0xDE DUP2 XOR SLOAD JUMPI 0xC7 0xB3 SHL PUSH23 0x6A5D9E994BEC595239B32A0552536F64F0A64F1E90B164 PUSH20 0x6F6C634300081A00330000000000000000000000 ",
							"sourceMap": "1245:2685:14:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"getAddressSlot(bytes32)": "infinite",
								"getBooleanSlot(bytes32)": "infinite",
								"getBytes32Slot(bytes32)": "infinite",
								"getBytesSlot(bytes storage pointer)": "infinite",
								"getBytesSlot(bytes32)": "infinite",
								"getStringSlot(bytes32)": "infinite",
								"getStringSlot(string storage pointer)": "infinite",
								"getUint256Slot(bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH #[$]",
									"source": 14,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH [$]",
									"source": 14,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 14,
									"value": "B"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "CODECOPY",
									"source": 14
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "BYTE",
									"source": 14
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 14,
									"value": "73"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "EQ",
									"source": 14
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 14,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 14,
									"value": "4"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 14,
									"value": "24"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "tag",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "ADDRESS",
									"source": 14
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 14,
									"value": "73"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "MSTORE8",
									"source": 14
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "RETURN",
									"source": 14
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a5de81185457c7b31b766a5d9e994bec595239b32a0552536f64f0a64f1e90b164736f6c634300081a0033",
									".code": [
										{
											"begin": 1245,
											"end": 3930,
											"name": "PUSHDEPLOYADDRESS",
											"source": 14
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "ADDRESS",
											"source": 14
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "REVERT",
											"source": 14
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/Pausable.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/ERC_Token.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "StringsInsufficientHexLength",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "String operations.",
						"errors": {
							"StringsInsufficientHexLength(uint256,uint256)": [
								{
									"details": "The `value` string doesn't fit in the specified `length`."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/Strings.sol\":251:3098  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/Strings.sol\":251:3098  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122051a8715979020060b5847a3f92a10202c663f2695287de37855095ccae600c8164736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122051a8715979020060b5847a3f92a10202c663f2695287de37855095ccae600c8164736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MLOAD 0xA8 PUSH18 0x5979020060B5847A3F92A10202C663F26952 DUP8 0xDE CALLDATACOPY DUP6 POP SWAP6 0xCC 0xAE PUSH1 0xC DUP2 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "251:2847:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122051a8715979020060b5847a3f92a10202c663f2695287de37855095ccae600c8164736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MLOAD 0xA8 PUSH18 0x5979020060B5847A3F92A10202C663F26952 DUP8 0xDE CALLDATACOPY DUP6 POP SWAP6 0xCC 0xAE PUSH1 0xC DUP2 PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "251:2847:15:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"equal(string memory,string memory)": "infinite",
								"toHexString(address)": "infinite",
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite",
								"toStringSigned(int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH #[$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH [$]",
									"source": 15,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 15,
									"value": "B"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "CODECOPY",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "BYTE",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "EQ",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "JUMPI",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 15,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 15,
									"value": "4"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 15,
									"value": "24"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "REVERT",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "tag",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "JUMPDEST",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "ADDRESS",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 15,
									"value": "73"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE8",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "RETURN",
									"source": 15
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122051a8715979020060b5847a3f92a10202c663f2695287de37855095ccae600c8164736f6c634300081a0033",
									".code": [
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSHDEPLOYADDRESS",
											"source": 15
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "ADDRESS",
											"source": 15
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSH",
											"source": 15,
											"value": "80"
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "REVERT",
											"source": 15
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/Pausable.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/ERC_Token.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"ECDSA": {
					"abi": [
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.",
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":344:7730  library ECDSA {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":344:7730  library ECDSA {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220c816862926443e2612c0bd23884ab40b8b471df536f68ceaee9d6805b0df4b6364736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220c816862926443e2612c0bd23884ab40b8b471df536f68ceaee9d6805b0df4b6364736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC8 AND DUP7 0x29 0x26 PREVRANDAO RETURNDATACOPY 0x26 SLT 0xC0 0xBD 0x23 DUP9 BLOBBASEFEE 0xB4 SIGNEXTEND DUP12 SELFBALANCE SAR CREATE2 CALLDATASIZE 0xF6 DUP13 0xEA 0xEE SWAP14 PUSH9 0x5B0DF4B6364736F6C PUSH4 0x4300081A STOP CALLER ",
							"sourceMap": "344:7386:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220c816862926443e2612c0bd23884ab40b8b471df536f68ceaee9d6805b0df4b6364736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC8 AND DUP7 0x29 0x26 PREVRANDAO RETURNDATACOPY 0x26 SLT 0xC0 0xBD 0x23 DUP9 BLOBBASEFEE 0xB4 SIGNEXTEND DUP12 SELFBALANCE SAR CREATE2 CALLDATASIZE 0xF6 DUP13 0xEA 0xEE SWAP14 PUSH9 0x5B0DF4B6364736F6C PUSH4 0x4300081A STOP CALLER ",
							"sourceMap": "344:7386:16:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"_throwError(enum ECDSA.RecoverError,bytes32)": "infinite",
								"recover(bytes32,bytes memory)": "infinite",
								"recover(bytes32,bytes32,bytes32)": "infinite",
								"recover(bytes32,uint8,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,bytes memory)": "infinite",
								"tryRecover(bytes32,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,uint8,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH #[$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH [$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 16,
									"value": "B"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "CODECOPY",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "BYTE",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "EQ",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 16,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 16,
									"value": "4"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 16,
									"value": "24"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "REVERT",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "tag",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "ADDRESS",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "MSTORE8",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "RETURN",
									"source": 16
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220c816862926443e2612c0bd23884ab40b8b471df536f68ceaee9d6805b0df4b6364736f6c634300081a0033",
									".code": [
										{
											"begin": 344,
											"end": 7730,
											"name": "PUSHDEPLOYADDRESS",
											"source": 16
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "ADDRESS",
											"source": 16
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "REVERT",
											"source": 16
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/Pausable.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/ERC_Token.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
				"EIP712": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "state-variable-immutable",
						"details": "https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to produce the hash of their typed data using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage.",
						"events": {
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							}
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade]."
							},
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"eip712Domain()": "84b0196e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\",\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to produce the hash of their typed data using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\",\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade].\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":\"EIP712\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c\",\"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0798def67258d9a3cc20b2b4da7ebf351a5cefe0abfdd665d2d81f8e32f89b21\",\"dweb:/ipfs/QmPEvJosnPfzHNjKvCv2D3891mA2Ww8eUwkqrxBjuYdHCt\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2380,
								"contract": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "0",
								"type": "t_string_storage"
							},
							{
								"astId": 2382,
								"contract": "@openzeppelin/contracts/utils/cryptography/EIP712.sol:EIP712",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "1",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
				"MessageHashUtils": {
					"abi": [],
					"devdoc": {
						"details": "Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":521:3756  library MessageHashUtils {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":521:3756  library MessageHashUtils {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220403defb6070fbf45c4c59faddcdd9768cf85ba2973f43c2ee654e8eac540394064736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220403defb6070fbf45c4c59faddcdd9768cf85ba2973f43c2ee654e8eac540394064736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOCKHASH RETURNDATASIZE 0xEF 0xB6 SMOD 0xF 0xBF GASLIMIT 0xC4 0xC5 SWAP16 0xAD 0xDC 0xDD SWAP8 PUSH9 0xCF85BA2973F43C2EE6 SLOAD 0xE8 0xEA 0xC5 BLOCKHASH CODECOPY BLOCKHASH PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "521:3235:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220403defb6070fbf45c4c59faddcdd9768cf85ba2973f43c2ee654e8eac540394064736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOCKHASH RETURNDATASIZE 0xEF 0xB6 SMOD 0xF 0xBF GASLIMIT 0xC4 0xC5 SWAP16 0xAD 0xDC 0xDD SWAP8 PUSH9 0xCF85BA2973F43C2EE6 SLOAD 0xE8 0xEA 0xC5 BLOCKHASH CODECOPY BLOCKHASH PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "521:3235:18:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"toDataWithIntendedValidatorHash(address,bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes32)": "infinite",
								"toTypedDataHash(bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH #[$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH [$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 18,
									"value": "B"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "CODECOPY",
									"source": 18
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "BYTE",
									"source": 18
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 18,
									"value": "73"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "EQ",
									"source": 18
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 18,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 18,
									"value": "4"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "tag",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "ADDRESS",
									"source": 18
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 18,
									"value": "73"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "MSTORE8",
									"source": 18
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "RETURN",
									"source": 18
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220403defb6070fbf45c4c59faddcdd9768cf85ba2973f43c2ee654e8eac540394064736f6c634300081a0033",
									".code": [
										{
											"begin": 521,
											"end": 3756,
											"name": "PUSHDEPLOYADDRESS",
											"source": 18
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "ADDRESS",
											"source": 18
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "REVERT",
											"source": 18
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/Pausable.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/ERC_Token.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":\"MessageHashUtils\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"Math": {
					"abi": [
						{
							"inputs": [],
							"name": "MathOverflowedMulDiv",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"errors": {
							"MathOverflowedMulDiv()": [
								{
									"details": "Muldiv operation overflow."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/Math.sol\":203:15117  library Math {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/Math.sol\":203:15117  library Math {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220203246029dab93f34b327ba02915d37e6c29f598a14b59593a6c7ca26ac8c1c664736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220203246029dab93f34b327ba02915d37e6c29f598a14b59593a6c7ca26ac8c1c664736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 KECCAK256 ORIGIN CHAINID MUL SWAP14 0xAB SWAP4 RETURN 0x4B ORIGIN PUSH28 0xA02915D37E6C29F598A14B59593A6C7CA26AC8C1C664736F6C634300 ADDMOD BYTE STOP CALLER ",
							"sourceMap": "203:14914:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220203246029dab93f34b327ba02915d37e6c29f598a14b59593a6c7ca26ac8c1c664736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 KECCAK256 ORIGIN CHAINID MUL SWAP14 0xAB SWAP4 RETURN 0x4B ORIGIN PUSH28 0xA02915D37E6C29F598A14B59593A6C7CA26AC8C1C664736F6C634300 ADDMOD BYTE STOP CALLER ",
							"sourceMap": "203:14914:19:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum Math.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum Math.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum Math.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum Math.Rounding)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite",
								"unsignedRoundsUp(enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH #[$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH [$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 19,
									"value": "B"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "CODECOPY",
									"source": 19
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "BYTE",
									"source": 19
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 19,
									"value": "73"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "EQ",
									"source": 19
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 19,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 19,
									"value": "4"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 19,
									"value": "24"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "REVERT",
									"source": 19
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "tag",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "ADDRESS",
									"source": 19
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 19,
									"value": "73"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE8",
									"source": 19
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 19
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "RETURN",
									"source": 19
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220203246029dab93f34b327ba02915d37e6c29f598a14b59593a6c7ca26ac8c1c664736f6c634300081a0033",
									".code": [
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSHDEPLOYADDRESS",
											"source": 19
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "ADDRESS",
											"source": 19
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "REVERT",
											"source": 19
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/Pausable.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/ERC_Token.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"SignedMath": {
					"abi": [],
					"devdoc": {
						"details": "Standard signed math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/utils/math/SignedMath.sol\":216:1263  library SignedMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, 0x4e487b7100000000000000000000000000000000000000000000000000000000)\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/utils/math/SignedMath.sol\":216:1263  library SignedMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220bafc138f006fce36eaafb8c23c8f3807f830920cd962d103124dcddf6117025d64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220bafc138f006fce36eaafb8c23c8f3807f830920cd962d103124dcddf6117025d64736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x4B PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x3F JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBA 0xFC SGT DUP16 STOP PUSH16 0xCE36EAAFB8C23C8F3807F830920CD962 0xD1 SUB SLT 0x4D 0xCD 0xDF PUSH2 0x1702 TSTORE PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "216:1047:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220bafc138f006fce36eaafb8c23c8f3807f830920cd962d103124dcddf6117025d64736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBA 0xFC SGT DUP16 STOP PUSH16 0xCE36EAAFB8C23C8F3807F830920CD962 0xD1 SUB SLT 0x4D 0xCD 0xDF PUSH2 0x1702 TSTORE PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "216:1047:20:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "92",
								"totalCost": "17092"
							},
							"internal": {
								"abs(int256)": "infinite",
								"average(int256,int256)": "infinite",
								"max(int256,int256)": "infinite",
								"min(int256,int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH #[$]",
									"source": 20,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH [$]",
									"source": 20,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 20,
									"value": "B"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "CODECOPY",
									"source": 20
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "BYTE",
									"source": 20
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 20,
									"value": "73"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "EQ",
									"source": 20
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 20,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 20,
									"value": "4"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 20,
									"value": "24"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "tag",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "ADDRESS",
									"source": 20
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 20,
									"value": "73"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE8",
									"source": 20
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "RETURN",
									"source": 20
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220bafc138f006fce36eaafb8c23c8f3807f830920cd962d103124dcddf6117025d64736f6c634300081a0033",
									".code": [
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSHDEPLOYADDRESS",
											"source": 20
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "ADDRESS",
											"source": 20
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSH",
											"source": 20,
											"value": "80"
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "REVERT",
											"source": 20
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/Pausable.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/ERC_Token.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/ERC_Token.sol": {
				"GhanaCommunicationTechnologyUniversity": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "initialOwner",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "ERC2612ExpiredSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "signer",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC2612InvalidSigner",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "EnforcedPause",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "ExpectedPause",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Paused",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "Unpaused",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "mint",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "pause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "paused",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "unpause",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC2612ExpiredSignature(uint256)": [
								{
									"details": "Permit deadline has expired."
								}
							],
							"ERC2612InvalidSigner(address,address)": [
								{
									"details": "Mismatched signature."
								}
							],
							"EnforcedPause()": [
								{
									"details": "The operation failed because the contract is paused."
								}
							],
							"ExpectedPause()": [
								{
									"details": "The operation failed because the contract is not paused."
								}
							],
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							},
							"Paused(address)": {
								"details": "Emitted when the pause is triggered by `account`."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							},
							"Unpaused(address)": {
								"details": "Emitted when the pause is lifted by `account`."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}."
							},
							"burnFrom(address,uint256)": {
								"details": "Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"paused()": {
								"details": "Returns true if the contract is paused, and false otherwise."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/ERC_Token.sol\":450:1270  contract GhanaCommunicationTechnologyUniversity is ERC20, ERC20Burnable, ERC20Pausable, Ownable, ERC20Permit {... */\n  mstore(0x40, 0x0160)\n    /* \"contracts/ERC_Token.sol\":566:774  constructor(address initialOwner)... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  dup2\n  add\n  0x40\n  mstore\n  dup2\n  add\n  swap1\n  tag_2\n  swap2\n  swap1\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1574:1626  constructor(string memory name) EIP712(name, \"1\") {} */\n  mload(0x40)\n  dup1\n  0x60\n  add\n  0x40\n  mstore\n  dup1\n  0x2a\n  dup2\n  mstore\n  0x20\n  add\n  data_0d9fec584a25f4929244dc338dcb423f6e6b1b07580ab8fbd5dd5174210da996\n  0x2a\n  swap2\n  codecopy\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1613:1617  name */\n  dup1\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3328:3759  constructor(string memory name, string memory version) {... */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x01\n  dup2\n  mstore\n  0x20\n  add\n  0x3100000000000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  pop\n    /* \"contracts/ERC_Token.sol\":686:698  initialOwner */\n  dup4\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1896:2009  constructor(string memory name_, string memory symbol_) {... */\n  mload(0x40)\n  dup1\n  0x60\n  add\n  0x40\n  mstore\n  dup1\n  0x2a\n  dup2\n  mstore\n  0x20\n  add\n  data_0d9fec584a25f4929244dc338dcb423f6e6b1b07580ab8fbd5dd5174210da996\n  0x2a\n  swap2\n  codecopy\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x04\n  dup2\n  mstore\n  0x20\n  add\n  0x4743545500000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1970:1975  name_ */\n  dup2\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1962:1967  _name */\n  0x03\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1962:1975  _name = name_ */\n  swap1\n  dup2\n  tag_11\n  swap2\n  swap1\n  tag_12\n  jump\t// in\ntag_11:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1995:2002  symbol_ */\n  dup1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1985:1992  _symbol */\n  0x04\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1985:2002  _symbol = symbol_ */\n  swap1\n  dup2\n  tag_13\n  swap2\n  swap1\n  tag_12\n  jump\t// in\ntag_13:\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1896:2009  constructor(string memory name_, string memory symbol_) {... */\n  pop\n  pop\n    /* \"@openzeppelin/contracts/utils/Pausable.sol\":1241:1246  false */\n  0x00\n    /* \"@openzeppelin/contracts/utils/Pausable.sol\":1231:1238  _paused */\n  0x05\n  0x00\n    /* \"@openzeppelin/contracts/utils/Pausable.sol\":1231:1246  _paused = false */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xff\n  mul\n  not\n  and\n  swap1\n  dup4\n  iszero\n  iszero\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1297:1298  0 */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1299  initialOwner == address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1285  initialOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1273:1299  initialOwner == address(0) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  sub\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\n  tag_16\n  jumpi\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1350:1351  0 */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  mload(0x40)\n  0x1e4fbdf700000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  0x04\n  add\n  tag_17\n  swap2\n  swap1\n  tag_18\n  jump\t// in\ntag_17:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\ntag_16:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1405  _transferOwnership(initialOwner) */\n  tag_19\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1392:1404  initialOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1391  _transferOwnership */\n  shl(0x20, tag_20)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1373:1405  _transferOwnership(initialOwner) */\n  0x20\n  shr\n  jump\t// in\ntag_19:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":1225:1412  constructor(address initialOwner) {... */\n  pop\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3401:3446  name.toShortStringWithFallback(_nameFallback) */\n  tag_22\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3432:3445  _nameFallback */\n  0x06\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3401:3405  name */\n  dup4\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3401:3431  name.toShortStringWithFallback */\n  shl(0x20, tag_23)\n  swap1\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3401:3446  name.toShortStringWithFallback(_nameFallback) */\n  swap2\n  swap1\n  0x20\n  shr\n  jump\t// in\ntag_22:\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3393:3446  _name = name.toShortStringWithFallback(_nameFallback) */\n  0x0120\n  dup2\n  dup2\n  mstore\n  pop\n  pop\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3467:3518  version.toShortStringWithFallback(_versionFallback) */\n  tag_24\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3501:3517  _versionFallback */\n  0x07\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3467:3474  version */\n  dup3\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3467:3500  version.toShortStringWithFallback */\n  shl(0x20, tag_23)\n  swap1\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3467:3518  version.toShortStringWithFallback(_versionFallback) */\n  swap2\n  swap1\n  0x20\n  shr\n  jump\t// in\ntag_24:\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3456:3518  _version = version.toShortStringWithFallback(_versionFallback) */\n  0x0140\n  dup2\n  dup2\n  mstore\n  pop\n  pop\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3558:3562  name */\n  dup2\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3542:3564  keccak256(bytes(name)) */\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  keccak256\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3528:3564  _hashedName = keccak256(bytes(name)) */\n  0xe0\n  dup2\n  dup2\n  mstore\n  pop\n  pop\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3607:3614  version */\n  dup1\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3591:3616  keccak256(bytes(version)) */\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  keccak256\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3574:3616  _hashedVersion = keccak256(bytes(version)) */\n  0x0100\n  dup2\n  dup2\n  mstore\n  pop\n  pop\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3644:3657  block.chainid */\n  chainid\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3627:3657  _cachedChainId = block.chainid */\n  0xa0\n  dup2\n  dup2\n  mstore\n  pop\n  pop\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3692:3715  _buildDomainSeparator() */\n  tag_25\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3692:3713  _buildDomainSeparator */\n  shl(0x20, tag_26)\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3692:3715  _buildDomainSeparator() */\n  0x20\n  shr\n  jump\t// in\ntag_25:\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3667:3715  _cachedDomainSeparator = _buildDomainSeparator() */\n  0x80\n  dup2\n  dup2\n  mstore\n  pop\n  pop\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3747:3751  this */\n  address\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3725:3752  _cachedThis = address(this) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0xc0\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  dup2\n  mstore\n  pop\n  pop\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3328:3759  constructor(string memory name, string memory version) {... */\n  pop\n  pop\n    /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1574:1626  constructor(string memory name) EIP712(name, \"1\") {} */\n  pop\n    /* \"contracts/ERC_Token.sol\":566:774  constructor(address initialOwner)... */\n  pop\n    /* \"contracts/ERC_Token.sol\":450:1270  contract GhanaCommunicationTechnologyUniversity is ERC20, ERC20Burnable, ERC20Pausable, Ownable, ERC20Permit {... */\n  jump(tag_29)\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\ntag_20:\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n  0x00\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n  0x05\n  0x01\n  swap1\n  sload\n  swap1\n  0x0100\n  exp\n  swap1\n  div\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3010  address oldOwner = _owner */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3029:3037  newOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3026  _owner */\n  0x05\n  0x01\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3083:3091  newOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3073:3081  oldOwner */\n  dup2\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  mload(0x40)\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2975:3099  {... */\n  pop\n    /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2914:3254  function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {... */\ntag_23:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3010:3021  ShortString */\n  0x00\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3059:3061  32 */\n  0x20\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3043:3048  value */\n  dup4\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3037:3056  bytes(value).length */\n  mload\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3037:3061  bytes(value).length < 32 */\n  lt\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3033:3248  if (bytes(value).length < 32) {... */\n  iszero\n  tag_32\n  jumpi\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3084:3104  toShortString(value) */\n  tag_33\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3098:3103  value */\n  dup4\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3084:3097  toShortString */\n  shl(0x20, tag_34)\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3084:3104  toShortString(value) */\n  0x20\n  shr\n  jump\t// in\ntag_33:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3077:3104  return toShortString(value) */\n  swap1\n  pop\n  jump(tag_31)\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3033:3248  if (bytes(value).length < 32) {... */\ntag_32:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3176:3181  value */\n  dup3\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3135:3167  StorageSlot.getStringSlot(store) */\n  tag_36\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3161:3166  store */\n  dup4\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3135:3160  StorageSlot.getStringSlot */\n  shl(0x20, tag_37)\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3135:3167  StorageSlot.getStringSlot(store) */\n  0x20\n  shr\n  jump\t// in\ntag_36:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3135:3173  StorageSlot.getStringSlot(store).value */\n  0x00\n  add\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3135:3181  StorageSlot.getStringSlot(store).value = value */\n  swap1\n  dup2\n  tag_38\n  swap2\n  swap1\n  tag_12\n  jump\t// in\ntag_38:\n  pop\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n  0xff\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3219:3236  FALLBACK_SENTINEL */\n  0x00\n  shl\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3195:3237  return ShortString.wrap(FALLBACK_SENTINEL) */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2914:3254  function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {... */\ntag_31:\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4113:4292  function _buildDomainSeparator() private view returns (bytes32) {... */\ntag_26:\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4168:4175  bytes32 */\n  0x00\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4226:4237  _hashedName */\n  mload(0xe0)\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4239:4253  _hashedVersion */\n  mload(0x0100)\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4255:4268  block.chainid */\n  chainid\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4278:4282  this */\n  address\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n  add(0x20, mload(0x40))\n  tag_40\n  swap6\n  swap5\n  swap4\n  swap3\n  swap2\n  swap1\n  tag_41\n  jump\t// in\ntag_40:\n  mload(0x40)\n  0x20\n  dup2\n  dup4\n  sub\n  sub\n  dup2\n  mstore\n  swap1\n  0x40\n  mstore\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4194:4285  keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  keccak256\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4187:4285  return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4113:4292  function _buildDomainSeparator() private view returns (bytes32) {... */\n  swap1\n  jump\t// out\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1708:1994  function toShortString(string memory str) internal pure returns (ShortString) {... */\ntag_34:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1773:1784  ShortString */\n  0x00\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1796:1813  bytes memory bstr */\n  dup1\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1822:1825  str */\n  dup3\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1796:1826  bytes memory bstr = bytes(str) */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1854:1856  31 */\n  0x1f\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1840:1844  bstr */\n  dup2\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1840:1851  bstr.length */\n  mload\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1840:1856  bstr.length > 31 */\n  gt\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1836:1908  if (bstr.length > 31) {... */\n  iszero\n  tag_43\n  jumpi\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1893:1896  str */\n  dup3\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1879:1897  StringTooLong(str) */\n  mload(0x40)\n  0x305a27a900000000000000000000000000000000000000000000000000000000\n  dup2\n  mstore\n  0x04\n  add\n  tag_44\n  swap2\n  swap1\n  tag_45\n  jump\t// in\ntag_44:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1836:1908  if (bstr.length > 31) {... */\ntag_43:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1974:1978  bstr */\n  dup1\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1974:1985  bstr.length */\n  mload\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1965:1969  bstr */\n  dup2\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1957:1970  bytes32(bstr) */\n  tag_46\n  swap1\n  tag_47\n  jump\t// in\ntag_46:\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1949:1971  uint256(bytes32(bstr)) */\n  0x00\n  shr\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1949:1985  uint256(bytes32(bstr)) | bstr.length */\n  or\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1941:1986  bytes32(uint256(bytes32(bstr)) | bstr.length) */\n  0x00\n  shl\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1917:1987  return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length)) */\n  swap2\n  pop\n  pop\n    /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1708:1994  function toShortString(string memory str) internal pure returns (ShortString) {... */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts/utils/StorageSlot.sol\":3135:3337  function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {... */\ntag_37:\n    /* \"@openzeppelin/contracts/utils/StorageSlot.sol\":3203:3223  StringSlot storage r */\n  0x00\n    /* \"@openzeppelin/contracts/utils/StorageSlot.sol\":3311:3321  store.slot */\n  dup2\n    /* \"@openzeppelin/contracts/utils/StorageSlot.sol\":3301:3321  r.slot := store.slot */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts/utils/StorageSlot.sol\":3135:3337  function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {... */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":88:205   */\ntag_50:\n    /* \"#utility.yul\":197:198   */\n  0x00\n    /* \"#utility.yul\":194:195   */\n  dup1\n    /* \"#utility.yul\":187:199   */\n  revert\n    /* \"#utility.yul\":334:460   */\ntag_52:\n    /* \"#utility.yul\":371:378   */\n  0x00\n    /* \"#utility.yul\":411:453   */\n  0xffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":404:409   */\n  dup3\n    /* \"#utility.yul\":400:454   */\n  and\n    /* \"#utility.yul\":389:454   */\n  swap1\n  pop\n    /* \"#utility.yul\":334:460   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":466:562   */\ntag_53:\n    /* \"#utility.yul\":503:510   */\n  0x00\n    /* \"#utility.yul\":532:556   */\n  tag_93\n    /* \"#utility.yul\":550:555   */\n  dup3\n    /* \"#utility.yul\":532:556   */\n  tag_52\n  jump\t// in\ntag_93:\n    /* \"#utility.yul\":521:556   */\n  swap1\n  pop\n    /* \"#utility.yul\":466:562   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":568:690   */\ntag_54:\n    /* \"#utility.yul\":641:665   */\n  tag_95\n    /* \"#utility.yul\":659:664   */\n  dup2\n    /* \"#utility.yul\":641:665   */\n  tag_53\n  jump\t// in\ntag_95:\n    /* \"#utility.yul\":634:639   */\n  dup2\n    /* \"#utility.yul\":631:666   */\n  eq\n    /* \"#utility.yul\":621:684   */\n  tag_96\n  jumpi\n    /* \"#utility.yul\":680:681   */\n  0x00\n    /* \"#utility.yul\":677:678   */\n  dup1\n    /* \"#utility.yul\":670:682   */\n  revert\n    /* \"#utility.yul\":621:684   */\ntag_96:\n    /* \"#utility.yul\":568:690   */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":696:839   */\ntag_55:\n    /* \"#utility.yul\":753:758   */\n  0x00\n    /* \"#utility.yul\":784:790   */\n  dup2\n    /* \"#utility.yul\":778:791   */\n  mload\n    /* \"#utility.yul\":769:791   */\n  swap1\n  pop\n    /* \"#utility.yul\":800:833   */\n  tag_98\n    /* \"#utility.yul\":827:832   */\n  dup2\n    /* \"#utility.yul\":800:833   */\n  tag_54\n  jump\t// in\ntag_98:\n    /* \"#utility.yul\":696:839   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":845:1196   */\ntag_3:\n    /* \"#utility.yul\":915:921   */\n  0x00\n    /* \"#utility.yul\":964:966   */\n  0x20\n    /* \"#utility.yul\":952:961   */\n  dup3\n    /* \"#utility.yul\":943:950   */\n  dup5\n    /* \"#utility.yul\":939:962   */\n  sub\n    /* \"#utility.yul\":935:967   */\n  slt\n    /* \"#utility.yul\":932:1051   */\n  iszero\n  tag_100\n  jumpi\n    /* \"#utility.yul\":970:1049   */\n  tag_101\n  tag_50\n  jump\t// in\ntag_101:\n    /* \"#utility.yul\":932:1051   */\ntag_100:\n    /* \"#utility.yul\":1090:1091   */\n  0x00\n    /* \"#utility.yul\":1115:1179   */\n  tag_102\n    /* \"#utility.yul\":1171:1178   */\n  dup5\n    /* \"#utility.yul\":1162:1168   */\n  dup3\n    /* \"#utility.yul\":1151:1160   */\n  dup6\n    /* \"#utility.yul\":1147:1169   */\n  add\n    /* \"#utility.yul\":1115:1179   */\n  tag_55\n  jump\t// in\ntag_102:\n    /* \"#utility.yul\":1105:1179   */\n  swap2\n  pop\n    /* \"#utility.yul\":1061:1189   */\n  pop\n    /* \"#utility.yul\":845:1196   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1202:1301   */\ntag_56:\n    /* \"#utility.yul\":1254:1260   */\n  0x00\n    /* \"#utility.yul\":1288:1293   */\n  dup2\n    /* \"#utility.yul\":1282:1294   */\n  mload\n    /* \"#utility.yul\":1272:1294   */\n  swap1\n  pop\n    /* \"#utility.yul\":1202:1301   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1307:1487   */\ntag_57:\n    /* \"#utility.yul\":1355:1432   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":1352:1353   */\n  0x00\n    /* \"#utility.yul\":1345:1433   */\n  mstore\n    /* \"#utility.yul\":1452:1456   */\n  0x41\n    /* \"#utility.yul\":1449:1450   */\n  0x04\n    /* \"#utility.yul\":1442:1457   */\n  mstore\n    /* \"#utility.yul\":1476:1480   */\n  0x24\n    /* \"#utility.yul\":1473:1474   */\n  0x00\n    /* \"#utility.yul\":1466:1481   */\n  revert\n    /* \"#utility.yul\":1493:1673   */\ntag_58:\n    /* \"#utility.yul\":1541:1618   */\n  0x4e487b7100000000000000000000000000000000000000000000000000000000\n    /* \"#utility.yul\":1538:1539   */\n  0x00\n    /* \"#utility.yul\":1531:1619   */\n  mstore\n    /* \"#utility.yul\":1638:1642   */\n  0x22\n    /* \"#utility.yul\":1635:1636   */\n  0x04\n    /* \"#utility.yul\":1628:1643   */\n  mstore\n    /* \"#utility.yul\":1662:1666   */\n  0x24\n    /* \"#utility.yul\":1659:1660   */\n  0x00\n    /* \"#utility.yul\":1652:1667   */\n  revert\n    /* \"#utility.yul\":1679:1999   */\ntag_59:\n    /* \"#utility.yul\":1723:1729   */\n  0x00\n    /* \"#utility.yul\":1760:1761   */\n  0x02\n    /* \"#utility.yul\":1754:1758   */\n  dup3\n    /* \"#utility.yul\":1750:1762   */\n  div\n    /* \"#utility.yul\":1740:1762   */\n  swap1\n  pop\n    /* \"#utility.yul\":1807:1808   */\n  0x01\n    /* \"#utility.yul\":1801:1805   */\n  dup3\n    /* \"#utility.yul\":1797:1809   */\n  and\n    /* \"#utility.yul\":1828:1846   */\n  dup1\n    /* \"#utility.yul\":1818:1899   */\n  tag_107\n  jumpi\n    /* \"#utility.yul\":1884:1888   */\n  0x7f\n    /* \"#utility.yul\":1876:1882   */\n  dup3\n    /* \"#utility.yul\":1872:1889   */\n  and\n    /* \"#utility.yul\":1862:1889   */\n  swap2\n  pop\n    /* \"#utility.yul\":1818:1899   */\ntag_107:\n    /* \"#utility.yul\":1946:1948   */\n  0x20\n    /* \"#utility.yul\":1938:1944   */\n  dup3\n    /* \"#utility.yul\":1935:1949   */\n  lt\n    /* \"#utility.yul\":1915:1933   */\n  dup2\n    /* \"#utility.yul\":1912:1950   */\n  sub\n    /* \"#utility.yul\":1909:1993   */\n  tag_108\n  jumpi\n    /* \"#utility.yul\":1965:1983   */\n  tag_109\n  tag_58\n  jump\t// in\ntag_109:\n    /* \"#utility.yul\":1909:1993   */\ntag_108:\n    /* \"#utility.yul\":1730:1999   */\n  pop\n    /* \"#utility.yul\":1679:1999   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2005:2146   */\ntag_60:\n    /* \"#utility.yul\":2054:2058   */\n  0x00\n    /* \"#utility.yul\":2077:2080   */\n  dup2\n    /* \"#utility.yul\":2069:2080   */\n  swap1\n  pop\n    /* \"#utility.yul\":2100:2103   */\n  dup2\n    /* \"#utility.yul\":2097:2098   */\n  0x00\n    /* \"#utility.yul\":2090:2104   */\n  mstore\n    /* \"#utility.yul\":2134:2138   */\n  0x20\n    /* \"#utility.yul\":2131:2132   */\n  0x00\n    /* \"#utility.yul\":2121:2139   */\n  keccak256\n    /* \"#utility.yul\":2113:2139   */\n  swap1\n  pop\n    /* \"#utility.yul\":2005:2146   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2152:2245   */\ntag_61:\n    /* \"#utility.yul\":2189:2195   */\n  0x00\n    /* \"#utility.yul\":2236:2238   */\n  0x20\n    /* \"#utility.yul\":2231:2233   */\n  0x1f\n    /* \"#utility.yul\":2224:2229   */\n  dup4\n    /* \"#utility.yul\":2220:2234   */\n  add\n    /* \"#utility.yul\":2216:2239   */\n  div\n    /* \"#utility.yul\":2206:2239   */\n  swap1\n  pop\n    /* \"#utility.yul\":2152:2245   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2251:2358   */\ntag_62:\n    /* \"#utility.yul\":2295:2303   */\n  0x00\n    /* \"#utility.yul\":2345:2350   */\n  dup3\n    /* \"#utility.yul\":2339:2343   */\n  dup3\n    /* \"#utility.yul\":2335:2351   */\n  shl\n    /* \"#utility.yul\":2314:2351   */\n  swap1\n  pop\n    /* \"#utility.yul\":2251:2358   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2364:2757   */\ntag_63:\n    /* \"#utility.yul\":2433:2439   */\n  0x00\n    /* \"#utility.yul\":2483:2484   */\n  0x08\n    /* \"#utility.yul\":2471:2481   */\n  dup4\n    /* \"#utility.yul\":2467:2485   */\n  mul\n    /* \"#utility.yul\":2506:2603   */\n  tag_114\n    /* \"#utility.yul\":2536:2602   */\n  0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":2525:2534   */\n  dup3\n    /* \"#utility.yul\":2506:2603   */\n  tag_62\n  jump\t// in\ntag_114:\n    /* \"#utility.yul\":2624:2663   */\n  tag_115\n    /* \"#utility.yul\":2654:2662   */\n  dup7\n    /* \"#utility.yul\":2643:2652   */\n  dup4\n    /* \"#utility.yul\":2624:2663   */\n  tag_62\n  jump\t// in\ntag_115:\n    /* \"#utility.yul\":2612:2663   */\n  swap6\n  pop\n    /* \"#utility.yul\":2696:2700   */\n  dup1\n    /* \"#utility.yul\":2692:2701   */\n  not\n    /* \"#utility.yul\":2685:2690   */\n  dup5\n    /* \"#utility.yul\":2681:2702   */\n  and\n    /* \"#utility.yul\":2672:2702   */\n  swap4\n  pop\n    /* \"#utility.yul\":2745:2749   */\n  dup1\n    /* \"#utility.yul\":2735:2743   */\n  dup7\n    /* \"#utility.yul\":2731:2750   */\n  and\n    /* \"#utility.yul\":2724:2729   */\n  dup5\n    /* \"#utility.yul\":2721:2751   */\n  or\n    /* \"#utility.yul\":2711:2751   */\n  swap3\n  pop\n    /* \"#utility.yul\":2440:2757   */\n  pop\n  pop\n    /* \"#utility.yul\":2364:2757   */\n  swap4\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2763:2840   */\ntag_64:\n    /* \"#utility.yul\":2800:2807   */\n  0x00\n    /* \"#utility.yul\":2829:2834   */\n  dup2\n    /* \"#utility.yul\":2818:2834   */\n  swap1\n  pop\n    /* \"#utility.yul\":2763:2840   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2846:2906   */\ntag_65:\n    /* \"#utility.yul\":2874:2877   */\n  0x00\n    /* \"#utility.yul\":2895:2900   */\n  dup2\n    /* \"#utility.yul\":2888:2900   */\n  swap1\n  pop\n    /* \"#utility.yul\":2846:2906   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2912:3054   */\ntag_66:\n    /* \"#utility.yul\":2962:2971   */\n  0x00\n    /* \"#utility.yul\":2995:3048   */\n  tag_119\n    /* \"#utility.yul\":3013:3047   */\n  tag_120\n    /* \"#utility.yul\":3022:3046   */\n  tag_121\n    /* \"#utility.yul\":3040:3045   */\n  dup5\n    /* \"#utility.yul\":3022:3046   */\n  tag_64\n  jump\t// in\ntag_121:\n    /* \"#utility.yul\":3013:3047   */\n  tag_65\n  jump\t// in\ntag_120:\n    /* \"#utility.yul\":2995:3048   */\n  tag_64\n  jump\t// in\ntag_119:\n    /* \"#utility.yul\":2982:3048   */\n  swap1\n  pop\n    /* \"#utility.yul\":2912:3054   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3060:3135   */\ntag_67:\n    /* \"#utility.yul\":3103:3106   */\n  0x00\n    /* \"#utility.yul\":3124:3129   */\n  dup2\n    /* \"#utility.yul\":3117:3129   */\n  swap1\n  pop\n    /* \"#utility.yul\":3060:3135   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3141:3410   */\ntag_68:\n    /* \"#utility.yul\":3251:3290   */\n  tag_124\n    /* \"#utility.yul\":3282:3289   */\n  dup4\n    /* \"#utility.yul\":3251:3290   */\n  tag_66\n  jump\t// in\ntag_124:\n    /* \"#utility.yul\":3312:3403   */\n  tag_125\n    /* \"#utility.yul\":3361:3402   */\n  tag_126\n    /* \"#utility.yul\":3385:3401   */\n  dup3\n    /* \"#utility.yul\":3361:3402   */\n  tag_67\n  jump\t// in\ntag_126:\n    /* \"#utility.yul\":3353:3359   */\n  dup5\n    /* \"#utility.yul\":3346:3350   */\n  dup5\n    /* \"#utility.yul\":3340:3351   */\n  sload\n    /* \"#utility.yul\":3312:3403   */\n  tag_63\n  jump\t// in\ntag_125:\n    /* \"#utility.yul\":3306:3310   */\n  dup3\n    /* \"#utility.yul\":3299:3404   */\n  sstore\n    /* \"#utility.yul\":3217:3410   */\n  pop\n    /* \"#utility.yul\":3141:3410   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3416:3489   */\ntag_69:\n    /* \"#utility.yul\":3461:3464   */\n  0x00\n    /* \"#utility.yul\":3416:3489   */\n  swap1\n  jump\t// out\n    /* \"#utility.yul\":3495:3684   */\ntag_70:\n    /* \"#utility.yul\":3572:3604   */\n  tag_129\n  tag_69\n  jump\t// in\ntag_129:\n    /* \"#utility.yul\":3613:3678   */\n  tag_130\n    /* \"#utility.yul\":3671:3677   */\n  dup2\n    /* \"#utility.yul\":3663:3669   */\n  dup5\n    /* \"#utility.yul\":3657:3661   */\n  dup5\n    /* \"#utility.yul\":3613:3678   */\n  tag_68\n  jump\t// in\ntag_130:\n    /* \"#utility.yul\":3548:3684   */\n  pop\n    /* \"#utility.yul\":3495:3684   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3690:3876   */\ntag_71:\n    /* \"#utility.yul\":3750:3870   */\ntag_132:\n    /* \"#utility.yul\":3767:3770   */\n  dup2\n    /* \"#utility.yul\":3760:3765   */\n  dup2\n    /* \"#utility.yul\":3757:3771   */\n  lt\n    /* \"#utility.yul\":3750:3870   */\n  iszero\n  tag_134\n  jumpi\n    /* \"#utility.yul\":3821:3860   */\n  tag_135\n    /* \"#utility.yul\":3858:3859   */\n  0x00\n    /* \"#utility.yul\":3851:3856   */\n  dup3\n    /* \"#utility.yul\":3821:3860   */\n  tag_70\n  jump\t// in\ntag_135:\n    /* \"#utility.yul\":3794:3795   */\n  0x01\n    /* \"#utility.yul\":3787:3792   */\n  dup2\n    /* \"#utility.yul\":3783:3796   */\n  add\n    /* \"#utility.yul\":3774:3796   */\n  swap1\n  pop\n    /* \"#utility.yul\":3750:3870   */\n  jump(tag_132)\ntag_134:\n    /* \"#utility.yul\":3690:3876   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3882:4425   */\ntag_72:\n    /* \"#utility.yul\":3983:3985   */\n  0x1f\n    /* \"#utility.yul\":3978:3981   */\n  dup3\n    /* \"#utility.yul\":3975:3986   */\n  gt\n    /* \"#utility.yul\":3972:4418   */\n  iszero\n  tag_137\n  jumpi\n    /* \"#utility.yul\":4017:4055   */\n  tag_138\n    /* \"#utility.yul\":4049:4054   */\n  dup2\n    /* \"#utility.yul\":4017:4055   */\n  tag_60\n  jump\t// in\ntag_138:\n    /* \"#utility.yul\":4101:4130   */\n  tag_139\n    /* \"#utility.yul\":4119:4129   */\n  dup5\n    /* \"#utility.yul\":4101:4130   */\n  tag_61\n  jump\t// in\ntag_139:\n    /* \"#utility.yul\":4091:4099   */\n  dup2\n    /* \"#utility.yul\":4087:4131   */\n  add\n    /* \"#utility.yul\":4284:4286   */\n  0x20\n    /* \"#utility.yul\":4272:4282   */\n  dup6\n    /* \"#utility.yul\":4269:4287   */\n  lt\n    /* \"#utility.yul\":4266:4315   */\n  iszero\n  tag_140\n  jumpi\n    /* \"#utility.yul\":4305:4313   */\n  dup2\n    /* \"#utility.yul\":4290:4313   */\n  swap1\n  pop\n    /* \"#utility.yul\":4266:4315   */\ntag_140:\n    /* \"#utility.yul\":4328:4408   */\n  tag_141\n    /* \"#utility.yul\":4384:4406   */\n  tag_142\n    /* \"#utility.yul\":4402:4405   */\n  dup6\n    /* \"#utility.yul\":4384:4406   */\n  tag_61\n  jump\t// in\ntag_142:\n    /* \"#utility.yul\":4374:4382   */\n  dup4\n    /* \"#utility.yul\":4370:4407   */\n  add\n    /* \"#utility.yul\":4357:4368   */\n  dup3\n    /* \"#utility.yul\":4328:4408   */\n  tag_71\n  jump\t// in\ntag_141:\n    /* \"#utility.yul\":3987:4418   */\n  pop\n  pop\n    /* \"#utility.yul\":3972:4418   */\ntag_137:\n    /* \"#utility.yul\":3882:4425   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4431:4548   */\ntag_73:\n    /* \"#utility.yul\":4485:4493   */\n  0x00\n    /* \"#utility.yul\":4535:4540   */\n  dup3\n    /* \"#utility.yul\":4529:4533   */\n  dup3\n    /* \"#utility.yul\":4525:4541   */\n  shr\n    /* \"#utility.yul\":4504:4541   */\n  swap1\n  pop\n    /* \"#utility.yul\":4431:4548   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4554:4723   */\ntag_74:\n    /* \"#utility.yul\":4598:4604   */\n  0x00\n    /* \"#utility.yul\":4631:4682   */\n  tag_145\n    /* \"#utility.yul\":4679:4680   */\n  0x00\n    /* \"#utility.yul\":4675:4681   */\n  not\n    /* \"#utility.yul\":4667:4672   */\n  dup5\n    /* \"#utility.yul\":4664:4665   */\n  0x08\n    /* \"#utility.yul\":4660:4673   */\n  mul\n    /* \"#utility.yul\":4631:4682   */\n  tag_73\n  jump\t// in\ntag_145:\n    /* \"#utility.yul\":4627:4683   */\n  not\n    /* \"#utility.yul\":4712:4716   */\n  dup1\n    /* \"#utility.yul\":4706:4710   */\n  dup4\n    /* \"#utility.yul\":4702:4717   */\n  and\n    /* \"#utility.yul\":4692:4717   */\n  swap2\n  pop\n    /* \"#utility.yul\":4605:4723   */\n  pop\n    /* \"#utility.yul\":4554:4723   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4728:5023   */\ntag_75:\n    /* \"#utility.yul\":4804:4808   */\n  0x00\n    /* \"#utility.yul\":4950:4979   */\n  tag_147\n    /* \"#utility.yul\":4975:4978   */\n  dup4\n    /* \"#utility.yul\":4969:4973   */\n  dup4\n    /* \"#utility.yul\":4950:4979   */\n  tag_74\n  jump\t// in\ntag_147:\n    /* \"#utility.yul\":4942:4979   */\n  swap2\n  pop\n    /* \"#utility.yul\":5012:5015   */\n  dup3\n    /* \"#utility.yul\":5009:5010   */\n  0x02\n    /* \"#utility.yul\":5005:5016   */\n  mul\n    /* \"#utility.yul\":4999:5003   */\n  dup3\n    /* \"#utility.yul\":4996:5017   */\n  or\n    /* \"#utility.yul\":4988:5017   */\n  swap1\n  pop\n    /* \"#utility.yul\":4728:5023   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5028:6423   */\ntag_12:\n    /* \"#utility.yul\":5145:5182   */\n  tag_149\n    /* \"#utility.yul\":5178:5181   */\n  dup3\n    /* \"#utility.yul\":5145:5182   */\n  tag_56\n  jump\t// in\ntag_149:\n    /* \"#utility.yul\":5247:5265   */\n  0xffffffffffffffff\n    /* \"#utility.yul\":5239:5245   */\n  dup2\n    /* \"#utility.yul\":5236:5266   */\n  gt\n    /* \"#utility.yul\":5233:5289   */\n  iszero\n  tag_150\n  jumpi\n    /* \"#utility.yul\":5269:5287   */\n  tag_151\n  tag_57\n  jump\t// in\ntag_151:\n    /* \"#utility.yul\":5233:5289   */\ntag_150:\n    /* \"#utility.yul\":5313:5351   */\n  tag_152\n    /* \"#utility.yul\":5345:5349   */\n  dup3\n    /* \"#utility.yul\":5339:5350   */\n  sload\n    /* \"#utility.yul\":5313:5351   */\n  tag_59\n  jump\t// in\ntag_152:\n    /* \"#utility.yul\":5398:5465   */\n  tag_153\n    /* \"#utility.yul\":5458:5464   */\n  dup3\n    /* \"#utility.yul\":5450:5456   */\n  dup3\n    /* \"#utility.yul\":5444:5448   */\n  dup6\n    /* \"#utility.yul\":5398:5465   */\n  tag_72\n  jump\t// in\ntag_153:\n    /* \"#utility.yul\":5492:5493   */\n  0x00\n    /* \"#utility.yul\":5516:5520   */\n  0x20\n    /* \"#utility.yul\":5503:5520   */\n  swap1\n  pop\n    /* \"#utility.yul\":5548:5550   */\n  0x1f\n    /* \"#utility.yul\":5540:5546   */\n  dup4\n    /* \"#utility.yul\":5537:5551   */\n  gt\n    /* \"#utility.yul\":5565:5566   */\n  0x01\n    /* \"#utility.yul\":5560:6178   */\n  dup2\n  eq\n  tag_155\n  jumpi\n    /* \"#utility.yul\":6222:6223   */\n  0x00\n    /* \"#utility.yul\":6239:6245   */\n  dup5\n    /* \"#utility.yul\":6236:6313   */\n  iszero\n  tag_156\n  jumpi\n    /* \"#utility.yul\":6288:6297   */\n  dup3\n    /* \"#utility.yul\":6283:6286   */\n  dup8\n    /* \"#utility.yul\":6279:6298   */\n  add\n    /* \"#utility.yul\":6273:6299   */\n  mload\n    /* \"#utility.yul\":6264:6299   */\n  swap1\n  pop\n    /* \"#utility.yul\":6236:6313   */\ntag_156:\n    /* \"#utility.yul\":6339:6406   */\n  tag_157\n    /* \"#utility.yul\":6399:6405   */\n  dup6\n    /* \"#utility.yul\":6392:6397   */\n  dup3\n    /* \"#utility.yul\":6339:6406   */\n  tag_75\n  jump\t// in\ntag_157:\n    /* \"#utility.yul\":6333:6337   */\n  dup7\n    /* \"#utility.yul\":6326:6407   */\n  sstore\n    /* \"#utility.yul\":6195:6417   */\n  pop\n    /* \"#utility.yul\":5530:6417   */\n  jump(tag_154)\n    /* \"#utility.yul\":5560:6178   */\ntag_155:\n    /* \"#utility.yul\":5612:5616   */\n  0x1f\n    /* \"#utility.yul\":5608:5617   */\n  not\n    /* \"#utility.yul\":5600:5606   */\n  dup5\n    /* \"#utility.yul\":5596:5618   */\n  and\n    /* \"#utility.yul\":5646:5683   */\n  tag_158\n    /* \"#utility.yul\":5678:5682   */\n  dup7\n    /* \"#utility.yul\":5646:5683   */\n  tag_60\n  jump\t// in\ntag_158:\n    /* \"#utility.yul\":5705:5706   */\n  0x00\n    /* \"#utility.yul\":5719:5927   */\ntag_159:\n    /* \"#utility.yul\":5733:5740   */\n  dup3\n    /* \"#utility.yul\":5730:5731   */\n  dup2\n    /* \"#utility.yul\":5727:5741   */\n  lt\n    /* \"#utility.yul\":5719:5927   */\n  iszero\n  tag_161\n  jumpi\n    /* \"#utility.yul\":5812:5821   */\n  dup5\n    /* \"#utility.yul\":5807:5810   */\n  dup10\n    /* \"#utility.yul\":5803:5822   */\n  add\n    /* \"#utility.yul\":5797:5823   */\n  mload\n    /* \"#utility.yul\":5789:5795   */\n  dup3\n    /* \"#utility.yul\":5782:5824   */\n  sstore\n    /* \"#utility.yul\":5863:5864   */\n  0x01\n    /* \"#utility.yul\":5855:5861   */\n  dup3\n    /* \"#utility.yul\":5851:5865   */\n  add\n    /* \"#utility.yul\":5841:5865   */\n  swap2\n  pop\n    /* \"#utility.yul\":5910:5912   */\n  0x20\n    /* \"#utility.yul\":5899:5908   */\n  dup6\n    /* \"#utility.yul\":5895:5913   */\n  add\n    /* \"#utility.yul\":5882:5913   */\n  swap5\n  pop\n    /* \"#utility.yul\":5756:5760   */\n  0x20\n    /* \"#utility.yul\":5753:5754   */\n  dup2\n    /* \"#utility.yul\":5749:5761   */\n  add\n    /* \"#utility.yul\":5744:5761   */\n  swap1\n  pop\n    /* \"#utility.yul\":5719:5927   */\n  jump(tag_159)\ntag_161:\n    /* \"#utility.yul\":5955:5961   */\n  dup7\n    /* \"#utility.yul\":5946:5953   */\n  dup4\n    /* \"#utility.yul\":5943:5962   */\n  lt\n    /* \"#utility.yul\":5940:6119   */\n  iszero\n  tag_162\n  jumpi\n    /* \"#utility.yul\":6013:6022   */\n  dup5\n    /* \"#utility.yul\":6008:6011   */\n  dup10\n    /* \"#utility.yul\":6004:6023   */\n  add\n    /* \"#utility.yul\":5998:6024   */\n  mload\n    /* \"#utility.yul\":6056:6104   */\n  tag_163\n    /* \"#utility.yul\":6098:6102   */\n  0x1f\n    /* \"#utility.yul\":6090:6096   */\n  dup10\n    /* \"#utility.yul\":6086:6103   */\n  and\n    /* \"#utility.yul\":6075:6084   */\n  dup3\n    /* \"#utility.yul\":6056:6104   */\n  tag_74\n  jump\t// in\ntag_163:\n    /* \"#utility.yul\":6048:6054   */\n  dup4\n    /* \"#utility.yul\":6041:6105   */\n  sstore\n    /* \"#utility.yul\":5963:6119   */\n  pop\n    /* \"#utility.yul\":5940:6119   */\ntag_162:\n    /* \"#utility.yul\":6165:6166   */\n  0x01\n    /* \"#utility.yul\":6161:6162   */\n  0x02\n    /* \"#utility.yul\":6153:6159   */\n  dup9\n    /* \"#utility.yul\":6149:6163   */\n  mul\n    /* \"#utility.yul\":6145:6167   */\n  add\n    /* \"#utility.yul\":6139:6143   */\n  dup9\n    /* \"#utility.yul\":6132:6168   */\n  sstore\n    /* \"#utility.yul\":5567:6178   */\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":5530:6417   */\ntag_154:\n  pop\n    /* \"#utility.yul\":5120:6423   */\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":5028:6423   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6429:6547   */\ntag_76:\n    /* \"#utility.yul\":6516:6540   */\n  tag_165\n    /* \"#utility.yul\":6534:6539   */\n  dup2\n    /* \"#utility.yul\":6516:6540   */\n  tag_53\n  jump\t// in\ntag_165:\n    /* \"#utility.yul\":6511:6514   */\n  dup3\n    /* \"#utility.yul\":6504:6541   */\n  mstore\n    /* \"#utility.yul\":6429:6547   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6553:6775   */\ntag_18:\n    /* \"#utility.yul\":6646:6650   */\n  0x00\n    /* \"#utility.yul\":6684:6686   */\n  0x20\n    /* \"#utility.yul\":6673:6682   */\n  dup3\n    /* \"#utility.yul\":6669:6687   */\n  add\n    /* \"#utility.yul\":6661:6687   */\n  swap1\n  pop\n    /* \"#utility.yul\":6697:6768   */\n  tag_167\n    /* \"#utility.yul\":6765:6766   */\n  0x00\n    /* \"#utility.yul\":6754:6763   */\n  dup4\n    /* \"#utility.yul\":6750:6767   */\n  add\n    /* \"#utility.yul\":6741:6747   */\n  dup5\n    /* \"#utility.yul\":6697:6768   */\n  tag_76\n  jump\t// in\ntag_167:\n    /* \"#utility.yul\":6553:6775   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6781:6858   */\ntag_77:\n    /* \"#utility.yul\":6818:6825   */\n  0x00\n    /* \"#utility.yul\":6847:6852   */\n  dup2\n    /* \"#utility.yul\":6836:6852   */\n  swap1\n  pop\n    /* \"#utility.yul\":6781:6858   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6864:6982   */\ntag_78:\n    /* \"#utility.yul\":6951:6975   */\n  tag_170\n    /* \"#utility.yul\":6969:6974   */\n  dup2\n    /* \"#utility.yul\":6951:6975   */\n  tag_77\n  jump\t// in\ntag_170:\n    /* \"#utility.yul\":6946:6949   */\n  dup3\n    /* \"#utility.yul\":6939:6976   */\n  mstore\n    /* \"#utility.yul\":6864:6982   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6988:7106   */\ntag_79:\n    /* \"#utility.yul\":7075:7099   */\n  tag_172\n    /* \"#utility.yul\":7093:7098   */\n  dup2\n    /* \"#utility.yul\":7075:7099   */\n  tag_64\n  jump\t// in\ntag_172:\n    /* \"#utility.yul\":7070:7073   */\n  dup3\n    /* \"#utility.yul\":7063:7100   */\n  mstore\n    /* \"#utility.yul\":6988:7106   */\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7112:7776   */\ntag_41:\n    /* \"#utility.yul\":7317:7321   */\n  0x00\n    /* \"#utility.yul\":7355:7358   */\n  0xa0\n    /* \"#utility.yul\":7344:7353   */\n  dup3\n    /* \"#utility.yul\":7340:7359   */\n  add\n    /* \"#utility.yul\":7332:7359   */\n  swap1\n  pop\n    /* \"#utility.yul\":7369:7440   */\n  tag_174\n    /* \"#utility.yul\":7437:7438   */\n  0x00\n    /* \"#utility.yul\":7426:7435   */\n  dup4\n    /* \"#utility.yul\":7422:7439   */\n  add\n    /* \"#utility.yul\":7413:7419   */\n  dup9\n    /* \"#utility.yul\":7369:7440   */\n  tag_78\n  jump\t// in\ntag_174:\n    /* \"#utility.yul\":7450:7522   */\n  tag_175\n    /* \"#utility.yul\":7518:7520   */\n  0x20\n    /* \"#utility.yul\":7507:7516   */\n  dup4\n    /* \"#utility.yul\":7503:7521   */\n  add\n    /* \"#utility.yul\":7494:7500   */\n  dup8\n    /* \"#utility.yul\":7450:7522   */\n  tag_78\n  jump\t// in\ntag_175:\n    /* \"#utility.yul\":7532:7604   */\n  tag_176\n    /* \"#utility.yul\":7600:7602   */\n  0x40\n    /* \"#utility.yul\":7589:7598   */\n  dup4\n    /* \"#utility.yul\":7585:7603   */\n  add\n    /* \"#utility.yul\":7576:7582   */\n  dup7\n    /* \"#utility.yul\":7532:7604   */\n  tag_78\n  jump\t// in\ntag_176:\n    /* \"#utility.yul\":7614:7686   */\n  tag_177\n    /* \"#utility.yul\":7682:7684   */\n  0x60\n    /* \"#utility.yul\":7671:7680   */\n  dup4\n    /* \"#utility.yul\":7667:7685   */\n  add\n    /* \"#utility.yul\":7658:7664   */\n  dup6\n    /* \"#utility.yul\":7614:7686   */\n  tag_79\n  jump\t// in\ntag_177:\n    /* \"#utility.yul\":7696:7769   */\n  tag_178\n    /* \"#utility.yul\":7764:7767   */\n  0x80\n    /* \"#utility.yul\":7753:7762   */\n  dup4\n    /* \"#utility.yul\":7749:7768   */\n  add\n    /* \"#utility.yul\":7740:7746   */\n  dup5\n    /* \"#utility.yul\":7696:7769   */\n  tag_76\n  jump\t// in\ntag_178:\n    /* \"#utility.yul\":7112:7776   */\n  swap7\n  swap6\n  pop\n  pop\n  pop\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7782:7951   */\ntag_80:\n    /* \"#utility.yul\":7866:7877   */\n  0x00\n    /* \"#utility.yul\":7900:7906   */\n  dup3\n    /* \"#utility.yul\":7895:7898   */\n  dup3\n    /* \"#utility.yul\":7888:7907   */\n  mstore\n    /* \"#utility.yul\":7940:7944   */\n  0x20\n    /* \"#utility.yul\":7935:7938   */\n  dup3\n    /* \"#utility.yul\":7931:7945   */\n  add\n    /* \"#utility.yul\":7916:7945   */\n  swap1\n  pop\n    /* \"#utility.yul\":7782:7951   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":7957:8096   */\ntag_81:\n    /* \"#utility.yul\":8046:8052   */\n  dup3\n    /* \"#utility.yul\":8041:8044   */\n  dup2\n    /* \"#utility.yul\":8036:8039   */\n  dup4\n    /* \"#utility.yul\":8030:8053   */\n  mcopy\n    /* \"#utility.yul\":8087:8088   */\n  0x00\n    /* \"#utility.yul\":8078:8084   */\n  dup4\n    /* \"#utility.yul\":8073:8076   */\n  dup4\n    /* \"#utility.yul\":8069:8085   */\n  add\n    /* \"#utility.yul\":8062:8089   */\n  mstore\n    /* \"#utility.yul\":7957:8096   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":8102:8204   */\ntag_82:\n    /* \"#utility.yul\":8143:8149   */\n  0x00\n    /* \"#utility.yul\":8194:8196   */\n  0x1f\n    /* \"#utility.yul\":8190:8197   */\n  not\n    /* \"#utility.yul\":8185:8187   */\n  0x1f\n    /* \"#utility.yul\":8178:8183   */\n  dup4\n    /* \"#utility.yul\":8174:8188   */\n  add\n    /* \"#utility.yul\":8170:8198   */\n  and\n    /* \"#utility.yul\":8160:8198   */\n  swap1\n  pop\n    /* \"#utility.yul\":8102:8204   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":8210:8587   */\ntag_83:\n    /* \"#utility.yul\":8298:8301   */\n  0x00\n    /* \"#utility.yul\":8326:8365   */\n  tag_183\n    /* \"#utility.yul\":8359:8364   */\n  dup3\n    /* \"#utility.yul\":8326:8365   */\n  tag_56\n  jump\t// in\ntag_183:\n    /* \"#utility.yul\":8381:8452   */\n  tag_184\n    /* \"#utility.yul\":8445:8451   */\n  dup2\n    /* \"#utility.yul\":8440:8443   */\n  dup6\n    /* \"#utility.yul\":8381:8452   */\n  tag_80\n  jump\t// in\ntag_184:\n    /* \"#utility.yul\":8374:8452   */\n  swap4\n  pop\n    /* \"#utility.yul\":8461:8526   */\n  tag_185\n    /* \"#utility.yul\":8519:8525   */\n  dup2\n    /* \"#utility.yul\":8514:8517   */\n  dup6\n    /* \"#utility.yul\":8507:8511   */\n  0x20\n    /* \"#utility.yul\":8500:8505   */\n  dup7\n    /* \"#utility.yul\":8496:8512   */\n  add\n    /* \"#utility.yul\":8461:8526   */\n  tag_81\n  jump\t// in\ntag_185:\n    /* \"#utility.yul\":8551:8580   */\n  tag_186\n    /* \"#utility.yul\":8573:8579   */\n  dup2\n    /* \"#utility.yul\":8551:8580   */\n  tag_82\n  jump\t// in\ntag_186:\n    /* \"#utility.yul\":8546:8549   */\n  dup5\n    /* \"#utility.yul\":8542:8581   */\n  add\n    /* \"#utility.yul\":8535:8581   */\n  swap2\n  pop\n    /* \"#utility.yul\":8302:8587   */\n  pop\n    /* \"#utility.yul\":8210:8587   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":8593:8906   */\ntag_45:\n    /* \"#utility.yul\":8706:8710   */\n  0x00\n    /* \"#utility.yul\":8744:8746   */\n  0x20\n    /* \"#utility.yul\":8733:8742   */\n  dup3\n    /* \"#utility.yul\":8729:8747   */\n  add\n    /* \"#utility.yul\":8721:8747   */\n  swap1\n  pop\n    /* \"#utility.yul\":8793:8802   */\n  dup2\n    /* \"#utility.yul\":8787:8791   */\n  dup2\n    /* \"#utility.yul\":8783:8803   */\n  sub\n    /* \"#utility.yul\":8779:8780   */\n  0x00\n    /* \"#utility.yul\":8768:8777   */\n  dup4\n    /* \"#utility.yul\":8764:8781   */\n  add\n    /* \"#utility.yul\":8757:8804   */\n  mstore\n    /* \"#utility.yul\":8821:8899   */\n  tag_188\n    /* \"#utility.yul\":8894:8898   */\n  dup2\n    /* \"#utility.yul\":8885:8891   */\n  dup5\n    /* \"#utility.yul\":8821:8899   */\n  tag_83\n  jump\t// in\ntag_188:\n    /* \"#utility.yul\":8813:8899   */\n  swap1\n  pop\n    /* \"#utility.yul\":8593:8906   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":8912:9010   */\ntag_84:\n    /* \"#utility.yul\":8963:8969   */\n  0x00\n    /* \"#utility.yul\":8997:9002   */\n  dup2\n    /* \"#utility.yul\":8991:9003   */\n  mload\n    /* \"#utility.yul\":8981:9003   */\n  swap1\n  pop\n    /* \"#utility.yul\":8912:9010   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":9016:9132   */\ntag_85:\n    /* \"#utility.yul\":9067:9071   */\n  0x00\n    /* \"#utility.yul\":9090:9093   */\n  dup2\n    /* \"#utility.yul\":9082:9093   */\n  swap1\n  pop\n    /* \"#utility.yul\":9120:9124   */\n  0x20\n    /* \"#utility.yul\":9115:9118   */\n  dup3\n    /* \"#utility.yul\":9111:9125   */\n  add\n    /* \"#utility.yul\":9103:9125   */\n  swap1\n  pop\n    /* \"#utility.yul\":9016:9132   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":9138:9292   */\ntag_86:\n    /* \"#utility.yul\":9181:9192   */\n  0x00\n    /* \"#utility.yul\":9217:9246   */\n  tag_192\n    /* \"#utility.yul\":9241:9244   */\n  dup3\n    /* \"#utility.yul\":9235:9245   */\n  mload\n    /* \"#utility.yul\":9217:9246   */\n  tag_77\n  jump\t// in\ntag_192:\n    /* \"#utility.yul\":9280:9285   */\n  dup1\n    /* \"#utility.yul\":9256:9285   */\n  swap2\n  pop\n    /* \"#utility.yul\":9193:9292   */\n  pop\n    /* \"#utility.yul\":9138:9292   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":9298:9892   */\ntag_47:\n    /* \"#utility.yul\":9382:9387   */\n  0x00\n    /* \"#utility.yul\":9413:9451   */\n  tag_194\n    /* \"#utility.yul\":9445:9450   */\n  dup3\n    /* \"#utility.yul\":9413:9451   */\n  tag_84\n  jump\t// in\ntag_194:\n    /* \"#utility.yul\":9476:9481   */\n  dup3\n    /* \"#utility.yul\":9503:9543   */\n  tag_195\n    /* \"#utility.yul\":9537:9542   */\n  dup5\n    /* \"#utility.yul\":9503:9543   */\n  tag_85\n  jump\t// in\ntag_195:\n    /* \"#utility.yul\":9491:9543   */\n  swap1\n  pop\n    /* \"#utility.yul\":9562:9597   */\n  tag_196\n    /* \"#utility.yul\":9588:9596   */\n  dup2\n    /* \"#utility.yul\":9562:9597   */\n  tag_86\n  jump\t// in\ntag_196:\n    /* \"#utility.yul\":9553:9597   */\n  swap3\n  pop\n    /* \"#utility.yul\":9621:9623   */\n  0x20\n    /* \"#utility.yul\":9613:9619   */\n  dup3\n    /* \"#utility.yul\":9610:9624   */\n  lt\n    /* \"#utility.yul\":9607:9885   */\n  iszero\n  tag_197\n  jumpi\n    /* \"#utility.yul\":9692:9861   */\n  tag_198\n    /* \"#utility.yul\":9777:9843   */\n  0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n    /* \"#utility.yul\":9747:9753   */\n  dup4\n    /* \"#utility.yul\":9743:9745   */\n  0x20\n    /* \"#utility.yul\":9739:9754   */\n  sub\n    /* \"#utility.yul\":9736:9737   */\n  0x08\n    /* \"#utility.yul\":9732:9755   */\n  mul\n    /* \"#utility.yul\":9692:9861   */\n  tag_62\n  jump\t// in\ntag_198:\n    /* \"#utility.yul\":9669:9674   */\n  dup4\n    /* \"#utility.yul\":9648:9875   */\n  and\n    /* \"#utility.yul\":9639:9875   */\n  swap3\n  pop\n    /* \"#utility.yul\":9607:9885   */\ntag_197:\n    /* \"#utility.yul\":9388:9892   */\n  pop\n  pop\n    /* \"#utility.yul\":9298:9892   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"contracts/ERC_Token.sol\":450:1270  contract GhanaCommunicationTechnologyUniversity is ERC20, ERC20Burnable, ERC20Pausable, Ownable, ERC20Permit {... */\ntag_29:\n  mload(0x80)\n  mload(0xa0)\n  mload(0xc0)\n  mload(0xe0)\n  mload(0x0100)\n  mload(0x0120)\n  mload(0x0140)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0xc81bfac384a0ec543c77e5176d9b9eb40c3af8fefa4e3c7657dda11321657778\")\n  0x00\n  assignImmutable(\"0x7d81e85b4a2af4bd6246fd18e1213d6d70ceeba70466178b3c6e4c0f6381e850\")\n  0x00\n  assignImmutable(\"0xbce8897c1d3546db005567607154841ec10937e6a225e4ea07cfbf9a6b139dea\")\n  0x00\n  assignImmutable(\"0x65c288f20bdeec3b8068bce0cb7c6a17051020d09717e451b984f80af474ef00\")\n  0x00\n  assignImmutable(\"0xcb7b5834b7e5299c6704f53d971bda2c8ab8a394d0e13e911296a3f1ed3f075e\")\n  0x00\n  assignImmutable(\"0x65281ed8ccefade9b86c81750599de18d311b92b65fa2f9574f29bea17eeada2\")\n  0x00\n  assignImmutable(\"0x637044082104a0df38c56ebf385c4c88ba9376eb8d65439329a06208e4517c88\")\n  return(0x00, dataSize(sub_0))\nstop\ndata_0d9fec584a25f4929244dc338dcb423f6e6b1b07580ab8fbd5dd5174210da996 4768616e6120436f6d6d756e69636174696f6e20546563686e6f6c6f677920556e697665727369747920\n\nsub_0: assembly {\n        /* \"contracts/ERC_Token.sol\":450:1270  contract GhanaCommunicationTechnologyUniversity is ERC20, ERC20Burnable, ERC20Pausable, Ownable, ERC20Permit {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x715018a6\n      gt\n      tag_25\n      jumpi\n      dup1\n      0x8da5cb5b\n      gt\n      tag_26\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_19\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xd505accf\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_23\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_24\n      jumpi\n      jump(tag_2)\n    tag_26:\n      dup1\n      0x715018a6\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x79cc6790\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x7ecebe00\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x8456cb59\n      eq\n      tag_17\n      jumpi\n      dup1\n      0x84b0196e\n      eq\n      tag_18\n      jumpi\n      jump(tag_2)\n    tag_25:\n      dup1\n      0x3644e515\n      gt\n      tag_27\n      jumpi\n      dup1\n      0x3644e515\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x3f4ba83a\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x40c10f19\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x42966c68\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x5c975abb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_27:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n    tag_3:\n      tag_28\n      tag_29\n      jump\t// in\n    tag_28:\n      mload(0x40)\n      tag_30\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_30:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_4:\n      tag_32\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_33\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_33:\n      tag_35\n      jump\t// in\n    tag_32:\n      mload(0x40)\n      tag_36\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_36:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n    tag_5:\n      tag_38\n      tag_39\n      jump\t// in\n    tag_38:\n      mload(0x40)\n      tag_40\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n    tag_40:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_6:\n      tag_42\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_43\n      swap2\n      swap1\n      tag_44\n      jump\t// in\n    tag_43:\n      tag_45\n      jump\t// in\n    tag_42:\n      mload(0x40)\n      tag_46\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_46:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3002:3084  function decimals() public view virtual returns (uint8) {... */\n    tag_7:\n      tag_47\n      tag_48\n      jump\t// in\n    tag_47:\n      mload(0x40)\n      tag_49\n      swap2\n      swap1\n      tag_50\n      jump\t// in\n    tag_49:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2656:2768  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {... */\n    tag_8:\n      tag_51\n      tag_52\n      jump\t// in\n    tag_51:\n      mload(0x40)\n      tag_53\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n    tag_53:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC_Token.sol\":851:916  function unpause() public onlyOwner {... */\n    tag_9:\n      tag_55\n      tag_56\n      jump\t// in\n    tag_55:\n      stop\n        /* \"contracts/ERC_Token.sol\":924:1019  function mint(address to, uint256 amount) public onlyOwner {... */\n    tag_10:\n      tag_57\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_58\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_58:\n      tag_59\n      jump\t// in\n    tag_57:\n      stop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":618:705  function burn(uint256 value) public virtual {... */\n    tag_11:\n      tag_60\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_61\n      swap2\n      swap1\n      tag_62\n      jump\t// in\n    tag_61:\n      tag_63\n      jump\t// in\n    tag_60:\n      stop\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1850:1934  function paused() public view virtual returns (bool) {... */\n    tag_12:\n      tag_64\n      tag_65\n      jump\t// in\n    tag_64:\n      mload(0x40)\n      tag_66\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_66:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3299:3415  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_13:\n      tag_67\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_68\n      swap2\n      swap1\n      tag_69\n      jump\t// in\n    tag_68:\n      tag_70\n      jump\t// in\n    tag_67:\n      mload(0x40)\n      tag_71\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n    tag_71:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n    tag_14:\n      tag_72\n      tag_73\n      jump\t// in\n    tag_72:\n      stop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1021:1179  function burnFrom(address account, uint256 value) public virtual {... */\n    tag_15:\n      tag_74\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_75\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_75:\n      tag_76\n      jump\t// in\n    tag_74:\n      stop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2406:2549  function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {... */\n    tag_16:\n      tag_77\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_78\n      swap2\n      swap1\n      tag_69\n      jump\t// in\n    tag_78:\n      tag_79\n      jump\t// in\n    tag_77:\n      mload(0x40)\n      tag_80\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n    tag_80:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/ERC_Token.sol\":782:843  function pause() public onlyOwner {... */\n    tag_17:\n      tag_81\n      tag_82\n      jump\t// in\n    tag_81:\n      stop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5144:5701  function eip712Domain()... */\n    tag_18:\n      tag_83\n      tag_84\n      jump\t// in\n    tag_83:\n      mload(0x40)\n      tag_85\n      swap8\n      swap7\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_86\n      jump\t// in\n    tag_85:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n    tag_19:\n      tag_87\n      tag_88\n      jump\t// in\n    tag_87:\n      mload(0x40)\n      tag_89\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_89:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2276:2369  function symbol() public view virtual returns (string memory) {... */\n    tag_20:\n      tag_91\n      tag_92\n      jump\t// in\n    tag_91:\n      mload(0x40)\n      tag_93\n      swap2\n      swap1\n      tag_31\n      jump\t// in\n    tag_93:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3610:3788  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_21:\n      tag_94\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_95\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_95:\n      tag_96\n      jump\t// in\n    tag_94:\n      mload(0x40)\n      tag_97\n      swap2\n      swap1\n      tag_37\n      jump\t// in\n    tag_97:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1680:2352  function permit(... */\n    tag_22:\n      tag_98\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_99\n      swap2\n      swap1\n      tag_100\n      jump\t// in\n    tag_99:\n      tag_101\n      jump\t// in\n    tag_98:\n      stop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3846:3986  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_23:\n      tag_102\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_103\n      swap2\n      swap1\n      tag_104\n      jump\t// in\n    tag_103:\n      tag_105\n      jump\t// in\n    tag_102:\n      mload(0x40)\n      tag_106\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n    tag_106:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_24:\n      tag_107\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_108\n      swap2\n      swap1\n      tag_69\n      jump\t// in\n    tag_108:\n      tag_109\n      jump\t// in\n    tag_107:\n      stop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n    tag_29:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2119:2132  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2151:2156  _name */\n      0x03\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2144:2156  return _name */\n      dup1\n      sload\n      tag_111\n      swap1\n      tag_112\n      jump\t// in\n    tag_111:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_113\n      swap1\n      tag_112\n      jump\t// in\n    tag_113:\n      dup1\n      iszero\n      tag_114\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_115\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_114)\n    tag_115:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_116:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_116\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_114:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_35:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4366:4370  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4382:4395  address owner */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4398:4410  _msgSender() */\n      tag_118\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4398:4408  _msgSender */\n      tag_119\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4398:4410  _msgSender() */\n      jump\t// in\n    tag_118:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4382:4410  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4420:4451  _approve(owner, spender, value) */\n      tag_120\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4429:4434  owner */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4436:4443  spender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4445:4450  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4420:4428  _approve */\n      tag_121\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4420:4451  _approve(owner, spender, value) */\n      jump\t// in\n    tag_120:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4468:4472  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4461:4472  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n    tag_39:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3196:3203  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3222:3234  _totalSupply */\n      sload(0x02)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3215:3234  return _totalSupply */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_45:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5126:5130  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5142:5157  address spender */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5160:5172  _msgSender() */\n      tag_124\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5160:5170  _msgSender */\n      tag_119\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5160:5172  _msgSender() */\n      jump\t// in\n    tag_124:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5142:5172  address spender = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5182:5219  _spendAllowance(from, spender, value) */\n      tag_125\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5198:5202  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5204:5211  spender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5213:5218  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5182:5197  _spendAllowance */\n      tag_126\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5182:5219  _spendAllowance(from, spender, value) */\n      jump\t// in\n    tag_125:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5229:5255  _transfer(from, to, value) */\n      tag_127\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5239:5243  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5245:5247  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5249:5254  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5229:5238  _transfer */\n      tag_128\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5229:5255  _transfer(from, to, value) */\n      jump\t// in\n    tag_127:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5272:5276  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5265:5276  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3002:3084  function decimals() public view virtual returns (uint8) {... */\n    tag_48:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3051:3056  uint8 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3075:3077  18 */\n      0x12\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3068:3077  return 18 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3002:3084  function decimals() public view virtual returns (uint8) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2656:2768  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {... */\n    tag_52:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2715:2722  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2741:2761  _domainSeparatorV4() */\n      tag_131\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2741:2759  _domainSeparatorV4 */\n      tag_132\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2741:2761  _domainSeparatorV4() */\n      jump\t// in\n    tag_131:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2734:2761  return _domainSeparatorV4() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2656:2768  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/ERC_Token.sol\":851:916  function unpause() public onlyOwner {... */\n    tag_56:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_134\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_135\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_134:\n        /* \"contracts/ERC_Token.sol\":898:908  _unpause() */\n      tag_137\n        /* \"contracts/ERC_Token.sol\":898:906  _unpause */\n      tag_138\n        /* \"contracts/ERC_Token.sol\":898:908  _unpause() */\n      jump\t// in\n    tag_137:\n        /* \"contracts/ERC_Token.sol\":851:916  function unpause() public onlyOwner {... */\n      jump\t// out\n        /* \"contracts/ERC_Token.sol\":924:1019  function mint(address to, uint256 amount) public onlyOwner {... */\n    tag_59:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_140\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_135\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_140:\n        /* \"contracts/ERC_Token.sol\":994:1011  _mint(to, amount) */\n      tag_142\n        /* \"contracts/ERC_Token.sol\":1000:1002  to */\n      dup3\n        /* \"contracts/ERC_Token.sol\":1004:1010  amount */\n      dup3\n        /* \"contracts/ERC_Token.sol\":994:999  _mint */\n      tag_143\n        /* \"contracts/ERC_Token.sol\":994:1011  _mint(to, amount) */\n      jump\t// in\n    tag_142:\n        /* \"contracts/ERC_Token.sol\":924:1019  function mint(address to, uint256 amount) public onlyOwner {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":618:705  function burn(uint256 value) public virtual {... */\n    tag_63:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":672:698  _burn(_msgSender(), value) */\n      tag_145\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":678:690  _msgSender() */\n      tag_146\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":678:688  _msgSender */\n      tag_119\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":678:690  _msgSender() */\n      jump\t// in\n    tag_146:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":692:697  value */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":672:677  _burn */\n      tag_147\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":672:698  _burn(_msgSender(), value) */\n      jump\t// in\n    tag_145:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":618:705  function burn(uint256 value) public virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1850:1934  function paused() public view virtual returns (bool) {... */\n    tag_65:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1897:1901  bool */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1920:1927  _paused */\n      0x05\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1913:1927  return _paused */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1850:1934  function paused() public view virtual returns (bool) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3299:3415  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_70:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3364:3371  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3399  _balances */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3408  _balances[account] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3400:3407  account */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3390:3408  _balances[account] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3383:3408  return _balances[account] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3299:3415  function balanceOf(address account) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n    tag_73:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_151\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_135\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_151:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2387  _transferOwnership(address(0)) */\n      tag_153\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2384:2385  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2375  _transferOwnership */\n      tag_154\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2357:2387  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_153:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1021:1179  function burnFrom(address account, uint256 value) public virtual {... */\n    tag_76:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1096:1141  _spendAllowance(account, _msgSender(), value) */\n      tag_156\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1112:1119  account */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1121:1133  _msgSender() */\n      tag_157\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1121:1131  _msgSender */\n      tag_119\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1121:1133  _msgSender() */\n      jump\t// in\n    tag_157:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1135:1140  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1096:1111  _spendAllowance */\n      tag_126\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1096:1141  _spendAllowance(account, _msgSender(), value) */\n      jump\t// in\n    tag_156:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1151:1172  _burn(account, value) */\n      tag_158\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1157:1164  account */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1166:1171  value */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1151:1156  _burn */\n      tag_147\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1151:1172  _burn(account, value) */\n      jump\t// in\n    tag_158:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":1021:1179  function burnFrom(address account, uint256 value) public virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2406:2549  function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {... */\n    tag_79:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2497:2504  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2523:2542  super.nonces(owner) */\n      tag_160\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2536:2541  owner */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2523:2535  super.nonces */\n      tag_161\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2523:2542  super.nonces(owner) */\n      jump\t// in\n    tag_160:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2516:2542  return super.nonces(owner) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2406:2549  function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/ERC_Token.sol\":782:843  function pause() public onlyOwner {... */\n    tag_82:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_163\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_135\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_163:\n        /* \"contracts/ERC_Token.sol\":827:835  _pause() */\n      tag_165\n        /* \"contracts/ERC_Token.sol\":827:833  _pause */\n      tag_166\n        /* \"contracts/ERC_Token.sol\":827:835  _pause() */\n      jump\t// in\n    tag_165:\n        /* \"contracts/ERC_Token.sol\":782:843  function pause() public onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5144:5701  function eip712Domain()... */\n    tag_84:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5242:5255  bytes1 fields */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5269:5287  string memory name */\n      0x60\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5301:5322  string memory version */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5336:5351  uint256 chainId */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5365:5390  address verifyingContract */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5404:5416  bytes32 salt */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5430:5457  uint256[] memory extensions */\n      0x60\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5533:5546  _EIP712Name() */\n      tag_168\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5533:5544  _EIP712Name */\n      tag_169\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5533:5546  _EIP712Name() */\n      jump\t// in\n    tag_168:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5560:5576  _EIP712Version() */\n      tag_170\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5560:5574  _EIP712Version */\n      tag_171\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5560:5576  _EIP712Version() */\n      jump\t// in\n    tag_170:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5590:5603  block.chainid */\n      chainid\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5625:5629  this */\n      address\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5652:5653  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5644:5654  bytes32(0) */\n      dup1\n      shl\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5682:5683  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5668:5684  new uint256[](0) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_172\n      jumpi\n      tag_173\n      tag_174\n      jump\t// in\n    tag_173:\n    tag_172:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_175\n      jumpi\n      dup2\n      0x20\n      add\n      0x20\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      dup1\n      dup3\n      add\n      swap2\n      pop\n      pop\n      swap1\n      pop\n    tag_175:\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5482:5694  return (... */\n      0x0f00000000000000000000000000000000000000000000000000000000000000\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      swap7\n      pop\n      swap7\n      pop\n      swap7\n      pop\n      swap7\n      pop\n      swap7\n      pop\n      swap7\n      pop\n      swap7\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5144:5701  function eip712Domain()... */\n      swap1\n      swap2\n      swap3\n      swap4\n      swap5\n      swap6\n      swap7\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n    tag_88:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1684:1691  address */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1710:1716  _owner */\n      0x05\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1703:1716  return _owner */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2276:2369  function symbol() public view virtual returns (string memory) {... */\n    tag_92:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2323:2336  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2355:2362  _symbol */\n      0x04\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2348:2362  return _symbol */\n      dup1\n      sload\n      tag_178\n      swap1\n      tag_112\n      jump\t// in\n    tag_178:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_179\n      swap1\n      tag_112\n      jump\t// in\n    tag_179:\n      dup1\n      iszero\n      tag_180\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_181\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_180)\n    tag_181:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_182:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_182\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_180:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2276:2369  function symbol() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3610:3788  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_96:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3679:3683  bool */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3695:3708  address owner */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3711:3723  _msgSender() */\n      tag_184\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3711:3721  _msgSender */\n      tag_119\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3711:3723  _msgSender() */\n      jump\t// in\n    tag_184:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3695:3723  address owner = _msgSender() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3733:3760  _transfer(owner, to, value) */\n      tag_185\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3743:3748  owner */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3750:3752  to */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3754:3759  value */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3733:3742  _transfer */\n      tag_128\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3733:3760  _transfer(owner, to, value) */\n      jump\t// in\n    tag_185:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3777:3781  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3770:3781  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3610:3788  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1680:2352  function permit(... */\n    tag_101:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1901:1909  deadline */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1883:1898  block.timestamp */\n      timestamp\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1883:1909  block.timestamp > deadline */\n      gt\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1879:1976  if (block.timestamp > deadline) {... */\n      iszero\n      tag_187\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1956:1964  deadline */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1932:1965  ERC2612ExpiredSignature(deadline) */\n      mload(0x40)\n      0x6279130200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_188\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n    tag_188:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1879:1976  if (block.timestamp > deadline) {... */\n    tag_187:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1986:2004  bytes32 structHash */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1022:1117  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2045:2050  owner */\n      dup9\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2052:2059  spender */\n      dup9\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2061:2066  value */\n      dup9\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2068:2084  _useNonce(owner) */\n      tag_189\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2078:2083  owner */\n      dup13\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2068:2077  _useNonce */\n      tag_190\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2068:2084  _useNonce(owner) */\n      jump\t// in\n    tag_189:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2086:2094  deadline */\n      dup10\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2017:2095  abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline) */\n      add(0x20, mload(0x40))\n      tag_191\n      swap7\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_192\n      jump\t// in\n    tag_191:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2007:2096  keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1986:2096  bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2107:2119  bytes32 hash */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2122:2150  _hashTypedDataV4(structHash) */\n      tag_193\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2139:2149  structHash */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2122:2138  _hashTypedDataV4 */\n      tag_194\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2122:2150  _hashTypedDataV4(structHash) */\n      jump\t// in\n    tag_193:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2107:2150  bytes32 hash = _hashTypedDataV4(structHash) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2161:2175  address signer */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2178:2206  ECDSA.recover(hash, v, r, s) */\n      tag_195\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2192:2196  hash */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2198:2199  v */\n      dup8\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2201:2202  r */\n      dup8\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2204:2205  s */\n      dup8\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2178:2191  ECDSA.recover */\n      tag_196\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2178:2206  ECDSA.recover(hash, v, r, s) */\n      jump\t// in\n    tag_195:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2161:2206  address signer = ECDSA.recover(hash, v, r, s) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2230:2235  owner */\n      dup10\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2220:2235  signer != owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2220:2226  signer */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2220:2235  signer != owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2216:2304  if (signer != owner) {... */\n      tag_197\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2279:2285  signer */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2287:2292  owner */\n      dup11\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2258:2293  ERC2612InvalidSigner(signer, owner) */\n      mload(0x40)\n      0x4b800e4600000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_198\n      swap3\n      swap2\n      swap1\n      tag_199\n      jump\t// in\n    tag_198:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2216:2304  if (signer != owner) {... */\n    tag_197:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2314:2345  _approve(owner, spender, value) */\n      tag_200\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2323:2328  owner */\n      dup11\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2330:2337  spender */\n      dup11\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2339:2344  value */\n      dup11\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2314:2322  _approve */\n      tag_121\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":2314:2345  _approve(owner, spender, value) */\n      jump\t// in\n    tag_200:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1869:2352  {... */\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":1680:2352  function permit(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3846:3986  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_105:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3926:3933  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3963  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3964:3969  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3979  _allowances[owner][spender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3971:3978  spender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3952:3979  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3945:3979  return _allowances[owner][spender] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3846:3986  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_109:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_203\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_135\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_203:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2647:2648  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2627:2649  newOwner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2627:2635  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2627:2649  newOwner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n      tag_205\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2700:2701  0 */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      mload(0x40)\n      0x1e4fbdf700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_206\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_206:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n    tag_205:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2751  _transferOwnership(newOwner) */\n      tag_207\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2742:2750  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2741  _transferOwnership */\n      tag_154\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2723:2751  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_207:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Context.sol\":656:752  function _msgSender() internal view virtual returns (address) {... */\n    tag_119:\n        /* \"@openzeppelin/contracts/utils/Context.sol\":709:716  address */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/utils/Context.sol\":728:745  return msg.sender */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Context.sol\":656:752  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8989:9117  function _approve(address owner, address spender, uint256 value) internal {... */\n    tag_121:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9073:9110  _approve(owner, spender, value, true) */\n      tag_210\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9082:9087  owner */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9089:9096  spender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9098:9103  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9105:9109  true */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9073:9081  _approve */\n      tag_211\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9073:9110  _approve(owner, spender, value, true) */\n      jump\t// in\n    tag_210:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8989:9117  function _approve(address owner, address spender, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10663:11140  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n    tag_126:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10762:10786  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10789:10814  allowance(owner, spender) */\n      tag_213\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10799:10804  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10806:10813  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10789:10798  allowance */\n      tag_105\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10789:10814  allowance(owner, spender) */\n      jump\t// in\n    tag_213:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10762:10814  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10848:10865  type(uint256).max */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10828:10844  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10828:10865  currentAllowance != type(uint256).max */\n      eq\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10824:11134  if (currentAllowance != type(uint256).max) {... */\n      tag_214\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10904:10909  value */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10885:10901  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10885:10909  currentAllowance < value */\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10881:11011  if (currentAllowance < value) {... */\n      iszero\n      tag_215\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10963:10970  spender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10972:10988  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10990:10995  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10936:10996  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      mload(0x40)\n      0xfb8f41b200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_216\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_217\n      jump\t// in\n    tag_216:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10881:11011  if (currentAllowance < value) {... */\n    tag_215:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11052:11109  _approve(owner, spender, currentAllowance - value, false) */\n      tag_218\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11061:11066  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11068:11075  spender */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11096:11101  value */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11077:11093  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11077:11101  currentAllowance - value */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11103:11108  false */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11052:11060  _approve */\n      tag_211\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":11052:11109  _approve(owner, spender, currentAllowance - value, false) */\n      jump\t// in\n    tag_218:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10824:11134  if (currentAllowance != type(uint256).max) {... */\n    tag_214:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10752:11140  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10663:11140  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5656:5956  function _transfer(address from, address to, uint256 value) internal {... */\n    tag_128:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5755:5756  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5739:5757  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5739:5743  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5739:5757  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5735:5821  if (from == address(0)) {... */\n      tag_220\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5807:5808  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5780:5810  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      0x96c6fd1e00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_221\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_221:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5735:5821  if (from == address(0)) {... */\n    tag_220:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5848:5849  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5834:5850  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5834:5836  to */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5834:5850  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5830:5916  if (to == address(0)) {... */\n      tag_222\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5902:5903  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5873:5905  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      0xec442f0500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_223\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_223:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5830:5916  if (to == address(0)) {... */\n    tag_222:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5925:5949  _update(from, to, value) */\n      tag_224\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5933:5937  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5939:5941  to */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5943:5948  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5925:5932  _update */\n      tag_225\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5925:5949  _update(from, to, value) */\n      jump\t// in\n    tag_224:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5656:5956  function _transfer(address from, address to, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3845:4107  function _domainSeparatorV4() internal view returns (bytes32) {... */\n    tag_132:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3898:3905  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3938:3949  _cachedThis */\n      immutable(\"0xcb7b5834b7e5299c6704f53d971bda2c8ab8a394d0e13e911296a3f1ed3f075e\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3921:3949  address(this) == _cachedThis */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3929:3933  this */\n      address\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3921:3949  address(this) == _cachedThis */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3921:3984  address(this) == _cachedThis && block.chainid == _cachedChainId */\n      dup1\n      iszero\n      tag_227\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3970:3984  _cachedChainId */\n      immutable(\"0x65281ed8ccefade9b86c81750599de18d311b92b65fa2f9574f29bea17eeada2\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3953:3966  block.chainid */\n      chainid\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3953:3984  block.chainid == _cachedChainId */\n      eq\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3921:3984  address(this) == _cachedThis && block.chainid == _cachedChainId */\n    tag_227:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3917:4101  if (address(this) == _cachedThis && block.chainid == _cachedChainId) {... */\n      iszero\n      tag_228\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4007:4029  _cachedDomainSeparator */\n      immutable(\"0x637044082104a0df38c56ebf385c4c88ba9376eb8d65439329a06208e4517c88\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4000:4029  return _cachedDomainSeparator */\n      swap1\n      pop\n      jump(tag_226)\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3917:4101  if (address(this) == _cachedThis && block.chainid == _cachedChainId) {... */\n    tag_228:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4067:4090  _buildDomainSeparator() */\n      tag_230\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4067:4088  _buildDomainSeparator */\n      tag_231\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4067:4090  _buildDomainSeparator() */\n      jump\t// in\n    tag_230:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4060:4090  return _buildDomainSeparator() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":3845:4107  function _domainSeparatorV4() internal view returns (bytes32) {... */\n    tag_226:\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1796:1958  function _checkOwner() internal view virtual {... */\n    tag_135:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1866:1878  _msgSender() */\n      tag_233\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1866:1876  _msgSender */\n      tag_119\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1866:1878  _msgSender() */\n      jump\t// in\n    tag_233:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1855:1878  owner() != _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1855:1862  owner() */\n      tag_234\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1855:1860  owner */\n      tag_88\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1855:1862  owner() */\n      jump\t// in\n    tag_234:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1855:1878  owner() != _msgSender() */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1851:1952  if (owner() != _msgSender()) {... */\n      tag_235\n      jumpi\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1928:1940  _msgSender() */\n      tag_236\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1928:1938  _msgSender */\n      tag_119\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1928:1940  _msgSender() */\n      jump\t// in\n    tag_236:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      mload(0x40)\n      0x118cdaa700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_237\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_237:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1851:1952  if (owner() != _msgSender()) {... */\n    tag_235:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":1796:1958  function _checkOwner() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2710:2827  function _unpause() internal virtual whenPaused {... */\n    tag_138:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1721:1737  _requirePaused() */\n      tag_239\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1721:1735  _requirePaused */\n      tag_240\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1721:1737  _requirePaused() */\n      jump\t// in\n    tag_239:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2778:2783  false */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2768:2775  _paused */\n      0x05\n      0x00\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2768:2783  _paused = false */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2798:2820  Unpaused(_msgSender()) */\n      0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2807:2819  _msgSender() */\n      tag_242\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2807:2817  _msgSender */\n      tag_119\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2807:2819  _msgSender() */\n      jump\t// in\n    tag_242:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2798:2820  Unpaused(_msgSender()) */\n      mload(0x40)\n      tag_243\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_243:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2710:2827  function _unpause() internal virtual whenPaused {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7721:7929  function _mint(address account, uint256 value) internal {... */\n    tag_143:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7810:7811  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7791:7812  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7791:7798  account */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7791:7812  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7787:7878  if (account == address(0)) {... */\n      tag_245\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7864:7865  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7835:7867  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      0xec442f0500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_246\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_246:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7787:7878  if (account == address(0)) {... */\n    tag_245:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7887:7922  _update(address(0), account, value) */\n      tag_247\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7903:7904  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7907:7914  account */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7916:7921  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7887:7894  _update */\n      tag_225\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7887:7922  _update(address(0), account, value) */\n      jump\t// in\n    tag_247:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7721:7929  function _mint(address account, uint256 value) internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8247:8453  function _burn(address account, uint256 value) internal {... */\n    tag_147:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8336:8337  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8317:8338  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8317:8324  account */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8317:8338  account == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8313:8402  if (account == address(0)) {... */\n      tag_249\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8388:8389  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8361:8391  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      0x96c6fd1e00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_250\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_250:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8313:8402  if (account == address(0)) {... */\n    tag_249:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8411:8446  _update(account, address(0), value) */\n      tag_251\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8419:8426  account */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8436:8437  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8440:8445  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8411:8418  _update */\n      tag_225\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8411:8446  _update(account, address(0), value) */\n      jump\t// in\n    tag_251:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8247:8453  function _burn(address account, uint256 value) internal {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_154:\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3001  address oldOwner */\n      0x00\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3004:3010  _owner */\n      0x05\n      0x01\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2985:3010  address oldOwner = _owner */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3029:3037  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3026  _owner */\n      0x05\n      0x01\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3020:3037  _owner = newOwner */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xffffffffffffffffffffffffffffffffffffffff\n      mul\n      not\n      and\n      swap1\n      dup4\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3083:3091  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3073:3081  oldOwner */\n      dup2\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2975:3099  {... */\n      pop\n        /* \"@openzeppelin/contracts/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":538:645  function nonces(address owner) public view virtual returns (uint256) {... */\n    tag_161:\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":598:605  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":624:631  _nonces */\n      0x08\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":624:638  _nonces[owner] */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":632:637  owner */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":624:638  _nonces[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":617:638  return _nonces[owner] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":538:645  function nonces(address owner) public view virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2463:2578  function _pause() internal virtual whenNotPaused {... */\n    tag_166:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1474:1493  _requireNotPaused() */\n      tag_255\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1474:1491  _requireNotPaused */\n      tag_256\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1474:1493  _requireNotPaused() */\n      jump\t// in\n    tag_255:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2532:2536  true */\n      0x01\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2522:2529  _paused */\n      0x05\n      0x00\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2522:2536  _paused = true */\n      0x0100\n      exp\n      dup2\n      sload\n      dup2\n      0xff\n      mul\n      not\n      and\n      swap1\n      dup4\n      iszero\n      iszero\n      mul\n      or\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2551:2571  Paused(_msgSender()) */\n      0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2558:2570  _msgSender() */\n      tag_258\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2558:2568  _msgSender */\n      tag_119\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2558:2570  _msgSender() */\n      jump\t// in\n    tag_258:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2551:2571  Paused(_msgSender()) */\n      mload(0x40)\n      tag_259\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_259:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2463:2578  function _pause() internal virtual whenNotPaused {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6021:6147  function _EIP712Name() internal view returns (string memory) {... */\n    tag_169:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6067:6080  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6099:6140  _name.toStringWithFallback(_nameFallback) */\n      tag_261\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6126:6139  _nameFallback */\n      0x06\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6099:6104  _name */\n      immutable(\"0x7d81e85b4a2af4bd6246fd18e1213d6d70ceeba70466178b3c6e4c0f6381e850\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6099:6125  _name.toStringWithFallback */\n      tag_262\n      swap1\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6099:6140  _name.toStringWithFallback(_nameFallback) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_261:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6092:6140  return _name.toStringWithFallback(_nameFallback) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6021:6147  function _EIP712Name() internal view returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6473:6608  function _EIP712Version() internal view returns (string memory) {... */\n    tag_171:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6522:6535  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6554:6601  _version.toStringWithFallback(_versionFallback) */\n      tag_264\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6584:6600  _versionFallback */\n      0x07\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6554:6562  _version */\n      immutable(\"0xc81bfac384a0ec543c77e5176d9b9eb40c3af8fefa4e3c7657dda11321657778\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6554:6583  _version.toStringWithFallback */\n      tag_262\n      swap1\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6554:6601  _version.toStringWithFallback(_versionFallback) */\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_264:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6547:6601  return _version.toStringWithFallback(_versionFallback) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":6473:6608  function _EIP712Version() internal view returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":759:1154  function _useNonce(address owner) internal virtual returns (uint256) {... */\n    tag_190:\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":819:826  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":1121:1128  _nonces */\n      0x08\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":1121:1135  _nonces[owner] */\n      0x00\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":1129:1134  owner */\n      dup4\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":1121:1135  _nonces[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":1121:1137  _nonces[owner]++ */\n      dup2\n      sload\n      dup1\n      swap3\n      swap2\n      swap1\n      0x01\n      add\n      swap2\n      swap1\n      pop\n      sstore\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":1114:1137  return _nonces[owner]++ */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/Nonces.sol\":759:1154  function _useNonce(address owner) internal virtual returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4917:5093  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {... */\n    tag_194:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4994:5001  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5020:5086  MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash) */\n      tag_267\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5053:5073  _domainSeparatorV4() */\n      tag_268\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5053:5071  _domainSeparatorV4 */\n      tag_132\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5053:5073  _domainSeparatorV4() */\n      jump\t// in\n    tag_268:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5075:5085  structHash */\n      dup4\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5020:5052  MessageHashUtils.toTypedDataHash */\n      tag_269\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5020:5086  MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash) */\n      jump\t// in\n    tag_267:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":5013:5086  return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4917:5093  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6803:7063  function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {... */\n    tag_196:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6888:6895  address */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6908:6925  address recovered */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6927:6945  RecoverError error */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6947:6963  bytes32 errorArg */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6967:6992  tryRecover(hash, v, r, s) */\n      tag_271\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6978:6982  hash */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6984:6985  v */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6987:6988  r */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6990:6991  s */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6967:6977  tryRecover */\n      tag_272\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6967:6992  tryRecover(hash, v, r, s) */\n      jump\t// in\n    tag_271:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6907:6992  (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s) */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7002:7030  _throwError(error, errorArg) */\n      tag_273\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7014:7019  error */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7021:7029  errorArg */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7002:7013  _throwError */\n      tag_274\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7002:7030  _throwError(error, errorArg) */\n      jump\t// in\n    tag_273:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7047:7056  recovered */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7040:7056  return recovered */\n      swap4\n      pop\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6803:7063  function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {... */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9949:10381  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n    tag_211:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10078:10079  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10061:10080  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10061:10066  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10061:10080  owner == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10057:10146  if (owner == address(0)) {... */\n      tag_276\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10132:10133  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10103:10135  ERC20InvalidApprover(address(0)) */\n      mload(0x40)\n      0xe602df0500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_277\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_277:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10057:10146  if (owner == address(0)) {... */\n    tag_276:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10178:10179  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10159:10180  spender == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10159:10166  spender */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10159:10180  spender == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10155:10245  if (spender == address(0)) {... */\n      tag_278\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10231:10232  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10203:10234  ERC20InvalidSpender(address(0)) */\n      mload(0x40)\n      0x94280d6200000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_279\n      swap2\n      swap1\n      tag_90\n      jump\t// in\n    tag_279:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10155:10245  if (spender == address(0)) {... */\n    tag_278:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10284:10289  value */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10265  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10272  _allowances[owner] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10266:10271  owner */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10272  _allowances[owner] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10281  _allowances[owner][spender] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10273:10280  spender */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10281  _allowances[owner][spender] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10254:10289  _allowances[owner][spender] = value */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10303:10312  emitEvent */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10299:10375  if (emitEvent) {... */\n      iszero\n      tag_280\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10349:10356  spender */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10342:10347  owner */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10358:10363  value */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      mload(0x40)\n      tag_281\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n    tag_281:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10299:10375  if (emitEvent) {... */\n    tag_280:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9949:10381  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/ERC_Token.sol\":1097:1267  function _update(address from, address to, uint256 value)... */\n    tag_225:\n        /* \"contracts/ERC_Token.sol\":1229:1259  super._update(from, to, value) */\n      tag_283\n        /* \"contracts/ERC_Token.sol\":1243:1247  from */\n      dup4\n        /* \"contracts/ERC_Token.sol\":1249:1251  to */\n      dup4\n        /* \"contracts/ERC_Token.sol\":1253:1258  value */\n      dup4\n        /* \"contracts/ERC_Token.sol\":1229:1242  super._update */\n      tag_284\n        /* \"contracts/ERC_Token.sol\":1229:1259  super._update(from, to, value) */\n      jump\t// in\n    tag_283:\n        /* \"contracts/ERC_Token.sol\":1097:1267  function _update(address from, address to, uint256 value)... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4113:4292  function _buildDomainSeparator() private view returns (bytes32) {... */\n    tag_231:\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4168:4175  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4226:4237  _hashedName */\n      immutable(\"0x65c288f20bdeec3b8068bce0cb7c6a17051020d09717e451b984f80af474ef00\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4239:4253  _hashedVersion */\n      immutable(\"0xbce8897c1d3546db005567607154841ec10937e6a225e4ea07cfbf9a6b139dea\")\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4255:4268  block.chainid */\n      chainid\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4278:4282  this */\n      address\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n      add(0x20, mload(0x40))\n      tag_286\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_287\n      jump\t// in\n    tag_286:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4194:4285  keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4187:4285  return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":4113:4292  function _buildDomainSeparator() private view returns (bytes32) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2202:2328  function _requirePaused() internal view virtual {... */\n    tag_240:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2265:2273  paused() */\n      tag_289\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2265:2271  paused */\n      tag_65\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2265:2273  paused() */\n      jump\t// in\n    tag_289:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2260:2322  if (!paused()) {... */\n      tag_290\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2296:2311  ExpectedPause() */\n      mload(0x40)\n      0x8dfc202b00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2260:2322  if (!paused()) {... */\n    tag_290:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2202:2328  function _requirePaused() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2002:2130  function _requireNotPaused() internal view virtual {... */\n    tag_256:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2067:2075  paused() */\n      tag_292\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2067:2073  paused */\n      tag_65\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2067:2075  paused() */\n      jump\t// in\n    tag_292:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2063:2124  if (paused()) {... */\n      iszero\n      tag_293\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2098:2113  EnforcedPause() */\n      mload(0x40)\n      0xd93c066500000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2063:2124  if (paused()) {... */\n    tag_293:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":2002:2130  function _requireNotPaused() internal view virtual {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3385:3652  function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {... */\n    tag_262:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3479:3492  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      0xff\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3537:3554  FALLBACK_SENTINEL */\n      0x00\n      shl\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3527:3532  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3508:3554  ShortString.unwrap(value) != FALLBACK_SENTINEL */\n      eq\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3504:3646  if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {... */\n      tag_295\n      jumpi\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3577:3592  toString(value) */\n      tag_296\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3586:3591  value */\n      dup4\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3577:3585  toString */\n      tag_297\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3577:3592  toString(value) */\n      jump\t// in\n    tag_296:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3570:3592  return toString(value) */\n      swap1\n      pop\n      jump(tag_294)\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3504:3646  if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {... */\n    tag_295:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3630:3635  store */\n      dup2\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3623:3635  return store */\n      dup1\n      sload\n      tag_299\n      swap1\n      tag_112\n      jump\t// in\n    tag_299:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_300\n      swap1\n      tag_112\n      jump\t// in\n    tag_300:\n      dup1\n      iszero\n      tag_301\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_302\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_301)\n    tag_302:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_303:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_303\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_301:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":3385:3652  function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {... */\n    tag_294:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3353:3754  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {... */\n    tag_269:\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3446:3460  bytes32 digest */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3555:3559  0x40 */\n      0x40\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3549:3560  mload(0x40) */\n      mload\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3585:3595  hex\"19_01\" */\n      0x1901000000000000000000000000000000000000000000000000000000000000\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3580:3583  ptr */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3573:3596  mstore(ptr, hex\"19_01\") */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3632:3647  domainSeparator */\n      dup4\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3625:3629  0x02 */\n      0x02\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3620:3623  ptr */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3616:3630  add(ptr, 0x02) */\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3609:3648  mstore(add(ptr, 0x02), domainSeparator) */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3684:3694  structHash */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3677:3681  0x22 */\n      0x22\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3672:3675  ptr */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3668:3682  add(ptr, 0x22) */\n      add\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3661:3695  mstore(add(ptr, 0x22), structHash) */\n      mstore\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3733:3737  0x42 */\n      0x42\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3728:3731  ptr */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3718:3738  keccak256(ptr, 0x42) */\n      keccak256\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3708:3738  digest := keccak256(ptr, 0x42) */\n      swap2\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3524:3748  {... */\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":3353:3754  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5140:6670  function tryRecover(... */\n    tag_272:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5266:5273  address */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5275:5287  RecoverError */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5289:5296  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6199:6265  0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6194:6195  s */\n      dup5\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6186:6196  uint256(s) */\n      0x00\n      shr\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6186:6265  uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      gt\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6182:6346  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n      iszero\n      tag_306\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6297:6298  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6301:6331  RecoverError.InvalidSignatureS */\n      0x03\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6333:6334  s */\n      dup6\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6281:6335  return (address(0), RecoverError.InvalidSignatureS, s) */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      pop\n      jump(tag_305)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6182:6346  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n    tag_306:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6440:6454  address signer */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6457:6481  ecrecover(hash, v, r, s) */\n      0x01\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6467:6471  hash */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6473:6474  v */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6476:6477  r */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6479:6480  s */\n      dup9\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6457:6481  ecrecover(hash, v, r, s) */\n      mload(0x40)\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      0x40\n      mstore\n      mload(0x40)\n      tag_307\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_308\n      jump\t// in\n    tag_307:\n      0x20\n      mload(0x40)\n      0x20\n      dup2\n      sub\n      swap1\n      dup1\n      dup5\n      sub\n      swap1\n      dup6\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_310\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_310:\n      pop\n      pop\n      pop\n      mload(sub(mload(0x40), 0x20))\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6440:6481  address signer = ecrecover(hash, v, r, s) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6513:6514  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6495:6515  signer == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6495:6501  signer */\n      dup2\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6495:6515  signer == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6491:6604  if (signer == address(0)) {... */\n      tag_311\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6547:6548  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6551:6580  RecoverError.InvalidSignature */\n      0x01\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6590:6591  0 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6582:6592  bytes32(0) */\n      dup1\n      shl\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6531:6593  return (address(0), RecoverError.InvalidSignature, bytes32(0)) */\n      swap4\n      pop\n      swap4\n      pop\n      swap4\n      pop\n      pop\n      jump(tag_305)\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6491:6604  if (signer == address(0)) {... */\n    tag_311:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6622:6628  signer */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6630:6650  RecoverError.NoError */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6660:6661  0 */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6652:6662  bytes32(0) */\n      0x00\n      shl\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":6614:6663  return (signer, RecoverError.NoError, bytes32(0)) */\n      swap4\n      pop\n      swap4\n      pop\n      swap4\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":5140:6670  function tryRecover(... */\n    tag_305:\n      swap5\n      pop\n      swap5\n      pop\n      swap5\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7196:7728  function _throwError(RecoverError error, bytes32 errorArg) private pure {... */\n    tag_274:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7291:7311  RecoverError.NoError */\n      0x00\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7282:7311  error == RecoverError.NoError */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_313\n      jumpi\n      tag_314\n      tag_315\n      jump\t// in\n    tag_314:\n    tag_313:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7282:7287  error */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7282:7311  error == RecoverError.NoError */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_316\n      jumpi\n      tag_317\n      tag_315\n      jump\t// in\n    tag_317:\n    tag_316:\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7278:7722  if (error == RecoverError.NoError) {... */\n      iszero\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7327:7334  return; */\n      tag_312\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7278:7722  if (error == RecoverError.NoError) {... */\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7387:7416  RecoverError.InvalidSignature */\n      0x01\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7378:7416  error == RecoverError.InvalidSignature */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_320\n      jumpi\n      tag_321\n      tag_315\n      jump\t// in\n    tag_321:\n    tag_320:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7378:7383  error */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7378:7416  error == RecoverError.InvalidSignature */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_322\n      jumpi\n      tag_323\n      tag_315\n      jump\t// in\n    tag_323:\n    tag_322:\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7374:7722  if (error == RecoverError.InvalidSignature) {... */\n      tag_324\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7439:7462  ECDSAInvalidSignature() */\n      mload(0x40)\n      0xf645eedf00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7374:7722  if (error == RecoverError.InvalidSignature) {... */\n    tag_324:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7492:7527  RecoverError.InvalidSignatureLength */\n      0x02\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7483:7527  error == RecoverError.InvalidSignatureLength */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_326\n      jumpi\n      tag_327\n      tag_315\n      jump\t// in\n    tag_327:\n    tag_326:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7483:7488  error */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7483:7527  error == RecoverError.InvalidSignatureLength */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_328\n      jumpi\n      tag_329\n      tag_315\n      jump\t// in\n    tag_329:\n    tag_328:\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7479:7722  if (error == RecoverError.InvalidSignatureLength) {... */\n      tag_330\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7586:7594  errorArg */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7578:7595  uint256(errorArg) */\n      0x00\n      shr\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7550:7596  ECDSAInvalidSignatureLength(uint256(errorArg)) */\n      mload(0x40)\n      0xfce698f700000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_331\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n    tag_331:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7479:7722  if (error == RecoverError.InvalidSignatureLength) {... */\n    tag_330:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7626:7656  RecoverError.InvalidSignatureS */\n      0x03\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7617:7656  error == RecoverError.InvalidSignatureS */\n      dup1\n      dup2\n      gt\n      iszero\n      tag_333\n      jumpi\n      tag_334\n      tag_315\n      jump\t// in\n    tag_334:\n    tag_333:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7617:7622  error */\n      dup3\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7617:7656  error == RecoverError.InvalidSignatureS */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_335\n      jumpi\n      tag_336\n      tag_315\n      jump\t// in\n    tag_336:\n    tag_335:\n      sub\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7613:7722  if (error == RecoverError.InvalidSignatureS) {... */\n      tag_337\n      jumpi\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7702:7710  errorArg */\n      dup1\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7679:7711  ECDSAInvalidSignatureS(errorArg) */\n      mload(0x40)\n      0xd78bce0c00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_338\n      swap2\n      swap1\n      tag_54\n      jump\t// in\n    tag_338:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7613:7722  if (error == RecoverError.InvalidSignatureS) {... */\n    tag_337:\n        /* \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":7196:7728  function _throwError(RecoverError error, bytes32 errorArg) private pure {... */\n    tag_312:\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":1112:1257  function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {... */\n    tag_284:\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1474:1493  _requireNotPaused() */\n      tag_340\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1474:1491  _requireNotPaused */\n      tag_256\n        /* \"@openzeppelin/contracts/utils/Pausable.sol\":1474:1493  _requireNotPaused() */\n      jump\t// in\n    tag_340:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":1220:1250  super._update(from, to, value) */\n      tag_342\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":1234:1238  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":1240:1242  to */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":1244:1249  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":1220:1233  super._update */\n      tag_343\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":1220:1250  super._update(from, to, value) */\n      jump\t// in\n    tag_342:\n        /* \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":1112:1257  function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2078:2483  function toString(ShortString sstr) internal pure returns (string memory) {... */\n    tag_297:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2137:2150  string memory */\n      0x60\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2162:2173  uint256 len */\n      0x00\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2176:2192  byteLength(sstr) */\n      tag_345\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2187:2191  sstr */\n      dup4\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2176:2186  byteLength */\n      tag_346\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2176:2192  byteLength(sstr) */\n      jump\t// in\n    tag_345:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2162:2192  uint256 len = byteLength(sstr) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2280:2297  string memory str */\n      0x00\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2311:2313  32 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2300:2314  new string(32) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_347\n      jumpi\n      tag_348\n      tag_174\n      jump\t// in\n    tag_348:\n    tag_347:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_349\n      jumpi\n      dup2\n      0x20\n      add\n      0x01\n      dup3\n      mul\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      dup1\n      dup3\n      add\n      swap2\n      pop\n      pop\n      swap1\n      pop\n    tag_349:\n      pop\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2280:2314  string memory str = new string(32) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2402:2405  len */\n      dup2\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2397:2400  str */\n      dup2\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2390:2406  mstore(str, len) */\n      mstore\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2442:2446  sstr */\n      dup4\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2435:2439  0x20 */\n      0x20\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2430:2433  str */\n      dup3\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2426:2440  add(str, 0x20) */\n      add\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2419:2447  mstore(add(str, 0x20), sstr) */\n      mstore\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2473:2476  str */\n      dup1\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2466:2476  return str */\n      swap3\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2078:2483  function toString(ShortString sstr) internal pure returns (string memory) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6271:7378  function _update(address from, address to, uint256 value) internal virtual {... */\n    tag_343:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6376:6377  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6360:6378  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6360:6364  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6360:6378  from == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      tag_351\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6512:6517  value */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6496:6508  _totalSupply */\n      0x02\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6496:6517  _totalSupply += value */\n      dup3\n      dup3\n      sload\n      tag_352\n      swap2\n      swap1\n      tag_353\n      jump\t// in\n    tag_352:\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      jump(tag_354)\n    tag_351:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6548:6567  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6570:6579  _balances */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6570:6585  _balances[from] */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6580:6584  from */\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6570:6585  _balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6548:6585  uint256 fromBalance = _balances[from] */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6617:6622  value */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6603:6614  fromBalance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6603:6622  fromBalance < value */\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6599:6714  if (fromBalance < value) {... */\n      iszero\n      tag_355\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6674:6678  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6680:6691  fromBalance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6693:6698  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n      mload(0x40)\n      0xe450d38c00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      tag_356\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_217\n      jump\t// in\n    tag_356:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6599:6714  if (fromBalance < value) {... */\n    tag_355:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6866:6871  value */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6852:6863  fromBalance */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6852:6871  fromBalance - value */\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6843  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6849  _balances[from] */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6844:6848  from */\n      dup7\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6849  _balances[from] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6834:6871  _balances[from] = fromBalance - value */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6534:6896  {... */\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n    tag_354:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6924:6925  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6910:6926  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6910:6912  to */\n      dup3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6910:6926  to == address(0) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n      tag_357\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7089:7094  value */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7073:7085  _totalSupply */\n      0x02\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7073:7094  _totalSupply -= value */\n      dup3\n      dup3\n      sload\n      sub\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n      jump(tag_358)\n    tag_357:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7301:7306  value */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7293  _balances */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7297  _balances[to] */\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7294:7296  to */\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7297  _balances[to] */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      keccak256\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7284:7306  _balances[to] += value */\n      dup3\n      dup3\n      sload\n      add\n      swap3\n      pop\n      pop\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n    tag_358:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7361:7363  to */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7355:7359  from */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7365:7370  value */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      mload(0x40)\n      tag_359\n      swap2\n      swap1\n      tag_41\n      jump\t// in\n    tag_359:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6271:7378  function _update(address from, address to, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2555:2800  function byteLength(ShortString sstr) internal pure returns (uint256) {... */\n    tag_346:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2616:2623  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2635:2649  uint256 result */\n      dup1\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2688:2692  0xFF */\n      0xff\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2679:2683  sstr */\n      dup4\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2652:2685  uint256(ShortString.unwrap(sstr)) */\n      0x00\n      shr\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2652:2692  uint256(ShortString.unwrap(sstr)) & 0xFF */\n      and\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2635:2692  uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2715:2717  31 */\n      0x1f\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2706:2712  result */\n      dup2\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2706:2717  result > 31 */\n      gt\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2702:2771  if (result > 31) {... */\n      iszero\n      tag_361\n      jumpi\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2740:2760  InvalidShortString() */\n      mload(0x40)\n      0xb3512b0c00000000000000000000000000000000000000000000000000000000\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2702:2771  if (result > 31) {... */\n    tag_361:\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2787:2793  result */\n      dup1\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2780:2793  return result */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts/utils/ShortStrings.sol\":2555:2800  function byteLength(ShortString sstr) internal pure returns (uint256) {... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7:106   */\n    tag_362:\n        /* \"#utility.yul\":59:65   */\n      0x00\n        /* \"#utility.yul\":93:98   */\n      dup2\n        /* \"#utility.yul\":87:99   */\n      mload\n        /* \"#utility.yul\":77:99   */\n      swap1\n      pop\n        /* \"#utility.yul\":7:106   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":112:281   */\n    tag_363:\n        /* \"#utility.yul\":196:207   */\n      0x00\n        /* \"#utility.yul\":230:236   */\n      dup3\n        /* \"#utility.yul\":225:228   */\n      dup3\n        /* \"#utility.yul\":218:237   */\n      mstore\n        /* \"#utility.yul\":270:274   */\n      0x20\n        /* \"#utility.yul\":265:268   */\n      dup3\n        /* \"#utility.yul\":261:275   */\n      add\n        /* \"#utility.yul\":246:275   */\n      swap1\n      pop\n        /* \"#utility.yul\":112:281   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":287:426   */\n    tag_364:\n        /* \"#utility.yul\":376:382   */\n      dup3\n        /* \"#utility.yul\":371:374   */\n      dup2\n        /* \"#utility.yul\":366:369   */\n      dup4\n        /* \"#utility.yul\":360:383   */\n      mcopy\n        /* \"#utility.yul\":417:418   */\n      0x00\n        /* \"#utility.yul\":408:414   */\n      dup4\n        /* \"#utility.yul\":403:406   */\n      dup4\n        /* \"#utility.yul\":399:415   */\n      add\n        /* \"#utility.yul\":392:419   */\n      mstore\n        /* \"#utility.yul\":287:426   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":432:534   */\n    tag_365:\n        /* \"#utility.yul\":473:479   */\n      0x00\n        /* \"#utility.yul\":524:526   */\n      0x1f\n        /* \"#utility.yul\":520:527   */\n      not\n        /* \"#utility.yul\":515:517   */\n      0x1f\n        /* \"#utility.yul\":508:513   */\n      dup4\n        /* \"#utility.yul\":504:518   */\n      add\n        /* \"#utility.yul\":500:528   */\n      and\n        /* \"#utility.yul\":490:528   */\n      swap1\n      pop\n        /* \"#utility.yul\":432:534   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":540:917   */\n    tag_366:\n        /* \"#utility.yul\":628:631   */\n      0x00\n        /* \"#utility.yul\":656:695   */\n      tag_406\n        /* \"#utility.yul\":689:694   */\n      dup3\n        /* \"#utility.yul\":656:695   */\n      tag_362\n      jump\t// in\n    tag_406:\n        /* \"#utility.yul\":711:782   */\n      tag_407\n        /* \"#utility.yul\":775:781   */\n      dup2\n        /* \"#utility.yul\":770:773   */\n      dup6\n        /* \"#utility.yul\":711:782   */\n      tag_363\n      jump\t// in\n    tag_407:\n        /* \"#utility.yul\":704:782   */\n      swap4\n      pop\n        /* \"#utility.yul\":791:856   */\n      tag_408\n        /* \"#utility.yul\":849:855   */\n      dup2\n        /* \"#utility.yul\":844:847   */\n      dup6\n        /* \"#utility.yul\":837:841   */\n      0x20\n        /* \"#utility.yul\":830:835   */\n      dup7\n        /* \"#utility.yul\":826:842   */\n      add\n        /* \"#utility.yul\":791:856   */\n      tag_364\n      jump\t// in\n    tag_408:\n        /* \"#utility.yul\":881:910   */\n      tag_409\n        /* \"#utility.yul\":903:909   */\n      dup2\n        /* \"#utility.yul\":881:910   */\n      tag_365\n      jump\t// in\n    tag_409:\n        /* \"#utility.yul\":876:879   */\n      dup5\n        /* \"#utility.yul\":872:911   */\n      add\n        /* \"#utility.yul\":865:911   */\n      swap2\n      pop\n        /* \"#utility.yul\":632:917   */\n      pop\n        /* \"#utility.yul\":540:917   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":923:1236   */\n    tag_31:\n        /* \"#utility.yul\":1036:1040   */\n      0x00\n        /* \"#utility.yul\":1074:1076   */\n      0x20\n        /* \"#utility.yul\":1063:1072   */\n      dup3\n        /* \"#utility.yul\":1059:1077   */\n      add\n        /* \"#utility.yul\":1051:1077   */\n      swap1\n      pop\n        /* \"#utility.yul\":1123:1132   */\n      dup2\n        /* \"#utility.yul\":1117:1121   */\n      dup2\n        /* \"#utility.yul\":1113:1133   */\n      sub\n        /* \"#utility.yul\":1109:1110   */\n      0x00\n        /* \"#utility.yul\":1098:1107   */\n      dup4\n        /* \"#utility.yul\":1094:1111   */\n      add\n        /* \"#utility.yul\":1087:1134   */\n      mstore\n        /* \"#utility.yul\":1151:1229   */\n      tag_411\n        /* \"#utility.yul\":1224:1228   */\n      dup2\n        /* \"#utility.yul\":1215:1221   */\n      dup5\n        /* \"#utility.yul\":1151:1229   */\n      tag_366\n      jump\t// in\n    tag_411:\n        /* \"#utility.yul\":1143:1229   */\n      swap1\n      pop\n        /* \"#utility.yul\":923:1236   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1323:1440   */\n    tag_368:\n        /* \"#utility.yul\":1432:1433   */\n      0x00\n        /* \"#utility.yul\":1429:1430   */\n      dup1\n        /* \"#utility.yul\":1422:1434   */\n      revert\n        /* \"#utility.yul\":1569:1695   */\n    tag_370:\n        /* \"#utility.yul\":1606:1613   */\n      0x00\n        /* \"#utility.yul\":1646:1688   */\n      0xffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":1639:1644   */\n      dup3\n        /* \"#utility.yul\":1635:1689   */\n      and\n        /* \"#utility.yul\":1624:1689   */\n      swap1\n      pop\n        /* \"#utility.yul\":1569:1695   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1701:1797   */\n    tag_371:\n        /* \"#utility.yul\":1738:1745   */\n      0x00\n        /* \"#utility.yul\":1767:1791   */\n      tag_417\n        /* \"#utility.yul\":1785:1790   */\n      dup3\n        /* \"#utility.yul\":1767:1791   */\n      tag_370\n      jump\t// in\n    tag_417:\n        /* \"#utility.yul\":1756:1791   */\n      swap1\n      pop\n        /* \"#utility.yul\":1701:1797   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1803:1925   */\n    tag_372:\n        /* \"#utility.yul\":1876:1900   */\n      tag_419\n        /* \"#utility.yul\":1894:1899   */\n      dup2\n        /* \"#utility.yul\":1876:1900   */\n      tag_371\n      jump\t// in\n    tag_419:\n        /* \"#utility.yul\":1869:1874   */\n      dup2\n        /* \"#utility.yul\":1866:1901   */\n      eq\n        /* \"#utility.yul\":1856:1919   */\n      tag_420\n      jumpi\n        /* \"#utility.yul\":1915:1916   */\n      0x00\n        /* \"#utility.yul\":1912:1913   */\n      dup1\n        /* \"#utility.yul\":1905:1917   */\n      revert\n        /* \"#utility.yul\":1856:1919   */\n    tag_420:\n        /* \"#utility.yul\":1803:1925   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1931:2070   */\n    tag_373:\n        /* \"#utility.yul\":1977:1982   */\n      0x00\n        /* \"#utility.yul\":2015:2021   */\n      dup2\n        /* \"#utility.yul\":2002:2022   */\n      calldataload\n        /* \"#utility.yul\":1993:2022   */\n      swap1\n      pop\n        /* \"#utility.yul\":2031:2064   */\n      tag_422\n        /* \"#utility.yul\":2058:2063   */\n      dup2\n        /* \"#utility.yul\":2031:2064   */\n      tag_372\n      jump\t// in\n    tag_422:\n        /* \"#utility.yul\":1931:2070   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2076:2153   */\n    tag_374:\n        /* \"#utility.yul\":2113:2120   */\n      0x00\n        /* \"#utility.yul\":2142:2147   */\n      dup2\n        /* \"#utility.yul\":2131:2147   */\n      swap1\n      pop\n        /* \"#utility.yul\":2076:2153   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2159:2281   */\n    tag_375:\n        /* \"#utility.yul\":2232:2256   */\n      tag_425\n        /* \"#utility.yul\":2250:2255   */\n      dup2\n        /* \"#utility.yul\":2232:2256   */\n      tag_374\n      jump\t// in\n    tag_425:\n        /* \"#utility.yul\":2225:2230   */\n      dup2\n        /* \"#utility.yul\":2222:2257   */\n      eq\n        /* \"#utility.yul\":2212:2275   */\n      tag_426\n      jumpi\n        /* \"#utility.yul\":2271:2272   */\n      0x00\n        /* \"#utility.yul\":2268:2269   */\n      dup1\n        /* \"#utility.yul\":2261:2273   */\n      revert\n        /* \"#utility.yul\":2212:2275   */\n    tag_426:\n        /* \"#utility.yul\":2159:2281   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2287:2426   */\n    tag_376:\n        /* \"#utility.yul\":2333:2338   */\n      0x00\n        /* \"#utility.yul\":2371:2377   */\n      dup2\n        /* \"#utility.yul\":2358:2378   */\n      calldataload\n        /* \"#utility.yul\":2349:2378   */\n      swap1\n      pop\n        /* \"#utility.yul\":2387:2420   */\n      tag_428\n        /* \"#utility.yul\":2414:2419   */\n      dup2\n        /* \"#utility.yul\":2387:2420   */\n      tag_375\n      jump\t// in\n    tag_428:\n        /* \"#utility.yul\":2287:2426   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2432:2906   */\n    tag_34:\n        /* \"#utility.yul\":2500:2506   */\n      0x00\n        /* \"#utility.yul\":2508:2514   */\n      dup1\n        /* \"#utility.yul\":2557:2559   */\n      0x40\n        /* \"#utility.yul\":2545:2554   */\n      dup4\n        /* \"#utility.yul\":2536:2543   */\n      dup6\n        /* \"#utility.yul\":2532:2555   */\n      sub\n        /* \"#utility.yul\":2528:2560   */\n      slt\n        /* \"#utility.yul\":2525:2644   */\n      iszero\n      tag_430\n      jumpi\n        /* \"#utility.yul\":2563:2642   */\n      tag_431\n      tag_368\n      jump\t// in\n    tag_431:\n        /* \"#utility.yul\":2525:2644   */\n    tag_430:\n        /* \"#utility.yul\":2683:2684   */\n      0x00\n        /* \"#utility.yul\":2708:2761   */\n      tag_432\n        /* \"#utility.yul\":2753:2760   */\n      dup6\n        /* \"#utility.yul\":2744:2750   */\n      dup3\n        /* \"#utility.yul\":2733:2742   */\n      dup7\n        /* \"#utility.yul\":2729:2751   */\n      add\n        /* \"#utility.yul\":2708:2761   */\n      tag_373\n      jump\t// in\n    tag_432:\n        /* \"#utility.yul\":2698:2761   */\n      swap3\n      pop\n        /* \"#utility.yul\":2654:2771   */\n      pop\n        /* \"#utility.yul\":2810:2812   */\n      0x20\n        /* \"#utility.yul\":2836:2889   */\n      tag_433\n        /* \"#utility.yul\":2881:2888   */\n      dup6\n        /* \"#utility.yul\":2872:2878   */\n      dup3\n        /* \"#utility.yul\":2861:2870   */\n      dup7\n        /* \"#utility.yul\":2857:2879   */\n      add\n        /* \"#utility.yul\":2836:2889   */\n      tag_376\n      jump\t// in\n    tag_433:\n        /* \"#utility.yul\":2826:2889   */\n      swap2\n      pop\n        /* \"#utility.yul\":2781:2899   */\n      pop\n        /* \"#utility.yul\":2432:2906   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2912:3002   */\n    tag_377:\n        /* \"#utility.yul\":2946:2953   */\n      0x00\n        /* \"#utility.yul\":2989:2994   */\n      dup2\n        /* \"#utility.yul\":2982:2995   */\n      iszero\n        /* \"#utility.yul\":2975:2996   */\n      iszero\n        /* \"#utility.yul\":2964:2996   */\n      swap1\n      pop\n        /* \"#utility.yul\":2912:3002   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3008:3117   */\n    tag_378:\n        /* \"#utility.yul\":3089:3110   */\n      tag_436\n        /* \"#utility.yul\":3104:3109   */\n      dup2\n        /* \"#utility.yul\":3089:3110   */\n      tag_377\n      jump\t// in\n    tag_436:\n        /* \"#utility.yul\":3084:3087   */\n      dup3\n        /* \"#utility.yul\":3077:3111   */\n      mstore\n        /* \"#utility.yul\":3008:3117   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3123:3333   */\n    tag_37:\n        /* \"#utility.yul\":3210:3214   */\n      0x00\n        /* \"#utility.yul\":3248:3250   */\n      0x20\n        /* \"#utility.yul\":3237:3246   */\n      dup3\n        /* \"#utility.yul\":3233:3251   */\n      add\n        /* \"#utility.yul\":3225:3251   */\n      swap1\n      pop\n        /* \"#utility.yul\":3261:3326   */\n      tag_438\n        /* \"#utility.yul\":3323:3324   */\n      0x00\n        /* \"#utility.yul\":3312:3321   */\n      dup4\n        /* \"#utility.yul\":3308:3325   */\n      add\n        /* \"#utility.yul\":3299:3305   */\n      dup5\n        /* \"#utility.yul\":3261:3326   */\n      tag_378\n      jump\t// in\n    tag_438:\n        /* \"#utility.yul\":3123:3333   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3339:3457   */\n    tag_379:\n        /* \"#utility.yul\":3426:3450   */\n      tag_440\n        /* \"#utility.yul\":3444:3449   */\n      dup2\n        /* \"#utility.yul\":3426:3450   */\n      tag_374\n      jump\t// in\n    tag_440:\n        /* \"#utility.yul\":3421:3424   */\n      dup3\n        /* \"#utility.yul\":3414:3451   */\n      mstore\n        /* \"#utility.yul\":3339:3457   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3463:3685   */\n    tag_41:\n        /* \"#utility.yul\":3556:3560   */\n      0x00\n        /* \"#utility.yul\":3594:3596   */\n      0x20\n        /* \"#utility.yul\":3583:3592   */\n      dup3\n        /* \"#utility.yul\":3579:3597   */\n      add\n        /* \"#utility.yul\":3571:3597   */\n      swap1\n      pop\n        /* \"#utility.yul\":3607:3678   */\n      tag_442\n        /* \"#utility.yul\":3675:3676   */\n      0x00\n        /* \"#utility.yul\":3664:3673   */\n      dup4\n        /* \"#utility.yul\":3660:3677   */\n      add\n        /* \"#utility.yul\":3651:3657   */\n      dup5\n        /* \"#utility.yul\":3607:3678   */\n      tag_379\n      jump\t// in\n    tag_442:\n        /* \"#utility.yul\":3463:3685   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3691:4310   */\n    tag_44:\n        /* \"#utility.yul\":3768:3774   */\n      0x00\n        /* \"#utility.yul\":3776:3782   */\n      dup1\n        /* \"#utility.yul\":3784:3790   */\n      0x00\n        /* \"#utility.yul\":3833:3835   */\n      0x60\n        /* \"#utility.yul\":3821:3830   */\n      dup5\n        /* \"#utility.yul\":3812:3819   */\n      dup7\n        /* \"#utility.yul\":3808:3831   */\n      sub\n        /* \"#utility.yul\":3804:3836   */\n      slt\n        /* \"#utility.yul\":3801:3920   */\n      iszero\n      tag_444\n      jumpi\n        /* \"#utility.yul\":3839:3918   */\n      tag_445\n      tag_368\n      jump\t// in\n    tag_445:\n        /* \"#utility.yul\":3801:3920   */\n    tag_444:\n        /* \"#utility.yul\":3959:3960   */\n      0x00\n        /* \"#utility.yul\":3984:4037   */\n      tag_446\n        /* \"#utility.yul\":4029:4036   */\n      dup7\n        /* \"#utility.yul\":4020:4026   */\n      dup3\n        /* \"#utility.yul\":4009:4018   */\n      dup8\n        /* \"#utility.yul\":4005:4027   */\n      add\n        /* \"#utility.yul\":3984:4037   */\n      tag_373\n      jump\t// in\n    tag_446:\n        /* \"#utility.yul\":3974:4037   */\n      swap4\n      pop\n        /* \"#utility.yul\":3930:4047   */\n      pop\n        /* \"#utility.yul\":4086:4088   */\n      0x20\n        /* \"#utility.yul\":4112:4165   */\n      tag_447\n        /* \"#utility.yul\":4157:4164   */\n      dup7\n        /* \"#utility.yul\":4148:4154   */\n      dup3\n        /* \"#utility.yul\":4137:4146   */\n      dup8\n        /* \"#utility.yul\":4133:4155   */\n      add\n        /* \"#utility.yul\":4112:4165   */\n      tag_373\n      jump\t// in\n    tag_447:\n        /* \"#utility.yul\":4102:4165   */\n      swap3\n      pop\n        /* \"#utility.yul\":4057:4175   */\n      pop\n        /* \"#utility.yul\":4214:4216   */\n      0x40\n        /* \"#utility.yul\":4240:4293   */\n      tag_448\n        /* \"#utility.yul\":4285:4292   */\n      dup7\n        /* \"#utility.yul\":4276:4282   */\n      dup3\n        /* \"#utility.yul\":4265:4274   */\n      dup8\n        /* \"#utility.yul\":4261:4283   */\n      add\n        /* \"#utility.yul\":4240:4293   */\n      tag_376\n      jump\t// in\n    tag_448:\n        /* \"#utility.yul\":4230:4293   */\n      swap2\n      pop\n        /* \"#utility.yul\":4185:4303   */\n      pop\n        /* \"#utility.yul\":3691:4310   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":4316:4402   */\n    tag_380:\n        /* \"#utility.yul\":4351:4358   */\n      0x00\n        /* \"#utility.yul\":4391:4395   */\n      0xff\n        /* \"#utility.yul\":4384:4389   */\n      dup3\n        /* \"#utility.yul\":4380:4396   */\n      and\n        /* \"#utility.yul\":4369:4396   */\n      swap1\n      pop\n        /* \"#utility.yul\":4316:4402   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4408:4520   */\n    tag_381:\n        /* \"#utility.yul\":4491:4513   */\n      tag_451\n        /* \"#utility.yul\":4507:4512   */\n      dup2\n        /* \"#utility.yul\":4491:4513   */\n      tag_380\n      jump\t// in\n    tag_451:\n        /* \"#utility.yul\":4486:4489   */\n      dup3\n        /* \"#utility.yul\":4479:4514   */\n      mstore\n        /* \"#utility.yul\":4408:4520   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4526:4740   */\n    tag_50:\n        /* \"#utility.yul\":4615:4619   */\n      0x00\n        /* \"#utility.yul\":4653:4655   */\n      0x20\n        /* \"#utility.yul\":4642:4651   */\n      dup3\n        /* \"#utility.yul\":4638:4656   */\n      add\n        /* \"#utility.yul\":4630:4656   */\n      swap1\n      pop\n        /* \"#utility.yul\":4666:4733   */\n      tag_453\n        /* \"#utility.yul\":4730:4731   */\n      0x00\n        /* \"#utility.yul\":4719:4728   */\n      dup4\n        /* \"#utility.yul\":4715:4732   */\n      add\n        /* \"#utility.yul\":4706:4712   */\n      dup5\n        /* \"#utility.yul\":4666:4733   */\n      tag_381\n      jump\t// in\n    tag_453:\n        /* \"#utility.yul\":4526:4740   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4746:4823   */\n    tag_382:\n        /* \"#utility.yul\":4783:4790   */\n      0x00\n        /* \"#utility.yul\":4812:4817   */\n      dup2\n        /* \"#utility.yul\":4801:4817   */\n      swap1\n      pop\n        /* \"#utility.yul\":4746:4823   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4829:4947   */\n    tag_383:\n        /* \"#utility.yul\":4916:4940   */\n      tag_456\n        /* \"#utility.yul\":4934:4939   */\n      dup2\n        /* \"#utility.yul\":4916:4940   */\n      tag_382\n      jump\t// in\n    tag_456:\n        /* \"#utility.yul\":4911:4914   */\n      dup3\n        /* \"#utility.yul\":4904:4941   */\n      mstore\n        /* \"#utility.yul\":4829:4947   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4953:5175   */\n    tag_54:\n        /* \"#utility.yul\":5046:5050   */\n      0x00\n        /* \"#utility.yul\":5084:5086   */\n      0x20\n        /* \"#utility.yul\":5073:5082   */\n      dup3\n        /* \"#utility.yul\":5069:5087   */\n      add\n        /* \"#utility.yul\":5061:5087   */\n      swap1\n      pop\n        /* \"#utility.yul\":5097:5168   */\n      tag_458\n        /* \"#utility.yul\":5165:5166   */\n      0x00\n        /* \"#utility.yul\":5154:5163   */\n      dup4\n        /* \"#utility.yul\":5150:5167   */\n      add\n        /* \"#utility.yul\":5141:5147   */\n      dup5\n        /* \"#utility.yul\":5097:5168   */\n      tag_383\n      jump\t// in\n    tag_458:\n        /* \"#utility.yul\":4953:5175   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5181:5510   */\n    tag_62:\n        /* \"#utility.yul\":5240:5246   */\n      0x00\n        /* \"#utility.yul\":5289:5291   */\n      0x20\n        /* \"#utility.yul\":5277:5286   */\n      dup3\n        /* \"#utility.yul\":5268:5275   */\n      dup5\n        /* \"#utility.yul\":5264:5287   */\n      sub\n        /* \"#utility.yul\":5260:5292   */\n      slt\n        /* \"#utility.yul\":5257:5376   */\n      iszero\n      tag_460\n      jumpi\n        /* \"#utility.yul\":5295:5374   */\n      tag_461\n      tag_368\n      jump\t// in\n    tag_461:\n        /* \"#utility.yul\":5257:5376   */\n    tag_460:\n        /* \"#utility.yul\":5415:5416   */\n      0x00\n        /* \"#utility.yul\":5440:5493   */\n      tag_462\n        /* \"#utility.yul\":5485:5492   */\n      dup5\n        /* \"#utility.yul\":5476:5482   */\n      dup3\n        /* \"#utility.yul\":5465:5474   */\n      dup6\n        /* \"#utility.yul\":5461:5483   */\n      add\n        /* \"#utility.yul\":5440:5493   */\n      tag_376\n      jump\t// in\n    tag_462:\n        /* \"#utility.yul\":5430:5493   */\n      swap2\n      pop\n        /* \"#utility.yul\":5386:5503   */\n      pop\n        /* \"#utility.yul\":5181:5510   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5516:5845   */\n    tag_69:\n        /* \"#utility.yul\":5575:5581   */\n      0x00\n        /* \"#utility.yul\":5624:5626   */\n      0x20\n        /* \"#utility.yul\":5612:5621   */\n      dup3\n        /* \"#utility.yul\":5603:5610   */\n      dup5\n        /* \"#utility.yul\":5599:5622   */\n      sub\n        /* \"#utility.yul\":5595:5627   */\n      slt\n        /* \"#utility.yul\":5592:5711   */\n      iszero\n      tag_464\n      jumpi\n        /* \"#utility.yul\":5630:5709   */\n      tag_465\n      tag_368\n      jump\t// in\n    tag_465:\n        /* \"#utility.yul\":5592:5711   */\n    tag_464:\n        /* \"#utility.yul\":5750:5751   */\n      0x00\n        /* \"#utility.yul\":5775:5828   */\n      tag_466\n        /* \"#utility.yul\":5820:5827   */\n      dup5\n        /* \"#utility.yul\":5811:5817   */\n      dup3\n        /* \"#utility.yul\":5800:5809   */\n      dup6\n        /* \"#utility.yul\":5796:5818   */\n      add\n        /* \"#utility.yul\":5775:5828   */\n      tag_373\n      jump\t// in\n    tag_466:\n        /* \"#utility.yul\":5765:5828   */\n      swap2\n      pop\n        /* \"#utility.yul\":5721:5838   */\n      pop\n        /* \"#utility.yul\":5516:5845   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5851:6000   */\n    tag_384:\n        /* \"#utility.yul\":5887:5894   */\n      0x00\n        /* \"#utility.yul\":5927:5993   */\n      0xff00000000000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":5920:5925   */\n      dup3\n        /* \"#utility.yul\":5916:5994   */\n      and\n        /* \"#utility.yul\":5905:5994   */\n      swap1\n      pop\n        /* \"#utility.yul\":5851:6000   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6006:6121   */\n    tag_385:\n        /* \"#utility.yul\":6091:6114   */\n      tag_469\n        /* \"#utility.yul\":6108:6113   */\n      dup2\n        /* \"#utility.yul\":6091:6114   */\n      tag_384\n      jump\t// in\n    tag_469:\n        /* \"#utility.yul\":6086:6089   */\n      dup3\n        /* \"#utility.yul\":6079:6115   */\n      mstore\n        /* \"#utility.yul\":6006:6121   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6127:6245   */\n    tag_386:\n        /* \"#utility.yul\":6214:6238   */\n      tag_471\n        /* \"#utility.yul\":6232:6237   */\n      dup2\n        /* \"#utility.yul\":6214:6238   */\n      tag_371\n      jump\t// in\n    tag_471:\n        /* \"#utility.yul\":6209:6212   */\n      dup3\n        /* \"#utility.yul\":6202:6239   */\n      mstore\n        /* \"#utility.yul\":6127:6245   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6251:6365   */\n    tag_387:\n        /* \"#utility.yul\":6318:6324   */\n      0x00\n        /* \"#utility.yul\":6352:6357   */\n      dup2\n        /* \"#utility.yul\":6346:6358   */\n      mload\n        /* \"#utility.yul\":6336:6358   */\n      swap1\n      pop\n        /* \"#utility.yul\":6251:6365   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6371:6555   */\n    tag_388:\n        /* \"#utility.yul\":6470:6481   */\n      0x00\n        /* \"#utility.yul\":6504:6510   */\n      dup3\n        /* \"#utility.yul\":6499:6502   */\n      dup3\n        /* \"#utility.yul\":6492:6511   */\n      mstore\n        /* \"#utility.yul\":6544:6548   */\n      0x20\n        /* \"#utility.yul\":6539:6542   */\n      dup3\n        /* \"#utility.yul\":6535:6549   */\n      add\n        /* \"#utility.yul\":6520:6549   */\n      swap1\n      pop\n        /* \"#utility.yul\":6371:6555   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6561:6693   */\n    tag_389:\n        /* \"#utility.yul\":6628:6632   */\n      0x00\n        /* \"#utility.yul\":6651:6654   */\n      dup2\n        /* \"#utility.yul\":6643:6654   */\n      swap1\n      pop\n        /* \"#utility.yul\":6681:6685   */\n      0x20\n        /* \"#utility.yul\":6676:6679   */\n      dup3\n        /* \"#utility.yul\":6672:6686   */\n      add\n        /* \"#utility.yul\":6664:6686   */\n      swap1\n      pop\n        /* \"#utility.yul\":6561:6693   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6699:6807   */\n    tag_390:\n        /* \"#utility.yul\":6776:6800   */\n      tag_476\n        /* \"#utility.yul\":6794:6799   */\n      dup2\n        /* \"#utility.yul\":6776:6800   */\n      tag_374\n      jump\t// in\n    tag_476:\n        /* \"#utility.yul\":6771:6774   */\n      dup3\n        /* \"#utility.yul\":6764:6801   */\n      mstore\n        /* \"#utility.yul\":6699:6807   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6813:6992   */\n    tag_391:\n        /* \"#utility.yul\":6882:6892   */\n      0x00\n        /* \"#utility.yul\":6903:6949   */\n      tag_478\n        /* \"#utility.yul\":6945:6948   */\n      dup4\n        /* \"#utility.yul\":6937:6943   */\n      dup4\n        /* \"#utility.yul\":6903:6949   */\n      tag_390\n      jump\t// in\n    tag_478:\n        /* \"#utility.yul\":6981:6985   */\n      0x20\n        /* \"#utility.yul\":6976:6979   */\n      dup4\n        /* \"#utility.yul\":6972:6986   */\n      add\n        /* \"#utility.yul\":6958:6986   */\n      swap1\n      pop\n        /* \"#utility.yul\":6813:6992   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6998:7111   */\n    tag_392:\n        /* \"#utility.yul\":7068:7072   */\n      0x00\n        /* \"#utility.yul\":7100:7104   */\n      0x20\n        /* \"#utility.yul\":7095:7098   */\n      dup3\n        /* \"#utility.yul\":7091:7105   */\n      add\n        /* \"#utility.yul\":7083:7105   */\n      swap1\n      pop\n        /* \"#utility.yul\":6998:7111   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7147:7879   */\n    tag_393:\n        /* \"#utility.yul\":7266:7269   */\n      0x00\n        /* \"#utility.yul\":7295:7349   */\n      tag_481\n        /* \"#utility.yul\":7343:7348   */\n      dup3\n        /* \"#utility.yul\":7295:7349   */\n      tag_387\n      jump\t// in\n    tag_481:\n        /* \"#utility.yul\":7365:7451   */\n      tag_482\n        /* \"#utility.yul\":7444:7450   */\n      dup2\n        /* \"#utility.yul\":7439:7442   */\n      dup6\n        /* \"#utility.yul\":7365:7451   */\n      tag_388\n      jump\t// in\n    tag_482:\n        /* \"#utility.yul\":7358:7451   */\n      swap4\n      pop\n        /* \"#utility.yul\":7475:7531   */\n      tag_483\n        /* \"#utility.yul\":7525:7530   */\n      dup4\n        /* \"#utility.yul\":7475:7531   */\n      tag_389\n      jump\t// in\n    tag_483:\n        /* \"#utility.yul\":7554:7561   */\n      dup1\n        /* \"#utility.yul\":7585:7586   */\n      0x00\n        /* \"#utility.yul\":7570:7854   */\n    tag_484:\n        /* \"#utility.yul\":7595:7601   */\n      dup4\n        /* \"#utility.yul\":7592:7593   */\n      dup2\n        /* \"#utility.yul\":7589:7602   */\n      lt\n        /* \"#utility.yul\":7570:7854   */\n      iszero\n      tag_486\n      jumpi\n        /* \"#utility.yul\":7671:7677   */\n      dup2\n        /* \"#utility.yul\":7665:7678   */\n      mload\n        /* \"#utility.yul\":7698:7761   */\n      tag_487\n        /* \"#utility.yul\":7757:7760   */\n      dup9\n        /* \"#utility.yul\":7742:7755   */\n      dup3\n        /* \"#utility.yul\":7698:7761   */\n      tag_391\n      jump\t// in\n    tag_487:\n        /* \"#utility.yul\":7691:7761   */\n      swap8\n      pop\n        /* \"#utility.yul\":7784:7844   */\n      tag_488\n        /* \"#utility.yul\":7837:7843   */\n      dup4\n        /* \"#utility.yul\":7784:7844   */\n      tag_392\n      jump\t// in\n    tag_488:\n        /* \"#utility.yul\":7774:7844   */\n      swap3\n      pop\n        /* \"#utility.yul\":7630:7854   */\n      pop\n        /* \"#utility.yul\":7617:7618   */\n      0x01\n        /* \"#utility.yul\":7614:7615   */\n      dup2\n        /* \"#utility.yul\":7610:7619   */\n      add\n        /* \"#utility.yul\":7605:7619   */\n      swap1\n      pop\n        /* \"#utility.yul\":7570:7854   */\n      jump(tag_484)\n    tag_486:\n        /* \"#utility.yul\":7574:7588   */\n      pop\n        /* \"#utility.yul\":7870:7873   */\n      dup6\n        /* \"#utility.yul\":7863:7873   */\n      swap4\n      pop\n        /* \"#utility.yul\":7271:7879   */\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":7147:7879   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7885:9100   */\n    tag_86:\n        /* \"#utility.yul\":8234:8238   */\n      0x00\n        /* \"#utility.yul\":8272:8275   */\n      0xe0\n        /* \"#utility.yul\":8261:8270   */\n      dup3\n        /* \"#utility.yul\":8257:8276   */\n      add\n        /* \"#utility.yul\":8249:8276   */\n      swap1\n      pop\n        /* \"#utility.yul\":8286:8355   */\n      tag_490\n        /* \"#utility.yul\":8352:8353   */\n      0x00\n        /* \"#utility.yul\":8341:8350   */\n      dup4\n        /* \"#utility.yul\":8337:8354   */\n      add\n        /* \"#utility.yul\":8328:8334   */\n      dup11\n        /* \"#utility.yul\":8286:8355   */\n      tag_385\n      jump\t// in\n    tag_490:\n        /* \"#utility.yul\":8402:8411   */\n      dup2\n        /* \"#utility.yul\":8396:8400   */\n      dup2\n        /* \"#utility.yul\":8392:8412   */\n      sub\n        /* \"#utility.yul\":8387:8389   */\n      0x20\n        /* \"#utility.yul\":8376:8385   */\n      dup4\n        /* \"#utility.yul\":8372:8390   */\n      add\n        /* \"#utility.yul\":8365:8413   */\n      mstore\n        /* \"#utility.yul\":8430:8508   */\n      tag_491\n        /* \"#utility.yul\":8503:8507   */\n      dup2\n        /* \"#utility.yul\":8494:8500   */\n      dup10\n        /* \"#utility.yul\":8430:8508   */\n      tag_366\n      jump\t// in\n    tag_491:\n        /* \"#utility.yul\":8422:8508   */\n      swap1\n      pop\n        /* \"#utility.yul\":8555:8564   */\n      dup2\n        /* \"#utility.yul\":8549:8553   */\n      dup2\n        /* \"#utility.yul\":8545:8565   */\n      sub\n        /* \"#utility.yul\":8540:8542   */\n      0x40\n        /* \"#utility.yul\":8529:8538   */\n      dup4\n        /* \"#utility.yul\":8525:8543   */\n      add\n        /* \"#utility.yul\":8518:8566   */\n      mstore\n        /* \"#utility.yul\":8583:8661   */\n      tag_492\n        /* \"#utility.yul\":8656:8660   */\n      dup2\n        /* \"#utility.yul\":8647:8653   */\n      dup9\n        /* \"#utility.yul\":8583:8661   */\n      tag_366\n      jump\t// in\n    tag_492:\n        /* \"#utility.yul\":8575:8661   */\n      swap1\n      pop\n        /* \"#utility.yul\":8671:8743   */\n      tag_493\n        /* \"#utility.yul\":8739:8741   */\n      0x60\n        /* \"#utility.yul\":8728:8737   */\n      dup4\n        /* \"#utility.yul\":8724:8742   */\n      add\n        /* \"#utility.yul\":8715:8721   */\n      dup8\n        /* \"#utility.yul\":8671:8743   */\n      tag_379\n      jump\t// in\n    tag_493:\n        /* \"#utility.yul\":8753:8826   */\n      tag_494\n        /* \"#utility.yul\":8821:8824   */\n      0x80\n        /* \"#utility.yul\":8810:8819   */\n      dup4\n        /* \"#utility.yul\":8806:8825   */\n      add\n        /* \"#utility.yul\":8797:8803   */\n      dup7\n        /* \"#utility.yul\":8753:8826   */\n      tag_386\n      jump\t// in\n    tag_494:\n        /* \"#utility.yul\":8836:8909   */\n      tag_495\n        /* \"#utility.yul\":8904:8907   */\n      0xa0\n        /* \"#utility.yul\":8893:8902   */\n      dup4\n        /* \"#utility.yul\":8889:8908   */\n      add\n        /* \"#utility.yul\":8880:8886   */\n      dup6\n        /* \"#utility.yul\":8836:8909   */\n      tag_383\n      jump\t// in\n    tag_495:\n        /* \"#utility.yul\":8957:8966   */\n      dup2\n        /* \"#utility.yul\":8951:8955   */\n      dup2\n        /* \"#utility.yul\":8947:8967   */\n      sub\n        /* \"#utility.yul\":8941:8944   */\n      0xc0\n        /* \"#utility.yul\":8930:8939   */\n      dup4\n        /* \"#utility.yul\":8926:8945   */\n      add\n        /* \"#utility.yul\":8919:8968   */\n      mstore\n        /* \"#utility.yul\":8985:9093   */\n      tag_496\n        /* \"#utility.yul\":9088:9092   */\n      dup2\n        /* \"#utility.yul\":9079:9085   */\n      dup5\n        /* \"#utility.yul\":8985:9093   */\n      tag_393\n      jump\t// in\n    tag_496:\n        /* \"#utility.yul\":8977:9093   */\n      swap1\n      pop\n        /* \"#utility.yul\":7885:9100   */\n      swap9\n      swap8\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9106:9328   */\n    tag_90:\n        /* \"#utility.yul\":9199:9203   */\n      0x00\n        /* \"#utility.yul\":9237:9239   */\n      0x20\n        /* \"#utility.yul\":9226:9235   */\n      dup3\n        /* \"#utility.yul\":9222:9240   */\n      add\n        /* \"#utility.yul\":9214:9240   */\n      swap1\n      pop\n        /* \"#utility.yul\":9250:9321   */\n      tag_498\n        /* \"#utility.yul\":9318:9319   */\n      0x00\n        /* \"#utility.yul\":9307:9316   */\n      dup4\n        /* \"#utility.yul\":9303:9320   */\n      add\n        /* \"#utility.yul\":9294:9300   */\n      dup5\n        /* \"#utility.yul\":9250:9321   */\n      tag_386\n      jump\t// in\n    tag_498:\n        /* \"#utility.yul\":9106:9328   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9334:9452   */\n    tag_394:\n        /* \"#utility.yul\":9405:9427   */\n      tag_500\n        /* \"#utility.yul\":9421:9426   */\n      dup2\n        /* \"#utility.yul\":9405:9427   */\n      tag_380\n      jump\t// in\n    tag_500:\n        /* \"#utility.yul\":9398:9403   */\n      dup2\n        /* \"#utility.yul\":9395:9428   */\n      eq\n        /* \"#utility.yul\":9385:9446   */\n      tag_501\n      jumpi\n        /* \"#utility.yul\":9442:9443   */\n      0x00\n        /* \"#utility.yul\":9439:9440   */\n      dup1\n        /* \"#utility.yul\":9432:9444   */\n      revert\n        /* \"#utility.yul\":9385:9446   */\n    tag_501:\n        /* \"#utility.yul\":9334:9452   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9458:9593   */\n    tag_395:\n        /* \"#utility.yul\":9502:9507   */\n      0x00\n        /* \"#utility.yul\":9540:9546   */\n      dup2\n        /* \"#utility.yul\":9527:9547   */\n      calldataload\n        /* \"#utility.yul\":9518:9547   */\n      swap1\n      pop\n        /* \"#utility.yul\":9556:9587   */\n      tag_503\n        /* \"#utility.yul\":9581:9586   */\n      dup2\n        /* \"#utility.yul\":9556:9587   */\n      tag_394\n      jump\t// in\n    tag_503:\n        /* \"#utility.yul\":9458:9593   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9599:9721   */\n    tag_396:\n        /* \"#utility.yul\":9672:9696   */\n      tag_505\n        /* \"#utility.yul\":9690:9695   */\n      dup2\n        /* \"#utility.yul\":9672:9696   */\n      tag_382\n      jump\t// in\n    tag_505:\n        /* \"#utility.yul\":9665:9670   */\n      dup2\n        /* \"#utility.yul\":9662:9697   */\n      eq\n        /* \"#utility.yul\":9652:9715   */\n      tag_506\n      jumpi\n        /* \"#utility.yul\":9711:9712   */\n      0x00\n        /* \"#utility.yul\":9708:9709   */\n      dup1\n        /* \"#utility.yul\":9701:9713   */\n      revert\n        /* \"#utility.yul\":9652:9715   */\n    tag_506:\n        /* \"#utility.yul\":9599:9721   */\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9727:9866   */\n    tag_397:\n        /* \"#utility.yul\":9773:9778   */\n      0x00\n        /* \"#utility.yul\":9811:9817   */\n      dup2\n        /* \"#utility.yul\":9798:9818   */\n      calldataload\n        /* \"#utility.yul\":9789:9818   */\n      swap1\n      pop\n        /* \"#utility.yul\":9827:9860   */\n      tag_508\n        /* \"#utility.yul\":9854:9859   */\n      dup2\n        /* \"#utility.yul\":9827:9860   */\n      tag_396\n      jump\t// in\n    tag_508:\n        /* \"#utility.yul\":9727:9866   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9872:11071   */\n    tag_100:\n        /* \"#utility.yul\":9983:9989   */\n      0x00\n        /* \"#utility.yul\":9991:9997   */\n      dup1\n        /* \"#utility.yul\":9999:10005   */\n      0x00\n        /* \"#utility.yul\":10007:10013   */\n      dup1\n        /* \"#utility.yul\":10015:10021   */\n      0x00\n        /* \"#utility.yul\":10023:10029   */\n      dup1\n        /* \"#utility.yul\":10031:10037   */\n      0x00\n        /* \"#utility.yul\":10080:10083   */\n      0xe0\n        /* \"#utility.yul\":10068:10077   */\n      dup9\n        /* \"#utility.yul\":10059:10066   */\n      dup11\n        /* \"#utility.yul\":10055:10078   */\n      sub\n        /* \"#utility.yul\":10051:10084   */\n      slt\n        /* \"#utility.yul\":10048:10168   */\n      iszero\n      tag_510\n      jumpi\n        /* \"#utility.yul\":10087:10166   */\n      tag_511\n      tag_368\n      jump\t// in\n    tag_511:\n        /* \"#utility.yul\":10048:10168   */\n    tag_510:\n        /* \"#utility.yul\":10207:10208   */\n      0x00\n        /* \"#utility.yul\":10232:10285   */\n      tag_512\n        /* \"#utility.yul\":10277:10284   */\n      dup11\n        /* \"#utility.yul\":10268:10274   */\n      dup3\n        /* \"#utility.yul\":10257:10266   */\n      dup12\n        /* \"#utility.yul\":10253:10275   */\n      add\n        /* \"#utility.yul\":10232:10285   */\n      tag_373\n      jump\t// in\n    tag_512:\n        /* \"#utility.yul\":10222:10285   */\n      swap8\n      pop\n        /* \"#utility.yul\":10178:10295   */\n      pop\n        /* \"#utility.yul\":10334:10336   */\n      0x20\n        /* \"#utility.yul\":10360:10413   */\n      tag_513\n        /* \"#utility.yul\":10405:10412   */\n      dup11\n        /* \"#utility.yul\":10396:10402   */\n      dup3\n        /* \"#utility.yul\":10385:10394   */\n      dup12\n        /* \"#utility.yul\":10381:10403   */\n      add\n        /* \"#utility.yul\":10360:10413   */\n      tag_373\n      jump\t// in\n    tag_513:\n        /* \"#utility.yul\":10350:10413   */\n      swap7\n      pop\n        /* \"#utility.yul\":10305:10423   */\n      pop\n        /* \"#utility.yul\":10462:10464   */\n      0x40\n        /* \"#utility.yul\":10488:10541   */\n      tag_514\n        /* \"#utility.yul\":10533:10540   */\n      dup11\n        /* \"#utility.yul\":10524:10530   */\n      dup3\n        /* \"#utility.yul\":10513:10522   */\n      dup12\n        /* \"#utility.yul\":10509:10531   */\n      add\n        /* \"#utility.yul\":10488:10541   */\n      tag_376\n      jump\t// in\n    tag_514:\n        /* \"#utility.yul\":10478:10541   */\n      swap6\n      pop\n        /* \"#utility.yul\":10433:10551   */\n      pop\n        /* \"#utility.yul\":10590:10592   */\n      0x60\n        /* \"#utility.yul\":10616:10669   */\n      tag_515\n        /* \"#utility.yul\":10661:10668   */\n      dup11\n        /* \"#utility.yul\":10652:10658   */\n      dup3\n        /* \"#utility.yul\":10641:10650   */\n      dup12\n        /* \"#utility.yul\":10637:10659   */\n      add\n        /* \"#utility.yul\":10616:10669   */\n      tag_376\n      jump\t// in\n    tag_515:\n        /* \"#utility.yul\":10606:10669   */\n      swap5\n      pop\n        /* \"#utility.yul\":10561:10679   */\n      pop\n        /* \"#utility.yul\":10718:10721   */\n      0x80\n        /* \"#utility.yul\":10745:10796   */\n      tag_516\n        /* \"#utility.yul\":10788:10795   */\n      dup11\n        /* \"#utility.yul\":10779:10785   */\n      dup3\n        /* \"#utility.yul\":10768:10777   */\n      dup12\n        /* \"#utility.yul\":10764:10786   */\n      add\n        /* \"#utility.yul\":10745:10796   */\n      tag_395\n      jump\t// in\n    tag_516:\n        /* \"#utility.yul\":10735:10796   */\n      swap4\n      pop\n        /* \"#utility.yul\":10689:10806   */\n      pop\n        /* \"#utility.yul\":10845:10848   */\n      0xa0\n        /* \"#utility.yul\":10872:10925   */\n      tag_517\n        /* \"#utility.yul\":10917:10924   */\n      dup11\n        /* \"#utility.yul\":10908:10914   */\n      dup3\n        /* \"#utility.yul\":10897:10906   */\n      dup12\n        /* \"#utility.yul\":10893:10915   */\n      add\n        /* \"#utility.yul\":10872:10925   */\n      tag_397\n      jump\t// in\n    tag_517:\n        /* \"#utility.yul\":10862:10925   */\n      swap3\n      pop\n        /* \"#utility.yul\":10816:10935   */\n      pop\n        /* \"#utility.yul\":10974:10977   */\n      0xc0\n        /* \"#utility.yul\":11001:11054   */\n      tag_518\n        /* \"#utility.yul\":11046:11053   */\n      dup11\n        /* \"#utility.yul\":11037:11043   */\n      dup3\n        /* \"#utility.yul\":11026:11035   */\n      dup12\n        /* \"#utility.yul\":11022:11044   */\n      add\n        /* \"#utility.yul\":11001:11054   */\n      tag_397\n      jump\t// in\n    tag_518:\n        /* \"#utility.yul\":10991:11054   */\n      swap2\n      pop\n        /* \"#utility.yul\":10945:11064   */\n      pop\n        /* \"#utility.yul\":9872:11071   */\n      swap3\n      swap6\n      swap9\n      swap2\n      swap5\n      swap8\n      pop\n      swap3\n      swap6\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11077:11551   */\n    tag_104:\n        /* \"#utility.yul\":11145:11151   */\n      0x00\n        /* \"#utility.yul\":11153:11159   */\n      dup1\n        /* \"#utility.yul\":11202:11204   */\n      0x40\n        /* \"#utility.yul\":11190:11199   */\n      dup4\n        /* \"#utility.yul\":11181:11188   */\n      dup6\n        /* \"#utility.yul\":11177:11200   */\n      sub\n        /* \"#utility.yul\":11173:11205   */\n      slt\n        /* \"#utility.yul\":11170:11289   */\n      iszero\n      tag_520\n      jumpi\n        /* \"#utility.yul\":11208:11287   */\n      tag_521\n      tag_368\n      jump\t// in\n    tag_521:\n        /* \"#utility.yul\":11170:11289   */\n    tag_520:\n        /* \"#utility.yul\":11328:11329   */\n      0x00\n        /* \"#utility.yul\":11353:11406   */\n      tag_522\n        /* \"#utility.yul\":11398:11405   */\n      dup6\n        /* \"#utility.yul\":11389:11395   */\n      dup3\n        /* \"#utility.yul\":11378:11387   */\n      dup7\n        /* \"#utility.yul\":11374:11396   */\n      add\n        /* \"#utility.yul\":11353:11406   */\n      tag_373\n      jump\t// in\n    tag_522:\n        /* \"#utility.yul\":11343:11406   */\n      swap3\n      pop\n        /* \"#utility.yul\":11299:11416   */\n      pop\n        /* \"#utility.yul\":11455:11457   */\n      0x20\n        /* \"#utility.yul\":11481:11534   */\n      tag_523\n        /* \"#utility.yul\":11526:11533   */\n      dup6\n        /* \"#utility.yul\":11517:11523   */\n      dup3\n        /* \"#utility.yul\":11506:11515   */\n      dup7\n        /* \"#utility.yul\":11502:11524   */\n      add\n        /* \"#utility.yul\":11481:11534   */\n      tag_373\n      jump\t// in\n    tag_523:\n        /* \"#utility.yul\":11471:11534   */\n      swap2\n      pop\n        /* \"#utility.yul\":11426:11544   */\n      pop\n        /* \"#utility.yul\":11077:11551   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":11557:11737   */\n    tag_398:\n        /* \"#utility.yul\":11605:11682   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":11602:11603   */\n      0x00\n        /* \"#utility.yul\":11595:11683   */\n      mstore\n        /* \"#utility.yul\":11702:11706   */\n      0x22\n        /* \"#utility.yul\":11699:11700   */\n      0x04\n        /* \"#utility.yul\":11692:11707   */\n      mstore\n        /* \"#utility.yul\":11726:11730   */\n      0x24\n        /* \"#utility.yul\":11723:11724   */\n      0x00\n        /* \"#utility.yul\":11716:11731   */\n      revert\n        /* \"#utility.yul\":11743:12063   */\n    tag_112:\n        /* \"#utility.yul\":11787:11793   */\n      0x00\n        /* \"#utility.yul\":11824:11825   */\n      0x02\n        /* \"#utility.yul\":11818:11822   */\n      dup3\n        /* \"#utility.yul\":11814:11826   */\n      div\n        /* \"#utility.yul\":11804:11826   */\n      swap1\n      pop\n        /* \"#utility.yul\":11871:11872   */\n      0x01\n        /* \"#utility.yul\":11865:11869   */\n      dup3\n        /* \"#utility.yul\":11861:11873   */\n      and\n        /* \"#utility.yul\":11892:11910   */\n      dup1\n        /* \"#utility.yul\":11882:11963   */\n      tag_526\n      jumpi\n        /* \"#utility.yul\":11948:11952   */\n      0x7f\n        /* \"#utility.yul\":11940:11946   */\n      dup3\n        /* \"#utility.yul\":11936:11953   */\n      and\n        /* \"#utility.yul\":11926:11953   */\n      swap2\n      pop\n        /* \"#utility.yul\":11882:11963   */\n    tag_526:\n        /* \"#utility.yul\":12010:12012   */\n      0x20\n        /* \"#utility.yul\":12002:12008   */\n      dup3\n        /* \"#utility.yul\":11999:12013   */\n      lt\n        /* \"#utility.yul\":11979:11997   */\n      dup2\n        /* \"#utility.yul\":11976:12014   */\n      sub\n        /* \"#utility.yul\":11973:12057   */\n      tag_527\n      jumpi\n        /* \"#utility.yul\":12029:12047   */\n      tag_528\n      tag_398\n      jump\t// in\n    tag_528:\n        /* \"#utility.yul\":11973:12057   */\n    tag_527:\n        /* \"#utility.yul\":11794:12063   */\n      pop\n        /* \"#utility.yul\":11743:12063   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":12069:12249   */\n    tag_174:\n        /* \"#utility.yul\":12117:12194   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":12114:12115   */\n      0x00\n        /* \"#utility.yul\":12107:12195   */\n      mstore\n        /* \"#utility.yul\":12214:12218   */\n      0x41\n        /* \"#utility.yul\":12211:12212   */\n      0x04\n        /* \"#utility.yul\":12204:12219   */\n      mstore\n        /* \"#utility.yul\":12238:12242   */\n      0x24\n        /* \"#utility.yul\":12235:12236   */\n      0x00\n        /* \"#utility.yul\":12228:12243   */\n      revert\n        /* \"#utility.yul\":12255:13030   */\n    tag_192:\n        /* \"#utility.yul\":12488:12492   */\n      0x00\n        /* \"#utility.yul\":12526:12529   */\n      0xc0\n        /* \"#utility.yul\":12515:12524   */\n      dup3\n        /* \"#utility.yul\":12511:12530   */\n      add\n        /* \"#utility.yul\":12503:12530   */\n      swap1\n      pop\n        /* \"#utility.yul\":12540:12611   */\n      tag_531\n        /* \"#utility.yul\":12608:12609   */\n      0x00\n        /* \"#utility.yul\":12597:12606   */\n      dup4\n        /* \"#utility.yul\":12593:12610   */\n      add\n        /* \"#utility.yul\":12584:12590   */\n      dup10\n        /* \"#utility.yul\":12540:12611   */\n      tag_383\n      jump\t// in\n    tag_531:\n        /* \"#utility.yul\":12621:12693   */\n      tag_532\n        /* \"#utility.yul\":12689:12691   */\n      0x20\n        /* \"#utility.yul\":12678:12687   */\n      dup4\n        /* \"#utility.yul\":12674:12692   */\n      add\n        /* \"#utility.yul\":12665:12671   */\n      dup9\n        /* \"#utility.yul\":12621:12693   */\n      tag_386\n      jump\t// in\n    tag_532:\n        /* \"#utility.yul\":12703:12775   */\n      tag_533\n        /* \"#utility.yul\":12771:12773   */\n      0x40\n        /* \"#utility.yul\":12760:12769   */\n      dup4\n        /* \"#utility.yul\":12756:12774   */\n      add\n        /* \"#utility.yul\":12747:12753   */\n      dup8\n        /* \"#utility.yul\":12703:12775   */\n      tag_386\n      jump\t// in\n    tag_533:\n        /* \"#utility.yul\":12785:12857   */\n      tag_534\n        /* \"#utility.yul\":12853:12855   */\n      0x60\n        /* \"#utility.yul\":12842:12851   */\n      dup4\n        /* \"#utility.yul\":12838:12856   */\n      add\n        /* \"#utility.yul\":12829:12835   */\n      dup7\n        /* \"#utility.yul\":12785:12857   */\n      tag_379\n      jump\t// in\n    tag_534:\n        /* \"#utility.yul\":12867:12940   */\n      tag_535\n        /* \"#utility.yul\":12935:12938   */\n      0x80\n        /* \"#utility.yul\":12924:12933   */\n      dup4\n        /* \"#utility.yul\":12920:12939   */\n      add\n        /* \"#utility.yul\":12911:12917   */\n      dup6\n        /* \"#utility.yul\":12867:12940   */\n      tag_379\n      jump\t// in\n    tag_535:\n        /* \"#utility.yul\":12950:13023   */\n      tag_536\n        /* \"#utility.yul\":13018:13021   */\n      0xa0\n        /* \"#utility.yul\":13007:13016   */\n      dup4\n        /* \"#utility.yul\":13003:13022   */\n      add\n        /* \"#utility.yul\":12994:13000   */\n      dup5\n        /* \"#utility.yul\":12950:13023   */\n      tag_379\n      jump\t// in\n    tag_536:\n        /* \"#utility.yul\":12255:13030   */\n      swap8\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13036:13368   */\n    tag_199:\n        /* \"#utility.yul\":13157:13161   */\n      0x00\n        /* \"#utility.yul\":13195:13197   */\n      0x40\n        /* \"#utility.yul\":13184:13193   */\n      dup3\n        /* \"#utility.yul\":13180:13198   */\n      add\n        /* \"#utility.yul\":13172:13198   */\n      swap1\n      pop\n        /* \"#utility.yul\":13208:13279   */\n      tag_538\n        /* \"#utility.yul\":13276:13277   */\n      0x00\n        /* \"#utility.yul\":13265:13274   */\n      dup4\n        /* \"#utility.yul\":13261:13278   */\n      add\n        /* \"#utility.yul\":13252:13258   */\n      dup6\n        /* \"#utility.yul\":13208:13279   */\n      tag_386\n      jump\t// in\n    tag_538:\n        /* \"#utility.yul\":13289:13361   */\n      tag_539\n        /* \"#utility.yul\":13357:13359   */\n      0x20\n        /* \"#utility.yul\":13346:13355   */\n      dup4\n        /* \"#utility.yul\":13342:13360   */\n      add\n        /* \"#utility.yul\":13333:13339   */\n      dup5\n        /* \"#utility.yul\":13289:13361   */\n      tag_386\n      jump\t// in\n    tag_539:\n        /* \"#utility.yul\":13036:13368   */\n      swap4\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13374:13816   */\n    tag_217:\n        /* \"#utility.yul\":13523:13527   */\n      0x00\n        /* \"#utility.yul\":13561:13563   */\n      0x60\n        /* \"#utility.yul\":13550:13559   */\n      dup3\n        /* \"#utility.yul\":13546:13564   */\n      add\n        /* \"#utility.yul\":13538:13564   */\n      swap1\n      pop\n        /* \"#utility.yul\":13574:13645   */\n      tag_541\n        /* \"#utility.yul\":13642:13643   */\n      0x00\n        /* \"#utility.yul\":13631:13640   */\n      dup4\n        /* \"#utility.yul\":13627:13644   */\n      add\n        /* \"#utility.yul\":13618:13624   */\n      dup7\n        /* \"#utility.yul\":13574:13645   */\n      tag_386\n      jump\t// in\n    tag_541:\n        /* \"#utility.yul\":13655:13727   */\n      tag_542\n        /* \"#utility.yul\":13723:13725   */\n      0x20\n        /* \"#utility.yul\":13712:13721   */\n      dup4\n        /* \"#utility.yul\":13708:13726   */\n      add\n        /* \"#utility.yul\":13699:13705   */\n      dup6\n        /* \"#utility.yul\":13655:13727   */\n      tag_379\n      jump\t// in\n    tag_542:\n        /* \"#utility.yul\":13737:13809   */\n      tag_543\n        /* \"#utility.yul\":13805:13807   */\n      0x40\n        /* \"#utility.yul\":13794:13803   */\n      dup4\n        /* \"#utility.yul\":13790:13808   */\n      add\n        /* \"#utility.yul\":13781:13787   */\n      dup5\n        /* \"#utility.yul\":13737:13809   */\n      tag_379\n      jump\t// in\n    tag_543:\n        /* \"#utility.yul\":13374:13816   */\n      swap5\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":13822:14486   */\n    tag_287:\n        /* \"#utility.yul\":14027:14031   */\n      0x00\n        /* \"#utility.yul\":14065:14068   */\n      0xa0\n        /* \"#utility.yul\":14054:14063   */\n      dup3\n        /* \"#utility.yul\":14050:14069   */\n      add\n        /* \"#utility.yul\":14042:14069   */\n      swap1\n      pop\n        /* \"#utility.yul\":14079:14150   */\n      tag_545\n        /* \"#utility.yul\":14147:14148   */\n      0x00\n        /* \"#utility.yul\":14136:14145   */\n      dup4\n        /* \"#utility.yul\":14132:14149   */\n      add\n        /* \"#utility.yul\":14123:14129   */\n      dup9\n        /* \"#utility.yul\":14079:14150   */\n      tag_383\n      jump\t// in\n    tag_545:\n        /* \"#utility.yul\":14160:14232   */\n      tag_546\n        /* \"#utility.yul\":14228:14230   */\n      0x20\n        /* \"#utility.yul\":14217:14226   */\n      dup4\n        /* \"#utility.yul\":14213:14231   */\n      add\n        /* \"#utility.yul\":14204:14210   */\n      dup8\n        /* \"#utility.yul\":14160:14232   */\n      tag_383\n      jump\t// in\n    tag_546:\n        /* \"#utility.yul\":14242:14314   */\n      tag_547\n        /* \"#utility.yul\":14310:14312   */\n      0x40\n        /* \"#utility.yul\":14299:14308   */\n      dup4\n        /* \"#utility.yul\":14295:14313   */\n      add\n        /* \"#utility.yul\":14286:14292   */\n      dup7\n        /* \"#utility.yul\":14242:14314   */\n      tag_383\n      jump\t// in\n    tag_547:\n        /* \"#utility.yul\":14324:14396   */\n      tag_548\n        /* \"#utility.yul\":14392:14394   */\n      0x60\n        /* \"#utility.yul\":14381:14390   */\n      dup4\n        /* \"#utility.yul\":14377:14395   */\n      add\n        /* \"#utility.yul\":14368:14374   */\n      dup6\n        /* \"#utility.yul\":14324:14396   */\n      tag_379\n      jump\t// in\n    tag_548:\n        /* \"#utility.yul\":14406:14479   */\n      tag_549\n        /* \"#utility.yul\":14474:14477   */\n      0x80\n        /* \"#utility.yul\":14463:14472   */\n      dup4\n        /* \"#utility.yul\":14459:14478   */\n      add\n        /* \"#utility.yul\":14450:14456   */\n      dup5\n        /* \"#utility.yul\":14406:14479   */\n      tag_386\n      jump\t// in\n    tag_549:\n        /* \"#utility.yul\":13822:14486   */\n      swap7\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14492:15037   */\n    tag_308:\n        /* \"#utility.yul\":14665:14669   */\n      0x00\n        /* \"#utility.yul\":14703:14706   */\n      0x80\n        /* \"#utility.yul\":14692:14701   */\n      dup3\n        /* \"#utility.yul\":14688:14707   */\n      add\n        /* \"#utility.yul\":14680:14707   */\n      swap1\n      pop\n        /* \"#utility.yul\":14717:14788   */\n      tag_551\n        /* \"#utility.yul\":14785:14786   */\n      0x00\n        /* \"#utility.yul\":14774:14783   */\n      dup4\n        /* \"#utility.yul\":14770:14787   */\n      add\n        /* \"#utility.yul\":14761:14767   */\n      dup8\n        /* \"#utility.yul\":14717:14788   */\n      tag_383\n      jump\t// in\n    tag_551:\n        /* \"#utility.yul\":14798:14866   */\n      tag_552\n        /* \"#utility.yul\":14862:14864   */\n      0x20\n        /* \"#utility.yul\":14851:14860   */\n      dup4\n        /* \"#utility.yul\":14847:14865   */\n      add\n        /* \"#utility.yul\":14838:14844   */\n      dup7\n        /* \"#utility.yul\":14798:14866   */\n      tag_381\n      jump\t// in\n    tag_552:\n        /* \"#utility.yul\":14876:14948   */\n      tag_553\n        /* \"#utility.yul\":14944:14946   */\n      0x40\n        /* \"#utility.yul\":14933:14942   */\n      dup4\n        /* \"#utility.yul\":14929:14947   */\n      add\n        /* \"#utility.yul\":14920:14926   */\n      dup6\n        /* \"#utility.yul\":14876:14948   */\n      tag_383\n      jump\t// in\n    tag_553:\n        /* \"#utility.yul\":14958:15030   */\n      tag_554\n        /* \"#utility.yul\":15026:15028   */\n      0x60\n        /* \"#utility.yul\":15015:15024   */\n      dup4\n        /* \"#utility.yul\":15011:15029   */\n      add\n        /* \"#utility.yul\":15002:15008   */\n      dup5\n        /* \"#utility.yul\":14958:15030   */\n      tag_383\n      jump\t// in\n    tag_554:\n        /* \"#utility.yul\":14492:15037   */\n      swap6\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":15043:15223   */\n    tag_315:\n        /* \"#utility.yul\":15091:15168   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":15088:15089   */\n      0x00\n        /* \"#utility.yul\":15081:15169   */\n      mstore\n        /* \"#utility.yul\":15188:15192   */\n      0x21\n        /* \"#utility.yul\":15185:15186   */\n      0x04\n        /* \"#utility.yul\":15178:15193   */\n      mstore\n        /* \"#utility.yul\":15212:15216   */\n      0x24\n        /* \"#utility.yul\":15209:15210   */\n      0x00\n        /* \"#utility.yul\":15202:15217   */\n      revert\n        /* \"#utility.yul\":15229:15409   */\n    tag_399:\n        /* \"#utility.yul\":15277:15354   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":15274:15275   */\n      0x00\n        /* \"#utility.yul\":15267:15355   */\n      mstore\n        /* \"#utility.yul\":15374:15378   */\n      0x11\n        /* \"#utility.yul\":15371:15372   */\n      0x04\n        /* \"#utility.yul\":15364:15379   */\n      mstore\n        /* \"#utility.yul\":15398:15402   */\n      0x24\n        /* \"#utility.yul\":15395:15396   */\n      0x00\n        /* \"#utility.yul\":15388:15403   */\n      revert\n        /* \"#utility.yul\":15415:15606   */\n    tag_353:\n        /* \"#utility.yul\":15455:15458   */\n      0x00\n        /* \"#utility.yul\":15474:15494   */\n      tag_558\n        /* \"#utility.yul\":15492:15493   */\n      dup3\n        /* \"#utility.yul\":15474:15494   */\n      tag_374\n      jump\t// in\n    tag_558:\n        /* \"#utility.yul\":15469:15494   */\n      swap2\n      pop\n        /* \"#utility.yul\":15508:15528   */\n      tag_559\n        /* \"#utility.yul\":15526:15527   */\n      dup4\n        /* \"#utility.yul\":15508:15528   */\n      tag_374\n      jump\t// in\n    tag_559:\n        /* \"#utility.yul\":15503:15528   */\n      swap3\n      pop\n        /* \"#utility.yul\":15551:15552   */\n      dup3\n        /* \"#utility.yul\":15548:15549   */\n      dup3\n        /* \"#utility.yul\":15544:15553   */\n      add\n        /* \"#utility.yul\":15537:15553   */\n      swap1\n      pop\n        /* \"#utility.yul\":15572:15575   */\n      dup1\n        /* \"#utility.yul\":15569:15570   */\n      dup3\n        /* \"#utility.yul\":15566:15576   */\n      gt\n        /* \"#utility.yul\":15563:15599   */\n      iszero\n      tag_560\n      jumpi\n        /* \"#utility.yul\":15579:15597   */\n      tag_561\n      tag_399\n      jump\t// in\n    tag_561:\n        /* \"#utility.yul\":15563:15599   */\n    tag_560:\n        /* \"#utility.yul\":15415:15606   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220ff9e023953b20e928a81c3df5312e9e96fbddfb24a474c672d6ee9dfe43b5dbc64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1031": {
									"entryPoint": null,
									"id": 1031,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_1330": {
									"entryPoint": null,
									"id": 1330,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_2440": {
									"entryPoint": null,
									"id": 2440,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_361": {
									"entryPoint": null,
									"id": 361,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_3836": {
									"entryPoint": null,
									"id": 3836,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_50": {
									"entryPoint": null,
									"id": 50,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_buildDomainSeparator_2487": {
									"entryPoint": 848,
									"id": 2487,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_146": {
									"entryPoint": 574,
									"id": 146,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@getStringSlot_1717": {
									"entryPoint": 1039,
									"id": 1717,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@toShortStringWithFallback_1571": {
									"entryPoint": 771,
									"id": 1571,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@toShortString_1473": {
									"entryPoint": 938,
									"id": 1473,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_t_address_fromMemory": {
									"entryPoint": 1122,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 1142,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 1962,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes32_to_t_bytes32_fromStack": {
									"entryPoint": 2011,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 2168,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 2026,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 1977,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
									"entryPoint": 2041,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2224,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_dataslot_t_bytes_memory_ptr": {
									"entryPoint": 2266,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_dataslot_t_string_storage": {
									"entryPoint": 1333,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_bytes_memory_ptr": {
									"entryPoint": 2256,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 1185,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 2122,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_t_string_storage": {
									"entryPoint": 1618,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"cleanup_t_address": {
									"entryPoint": 1083,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bytes32": {
									"entryPoint": 2002,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 1052,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 1459,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"clear_storage_range_t_bytes1": {
									"entryPoint": 1584,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32": {
									"entryPoint": 2301,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"convert_t_uint256_to_t_uint256": {
									"entryPoint": 1477,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 1755,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 2138,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"divide_by_32_ceil": {
									"entryPoint": 1351,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 1285,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": 1728,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"identity": {
									"entryPoint": 1468,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"mask_bytes_dynamic": {
									"entryPoint": 1700,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x22": {
									"entryPoint": 1240,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 1195,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"prepare_store_t_uint256": {
									"entryPoint": 1510,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"read_from_memoryt_bytes32": {
									"entryPoint": 2281,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 1048,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 2152,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"shift_left_dynamic": {
									"entryPoint": 1366,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"shift_right_unsigned_dynamic": {
									"entryPoint": 1688,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"storage_set_to_zero_t_uint256": {
									"entryPoint": 1560,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"update_byte_slice_dynamic32": {
									"entryPoint": 1378,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"update_storage_value_t_uint256_to_t_uint256": {
									"entryPoint": 1519,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"validator_revert_t_address": {
									"entryPoint": 1100,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"zero_value_for_split_t_uint256": {
									"entryPoint": 1556,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:9895:22",
										"nodeType": "YulBlock",
										"src": "0:9895:22",
										"statements": [
											{
												"body": {
													"nativeSrc": "47:35:22",
													"nodeType": "YulBlock",
													"src": "47:35:22",
													"statements": [
														{
															"nativeSrc": "57:19:22",
															"nodeType": "YulAssignment",
															"src": "57:19:22",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "73:2:22",
																		"nodeType": "YulLiteral",
																		"src": "73:2:22",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "67:5:22",
																	"nodeType": "YulIdentifier",
																	"src": "67:5:22"
																},
																"nativeSrc": "67:9:22",
																"nodeType": "YulFunctionCall",
																"src": "67:9:22"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "57:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "57:6:22"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nativeSrc": "7:75:22",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "40:6:22",
														"nodeType": "YulTypedName",
														"src": "40:6:22",
														"type": ""
													}
												],
												"src": "7:75:22"
											},
											{
												"body": {
													"nativeSrc": "177:28:22",
													"nodeType": "YulBlock",
													"src": "177:28:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "194:1:22",
																		"nodeType": "YulLiteral",
																		"src": "194:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "197:1:22",
																		"nodeType": "YulLiteral",
																		"src": "197:1:22",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "187:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "187:6:22"
																},
																"nativeSrc": "187:12:22",
																"nodeType": "YulFunctionCall",
																"src": "187:12:22"
															},
															"nativeSrc": "187:12:22",
															"nodeType": "YulExpressionStatement",
															"src": "187:12:22"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nativeSrc": "88:117:22",
												"nodeType": "YulFunctionDefinition",
												"src": "88:117:22"
											},
											{
												"body": {
													"nativeSrc": "300:28:22",
													"nodeType": "YulBlock",
													"src": "300:28:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "317:1:22",
																		"nodeType": "YulLiteral",
																		"src": "317:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "320:1:22",
																		"nodeType": "YulLiteral",
																		"src": "320:1:22",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "310:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "310:6:22"
																},
																"nativeSrc": "310:12:22",
																"nodeType": "YulFunctionCall",
																"src": "310:12:22"
															},
															"nativeSrc": "310:12:22",
															"nodeType": "YulExpressionStatement",
															"src": "310:12:22"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nativeSrc": "211:117:22",
												"nodeType": "YulFunctionDefinition",
												"src": "211:117:22"
											},
											{
												"body": {
													"nativeSrc": "379:81:22",
													"nodeType": "YulBlock",
													"src": "379:81:22",
													"statements": [
														{
															"nativeSrc": "389:65:22",
															"nodeType": "YulAssignment",
															"src": "389:65:22",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "404:5:22",
																		"nodeType": "YulIdentifier",
																		"src": "404:5:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "411:42:22",
																		"nodeType": "YulLiteral",
																		"src": "411:42:22",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "400:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "400:3:22"
																},
																"nativeSrc": "400:54:22",
																"nodeType": "YulFunctionCall",
																"src": "400:54:22"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "389:7:22",
																	"nodeType": "YulIdentifier",
																	"src": "389:7:22"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nativeSrc": "334:126:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "361:5:22",
														"nodeType": "YulTypedName",
														"src": "361:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "371:7:22",
														"nodeType": "YulTypedName",
														"src": "371:7:22",
														"type": ""
													}
												],
												"src": "334:126:22"
											},
											{
												"body": {
													"nativeSrc": "511:51:22",
													"nodeType": "YulBlock",
													"src": "511:51:22",
													"statements": [
														{
															"nativeSrc": "521:35:22",
															"nodeType": "YulAssignment",
															"src": "521:35:22",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "550:5:22",
																		"nodeType": "YulIdentifier",
																		"src": "550:5:22"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "532:17:22",
																	"nodeType": "YulIdentifier",
																	"src": "532:17:22"
																},
																"nativeSrc": "532:24:22",
																"nodeType": "YulFunctionCall",
																"src": "532:24:22"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "521:7:22",
																	"nodeType": "YulIdentifier",
																	"src": "521:7:22"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nativeSrc": "466:96:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "493:5:22",
														"nodeType": "YulTypedName",
														"src": "493:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "503:7:22",
														"nodeType": "YulTypedName",
														"src": "503:7:22",
														"type": ""
													}
												],
												"src": "466:96:22"
											},
											{
												"body": {
													"nativeSrc": "611:79:22",
													"nodeType": "YulBlock",
													"src": "611:79:22",
													"statements": [
														{
															"body": {
																"nativeSrc": "668:16:22",
																"nodeType": "YulBlock",
																"src": "668:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "677:1:22",
																					"nodeType": "YulLiteral",
																					"src": "677:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "680:1:22",
																					"nodeType": "YulLiteral",
																					"src": "680:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "670:6:22",
																				"nodeType": "YulIdentifier",
																				"src": "670:6:22"
																			},
																			"nativeSrc": "670:12:22",
																			"nodeType": "YulFunctionCall",
																			"src": "670:12:22"
																		},
																		"nativeSrc": "670:12:22",
																		"nodeType": "YulExpressionStatement",
																		"src": "670:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "634:5:22",
																				"nodeType": "YulIdentifier",
																				"src": "634:5:22"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "659:5:22",
																						"nodeType": "YulIdentifier",
																						"src": "659:5:22"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nativeSrc": "641:17:22",
																					"nodeType": "YulIdentifier",
																					"src": "641:17:22"
																				},
																				"nativeSrc": "641:24:22",
																				"nodeType": "YulFunctionCall",
																				"src": "641:24:22"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "631:2:22",
																			"nodeType": "YulIdentifier",
																			"src": "631:2:22"
																		},
																		"nativeSrc": "631:35:22",
																		"nodeType": "YulFunctionCall",
																		"src": "631:35:22"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "624:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "624:6:22"
																},
																"nativeSrc": "624:43:22",
																"nodeType": "YulFunctionCall",
																"src": "624:43:22"
															},
															"nativeSrc": "621:63:22",
															"nodeType": "YulIf",
															"src": "621:63:22"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nativeSrc": "568:122:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "604:5:22",
														"nodeType": "YulTypedName",
														"src": "604:5:22",
														"type": ""
													}
												],
												"src": "568:122:22"
											},
											{
												"body": {
													"nativeSrc": "759:80:22",
													"nodeType": "YulBlock",
													"src": "759:80:22",
													"statements": [
														{
															"nativeSrc": "769:22:22",
															"nodeType": "YulAssignment",
															"src": "769:22:22",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "784:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "784:6:22"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "778:5:22",
																	"nodeType": "YulIdentifier",
																	"src": "778:5:22"
																},
																"nativeSrc": "778:13:22",
																"nodeType": "YulFunctionCall",
																"src": "778:13:22"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "769:5:22",
																	"nodeType": "YulIdentifier",
																	"src": "769:5:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "827:5:22",
																		"nodeType": "YulIdentifier",
																		"src": "827:5:22"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nativeSrc": "800:26:22",
																	"nodeType": "YulIdentifier",
																	"src": "800:26:22"
																},
																"nativeSrc": "800:33:22",
																"nodeType": "YulFunctionCall",
																"src": "800:33:22"
															},
															"nativeSrc": "800:33:22",
															"nodeType": "YulExpressionStatement",
															"src": "800:33:22"
														}
													]
												},
												"name": "abi_decode_t_address_fromMemory",
												"nativeSrc": "696:143:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "737:6:22",
														"nodeType": "YulTypedName",
														"src": "737:6:22",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "745:3:22",
														"nodeType": "YulTypedName",
														"src": "745:3:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "753:5:22",
														"nodeType": "YulTypedName",
														"src": "753:5:22",
														"type": ""
													}
												],
												"src": "696:143:22"
											},
											{
												"body": {
													"nativeSrc": "922:274:22",
													"nodeType": "YulBlock",
													"src": "922:274:22",
													"statements": [
														{
															"body": {
																"nativeSrc": "968:83:22",
																"nodeType": "YulBlock",
																"src": "968:83:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "970:77:22",
																				"nodeType": "YulIdentifier",
																				"src": "970:77:22"
																			},
																			"nativeSrc": "970:79:22",
																			"nodeType": "YulFunctionCall",
																			"src": "970:79:22"
																		},
																		"nativeSrc": "970:79:22",
																		"nodeType": "YulExpressionStatement",
																		"src": "970:79:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "943:7:22",
																				"nodeType": "YulIdentifier",
																				"src": "943:7:22"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "952:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "952:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "939:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "939:3:22"
																		},
																		"nativeSrc": "939:23:22",
																		"nodeType": "YulFunctionCall",
																		"src": "939:23:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "964:2:22",
																		"nodeType": "YulLiteral",
																		"src": "964:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "935:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "935:3:22"
																},
																"nativeSrc": "935:32:22",
																"nodeType": "YulFunctionCall",
																"src": "935:32:22"
															},
															"nativeSrc": "932:119:22",
															"nodeType": "YulIf",
															"src": "932:119:22"
														},
														{
															"nativeSrc": "1061:128:22",
															"nodeType": "YulBlock",
															"src": "1061:128:22",
															"statements": [
																{
																	"nativeSrc": "1076:15:22",
																	"nodeType": "YulVariableDeclaration",
																	"src": "1076:15:22",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "1090:1:22",
																		"nodeType": "YulLiteral",
																		"src": "1090:1:22",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "1080:6:22",
																			"nodeType": "YulTypedName",
																			"src": "1080:6:22",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "1105:74:22",
																	"nodeType": "YulAssignment",
																	"src": "1105:74:22",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "1151:9:22",
																						"nodeType": "YulIdentifier",
																						"src": "1151:9:22"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "1162:6:22",
																						"nodeType": "YulIdentifier",
																						"src": "1162:6:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "1147:3:22",
																					"nodeType": "YulIdentifier",
																					"src": "1147:3:22"
																				},
																				"nativeSrc": "1147:22:22",
																				"nodeType": "YulFunctionCall",
																				"src": "1147:22:22"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1171:7:22",
																				"nodeType": "YulIdentifier",
																				"src": "1171:7:22"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address_fromMemory",
																			"nativeSrc": "1115:31:22",
																			"nodeType": "YulIdentifier",
																			"src": "1115:31:22"
																		},
																		"nativeSrc": "1115:64:22",
																		"nodeType": "YulFunctionCall",
																		"src": "1115:64:22"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "1105:6:22",
																			"nodeType": "YulIdentifier",
																			"src": "1105:6:22"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nativeSrc": "845:351:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "892:9:22",
														"nodeType": "YulTypedName",
														"src": "892:9:22",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "903:7:22",
														"nodeType": "YulTypedName",
														"src": "903:7:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "915:6:22",
														"nodeType": "YulTypedName",
														"src": "915:6:22",
														"type": ""
													}
												],
												"src": "845:351:22"
											},
											{
												"body": {
													"nativeSrc": "1261:40:22",
													"nodeType": "YulBlock",
													"src": "1261:40:22",
													"statements": [
														{
															"nativeSrc": "1272:22:22",
															"nodeType": "YulAssignment",
															"src": "1272:22:22",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1288:5:22",
																		"nodeType": "YulIdentifier",
																		"src": "1288:5:22"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1282:5:22",
																	"nodeType": "YulIdentifier",
																	"src": "1282:5:22"
																},
																"nativeSrc": "1282:12:22",
																"nodeType": "YulFunctionCall",
																"src": "1282:12:22"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "1272:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "1272:6:22"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nativeSrc": "1202:99:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1244:5:22",
														"nodeType": "YulTypedName",
														"src": "1244:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "1254:6:22",
														"nodeType": "YulTypedName",
														"src": "1254:6:22",
														"type": ""
													}
												],
												"src": "1202:99:22"
											},
											{
												"body": {
													"nativeSrc": "1335:152:22",
													"nodeType": "YulBlock",
													"src": "1335:152:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1352:1:22",
																		"nodeType": "YulLiteral",
																		"src": "1352:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1355:77:22",
																		"nodeType": "YulLiteral",
																		"src": "1355:77:22",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1345:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "1345:6:22"
																},
																"nativeSrc": "1345:88:22",
																"nodeType": "YulFunctionCall",
																"src": "1345:88:22"
															},
															"nativeSrc": "1345:88:22",
															"nodeType": "YulExpressionStatement",
															"src": "1345:88:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1449:1:22",
																		"nodeType": "YulLiteral",
																		"src": "1449:1:22",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1452:4:22",
																		"nodeType": "YulLiteral",
																		"src": "1452:4:22",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1442:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "1442:6:22"
																},
																"nativeSrc": "1442:15:22",
																"nodeType": "YulFunctionCall",
																"src": "1442:15:22"
															},
															"nativeSrc": "1442:15:22",
															"nodeType": "YulExpressionStatement",
															"src": "1442:15:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1473:1:22",
																		"nodeType": "YulLiteral",
																		"src": "1473:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1476:4:22",
																		"nodeType": "YulLiteral",
																		"src": "1476:4:22",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1466:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "1466:6:22"
																},
																"nativeSrc": "1466:15:22",
																"nodeType": "YulFunctionCall",
																"src": "1466:15:22"
															},
															"nativeSrc": "1466:15:22",
															"nodeType": "YulExpressionStatement",
															"src": "1466:15:22"
														}
													]
												},
												"name": "panic_error_0x41",
												"nativeSrc": "1307:180:22",
												"nodeType": "YulFunctionDefinition",
												"src": "1307:180:22"
											},
											{
												"body": {
													"nativeSrc": "1521:152:22",
													"nodeType": "YulBlock",
													"src": "1521:152:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1538:1:22",
																		"nodeType": "YulLiteral",
																		"src": "1538:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1541:77:22",
																		"nodeType": "YulLiteral",
																		"src": "1541:77:22",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1531:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "1531:6:22"
																},
																"nativeSrc": "1531:88:22",
																"nodeType": "YulFunctionCall",
																"src": "1531:88:22"
															},
															"nativeSrc": "1531:88:22",
															"nodeType": "YulExpressionStatement",
															"src": "1531:88:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1635:1:22",
																		"nodeType": "YulLiteral",
																		"src": "1635:1:22",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1638:4:22",
																		"nodeType": "YulLiteral",
																		"src": "1638:4:22",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1628:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "1628:6:22"
																},
																"nativeSrc": "1628:15:22",
																"nodeType": "YulFunctionCall",
																"src": "1628:15:22"
															},
															"nativeSrc": "1628:15:22",
															"nodeType": "YulExpressionStatement",
															"src": "1628:15:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1659:1:22",
																		"nodeType": "YulLiteral",
																		"src": "1659:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1662:4:22",
																		"nodeType": "YulLiteral",
																		"src": "1662:4:22",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1652:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "1652:6:22"
																},
																"nativeSrc": "1652:15:22",
																"nodeType": "YulFunctionCall",
																"src": "1652:15:22"
															},
															"nativeSrc": "1652:15:22",
															"nodeType": "YulExpressionStatement",
															"src": "1652:15:22"
														}
													]
												},
												"name": "panic_error_0x22",
												"nativeSrc": "1493:180:22",
												"nodeType": "YulFunctionDefinition",
												"src": "1493:180:22"
											},
											{
												"body": {
													"nativeSrc": "1730:269:22",
													"nodeType": "YulBlock",
													"src": "1730:269:22",
													"statements": [
														{
															"nativeSrc": "1740:22:22",
															"nodeType": "YulAssignment",
															"src": "1740:22:22",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "1754:4:22",
																		"nodeType": "YulIdentifier",
																		"src": "1754:4:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1760:1:22",
																		"nodeType": "YulLiteral",
																		"src": "1760:1:22",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "1750:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "1750:3:22"
																},
																"nativeSrc": "1750:12:22",
																"nodeType": "YulFunctionCall",
																"src": "1750:12:22"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "1740:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "1740:6:22"
																}
															]
														},
														{
															"nativeSrc": "1771:38:22",
															"nodeType": "YulVariableDeclaration",
															"src": "1771:38:22",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "1801:4:22",
																		"nodeType": "YulIdentifier",
																		"src": "1801:4:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1807:1:22",
																		"nodeType": "YulLiteral",
																		"src": "1807:1:22",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "1797:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "1797:3:22"
																},
																"nativeSrc": "1797:12:22",
																"nodeType": "YulFunctionCall",
																"src": "1797:12:22"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "1775:18:22",
																	"nodeType": "YulTypedName",
																	"src": "1775:18:22",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1848:51:22",
																"nodeType": "YulBlock",
																"src": "1848:51:22",
																"statements": [
																	{
																		"nativeSrc": "1862:27:22",
																		"nodeType": "YulAssignment",
																		"src": "1862:27:22",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "1876:6:22",
																					"nodeType": "YulIdentifier",
																					"src": "1876:6:22"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1884:4:22",
																					"nodeType": "YulLiteral",
																					"src": "1884:4:22",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "1872:3:22",
																				"nodeType": "YulIdentifier",
																				"src": "1872:3:22"
																			},
																			"nativeSrc": "1872:17:22",
																			"nodeType": "YulFunctionCall",
																			"src": "1872:17:22"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "1862:6:22",
																				"nodeType": "YulIdentifier",
																				"src": "1862:6:22"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "1828:18:22",
																		"nodeType": "YulIdentifier",
																		"src": "1828:18:22"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "1821:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "1821:6:22"
																},
																"nativeSrc": "1821:26:22",
																"nodeType": "YulFunctionCall",
																"src": "1821:26:22"
															},
															"nativeSrc": "1818:81:22",
															"nodeType": "YulIf",
															"src": "1818:81:22"
														},
														{
															"body": {
																"nativeSrc": "1951:42:22",
																"nodeType": "YulBlock",
																"src": "1951:42:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nativeSrc": "1965:16:22",
																				"nodeType": "YulIdentifier",
																				"src": "1965:16:22"
																			},
																			"nativeSrc": "1965:18:22",
																			"nodeType": "YulFunctionCall",
																			"src": "1965:18:22"
																		},
																		"nativeSrc": "1965:18:22",
																		"nodeType": "YulExpressionStatement",
																		"src": "1965:18:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "1915:18:22",
																		"nodeType": "YulIdentifier",
																		"src": "1915:18:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "1938:6:22",
																				"nodeType": "YulIdentifier",
																				"src": "1938:6:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1946:2:22",
																				"nodeType": "YulLiteral",
																				"src": "1946:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "1935:2:22",
																			"nodeType": "YulIdentifier",
																			"src": "1935:2:22"
																		},
																		"nativeSrc": "1935:14:22",
																		"nodeType": "YulFunctionCall",
																		"src": "1935:14:22"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "1912:2:22",
																	"nodeType": "YulIdentifier",
																	"src": "1912:2:22"
																},
																"nativeSrc": "1912:38:22",
																"nodeType": "YulFunctionCall",
																"src": "1912:38:22"
															},
															"nativeSrc": "1909:84:22",
															"nodeType": "YulIf",
															"src": "1909:84:22"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "1679:320:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "1714:4:22",
														"nodeType": "YulTypedName",
														"src": "1714:4:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "1723:6:22",
														"nodeType": "YulTypedName",
														"src": "1723:6:22",
														"type": ""
													}
												],
												"src": "1679:320:22"
											},
											{
												"body": {
													"nativeSrc": "2059:87:22",
													"nodeType": "YulBlock",
													"src": "2059:87:22",
													"statements": [
														{
															"nativeSrc": "2069:11:22",
															"nodeType": "YulAssignment",
															"src": "2069:11:22",
															"value": {
																"name": "ptr",
																"nativeSrc": "2077:3:22",
																"nodeType": "YulIdentifier",
																"src": "2077:3:22"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "2069:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "2069:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2097:1:22",
																		"nodeType": "YulLiteral",
																		"src": "2097:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nativeSrc": "2100:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "2100:3:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2090:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "2090:6:22"
																},
																"nativeSrc": "2090:14:22",
																"nodeType": "YulFunctionCall",
																"src": "2090:14:22"
															},
															"nativeSrc": "2090:14:22",
															"nodeType": "YulExpressionStatement",
															"src": "2090:14:22"
														},
														{
															"nativeSrc": "2113:26:22",
															"nodeType": "YulAssignment",
															"src": "2113:26:22",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "2131:1:22",
																		"nodeType": "YulLiteral",
																		"src": "2131:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2134:4:22",
																		"nodeType": "YulLiteral",
																		"src": "2134:4:22",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "2121:9:22",
																	"nodeType": "YulIdentifier",
																	"src": "2121:9:22"
																},
																"nativeSrc": "2121:18:22",
																"nodeType": "YulFunctionCall",
																"src": "2121:18:22"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "2113:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "2113:4:22"
																}
															]
														}
													]
												},
												"name": "array_dataslot_t_string_storage",
												"nativeSrc": "2005:141:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nativeSrc": "2046:3:22",
														"nodeType": "YulTypedName",
														"src": "2046:3:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nativeSrc": "2054:4:22",
														"nodeType": "YulTypedName",
														"src": "2054:4:22",
														"type": ""
													}
												],
												"src": "2005:141:22"
											},
											{
												"body": {
													"nativeSrc": "2196:49:22",
													"nodeType": "YulBlock",
													"src": "2196:49:22",
													"statements": [
														{
															"nativeSrc": "2206:33:22",
															"nodeType": "YulAssignment",
															"src": "2206:33:22",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "2224:5:22",
																				"nodeType": "YulIdentifier",
																				"src": "2224:5:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2231:2:22",
																				"nodeType": "YulLiteral",
																				"src": "2231:2:22",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2220:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "2220:3:22"
																		},
																		"nativeSrc": "2220:14:22",
																		"nodeType": "YulFunctionCall",
																		"src": "2220:14:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2236:2:22",
																		"nodeType": "YulLiteral",
																		"src": "2236:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "2216:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "2216:3:22"
																},
																"nativeSrc": "2216:23:22",
																"nodeType": "YulFunctionCall",
																"src": "2216:23:22"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "2206:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "2206:6:22"
																}
															]
														}
													]
												},
												"name": "divide_by_32_ceil",
												"nativeSrc": "2152:93:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2179:5:22",
														"nodeType": "YulTypedName",
														"src": "2179:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "2189:6:22",
														"nodeType": "YulTypedName",
														"src": "2189:6:22",
														"type": ""
													}
												],
												"src": "2152:93:22"
											},
											{
												"body": {
													"nativeSrc": "2304:54:22",
													"nodeType": "YulBlock",
													"src": "2304:54:22",
													"statements": [
														{
															"nativeSrc": "2314:37:22",
															"nodeType": "YulAssignment",
															"src": "2314:37:22",
															"value": {
																"arguments": [
																	{
																		"name": "bits",
																		"nativeSrc": "2339:4:22",
																		"nodeType": "YulIdentifier",
																		"src": "2339:4:22"
																	},
																	{
																		"name": "value",
																		"nativeSrc": "2345:5:22",
																		"nodeType": "YulIdentifier",
																		"src": "2345:5:22"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nativeSrc": "2335:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "2335:3:22"
																},
																"nativeSrc": "2335:16:22",
																"nodeType": "YulFunctionCall",
																"src": "2335:16:22"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nativeSrc": "2314:8:22",
																	"nodeType": "YulIdentifier",
																	"src": "2314:8:22"
																}
															]
														}
													]
												},
												"name": "shift_left_dynamic",
												"nativeSrc": "2251:107:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "bits",
														"nativeSrc": "2279:4:22",
														"nodeType": "YulTypedName",
														"src": "2279:4:22",
														"type": ""
													},
													{
														"name": "value",
														"nativeSrc": "2285:5:22",
														"nodeType": "YulTypedName",
														"src": "2285:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nativeSrc": "2295:8:22",
														"nodeType": "YulTypedName",
														"src": "2295:8:22",
														"type": ""
													}
												],
												"src": "2251:107:22"
											},
											{
												"body": {
													"nativeSrc": "2440:317:22",
													"nodeType": "YulBlock",
													"src": "2440:317:22",
													"statements": [
														{
															"nativeSrc": "2450:35:22",
															"nodeType": "YulVariableDeclaration",
															"src": "2450:35:22",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBytes",
																		"nativeSrc": "2471:10:22",
																		"nodeType": "YulIdentifier",
																		"src": "2471:10:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2483:1:22",
																		"nodeType": "YulLiteral",
																		"src": "2483:1:22",
																		"type": "",
																		"value": "8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "2467:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "2467:3:22"
																},
																"nativeSrc": "2467:18:22",
																"nodeType": "YulFunctionCall",
																"src": "2467:18:22"
															},
															"variables": [
																{
																	"name": "shiftBits",
																	"nativeSrc": "2454:9:22",
																	"nodeType": "YulTypedName",
																	"src": "2454:9:22",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "2494:109:22",
															"nodeType": "YulVariableDeclaration",
															"src": "2494:109:22",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBits",
																		"nativeSrc": "2525:9:22",
																		"nodeType": "YulIdentifier",
																		"src": "2525:9:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2536:66:22",
																		"nodeType": "YulLiteral",
																		"src": "2536:66:22",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nativeSrc": "2506:18:22",
																	"nodeType": "YulIdentifier",
																	"src": "2506:18:22"
																},
																"nativeSrc": "2506:97:22",
																"nodeType": "YulFunctionCall",
																"src": "2506:97:22"
															},
															"variables": [
																{
																	"name": "mask",
																	"nativeSrc": "2498:4:22",
																	"nodeType": "YulTypedName",
																	"src": "2498:4:22",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "2612:51:22",
															"nodeType": "YulAssignment",
															"src": "2612:51:22",
															"value": {
																"arguments": [
																	{
																		"name": "shiftBits",
																		"nativeSrc": "2643:9:22",
																		"nodeType": "YulIdentifier",
																		"src": "2643:9:22"
																	},
																	{
																		"name": "toInsert",
																		"nativeSrc": "2654:8:22",
																		"nodeType": "YulIdentifier",
																		"src": "2654:8:22"
																	}
																],
																"functionName": {
																	"name": "shift_left_dynamic",
																	"nativeSrc": "2624:18:22",
																	"nodeType": "YulIdentifier",
																	"src": "2624:18:22"
																},
																"nativeSrc": "2624:39:22",
																"nodeType": "YulFunctionCall",
																"src": "2624:39:22"
															},
															"variableNames": [
																{
																	"name": "toInsert",
																	"nativeSrc": "2612:8:22",
																	"nodeType": "YulIdentifier",
																	"src": "2612:8:22"
																}
															]
														},
														{
															"nativeSrc": "2672:30:22",
															"nodeType": "YulAssignment",
															"src": "2672:30:22",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2685:5:22",
																		"nodeType": "YulIdentifier",
																		"src": "2685:5:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "mask",
																				"nativeSrc": "2696:4:22",
																				"nodeType": "YulIdentifier",
																				"src": "2696:4:22"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "2692:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "2692:3:22"
																		},
																		"nativeSrc": "2692:9:22",
																		"nodeType": "YulFunctionCall",
																		"src": "2692:9:22"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "2681:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "2681:3:22"
																},
																"nativeSrc": "2681:21:22",
																"nodeType": "YulFunctionCall",
																"src": "2681:21:22"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "2672:5:22",
																	"nodeType": "YulIdentifier",
																	"src": "2672:5:22"
																}
															]
														},
														{
															"nativeSrc": "2711:40:22",
															"nodeType": "YulAssignment",
															"src": "2711:40:22",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2724:5:22",
																		"nodeType": "YulIdentifier",
																		"src": "2724:5:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "toInsert",
																				"nativeSrc": "2735:8:22",
																				"nodeType": "YulIdentifier",
																				"src": "2735:8:22"
																			},
																			{
																				"name": "mask",
																				"nativeSrc": "2745:4:22",
																				"nodeType": "YulIdentifier",
																				"src": "2745:4:22"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "2731:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "2731:3:22"
																		},
																		"nativeSrc": "2731:19:22",
																		"nodeType": "YulFunctionCall",
																		"src": "2731:19:22"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "2721:2:22",
																	"nodeType": "YulIdentifier",
																	"src": "2721:2:22"
																},
																"nativeSrc": "2721:30:22",
																"nodeType": "YulFunctionCall",
																"src": "2721:30:22"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "2711:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "2711:6:22"
																}
															]
														}
													]
												},
												"name": "update_byte_slice_dynamic32",
												"nativeSrc": "2364:393:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2401:5:22",
														"nodeType": "YulTypedName",
														"src": "2401:5:22",
														"type": ""
													},
													{
														"name": "shiftBytes",
														"nativeSrc": "2408:10:22",
														"nodeType": "YulTypedName",
														"src": "2408:10:22",
														"type": ""
													},
													{
														"name": "toInsert",
														"nativeSrc": "2420:8:22",
														"nodeType": "YulTypedName",
														"src": "2420:8:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "2433:6:22",
														"nodeType": "YulTypedName",
														"src": "2433:6:22",
														"type": ""
													}
												],
												"src": "2364:393:22"
											},
											{
												"body": {
													"nativeSrc": "2808:32:22",
													"nodeType": "YulBlock",
													"src": "2808:32:22",
													"statements": [
														{
															"nativeSrc": "2818:16:22",
															"nodeType": "YulAssignment",
															"src": "2818:16:22",
															"value": {
																"name": "value",
																"nativeSrc": "2829:5:22",
																"nodeType": "YulIdentifier",
																"src": "2829:5:22"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "2818:7:22",
																	"nodeType": "YulIdentifier",
																	"src": "2818:7:22"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nativeSrc": "2763:77:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2790:5:22",
														"nodeType": "YulTypedName",
														"src": "2790:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "2800:7:22",
														"nodeType": "YulTypedName",
														"src": "2800:7:22",
														"type": ""
													}
												],
												"src": "2763:77:22"
											},
											{
												"body": {
													"nativeSrc": "2878:28:22",
													"nodeType": "YulBlock",
													"src": "2878:28:22",
													"statements": [
														{
															"nativeSrc": "2888:12:22",
															"nodeType": "YulAssignment",
															"src": "2888:12:22",
															"value": {
																"name": "value",
																"nativeSrc": "2895:5:22",
																"nodeType": "YulIdentifier",
																"src": "2895:5:22"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "2888:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "2888:3:22"
																}
															]
														}
													]
												},
												"name": "identity",
												"nativeSrc": "2846:60:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2864:5:22",
														"nodeType": "YulTypedName",
														"src": "2864:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "2874:3:22",
														"nodeType": "YulTypedName",
														"src": "2874:3:22",
														"type": ""
													}
												],
												"src": "2846:60:22"
											},
											{
												"body": {
													"nativeSrc": "2972:82:22",
													"nodeType": "YulBlock",
													"src": "2972:82:22",
													"statements": [
														{
															"nativeSrc": "2982:66:22",
															"nodeType": "YulAssignment",
															"src": "2982:66:22",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "3040:5:22",
																						"nodeType": "YulIdentifier",
																						"src": "3040:5:22"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nativeSrc": "3022:17:22",
																					"nodeType": "YulIdentifier",
																					"src": "3022:17:22"
																				},
																				"nativeSrc": "3022:24:22",
																				"nodeType": "YulFunctionCall",
																				"src": "3022:24:22"
																			}
																		],
																		"functionName": {
																			"name": "identity",
																			"nativeSrc": "3013:8:22",
																			"nodeType": "YulIdentifier",
																			"src": "3013:8:22"
																		},
																		"nativeSrc": "3013:34:22",
																		"nodeType": "YulFunctionCall",
																		"src": "3013:34:22"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "2995:17:22",
																	"nodeType": "YulIdentifier",
																	"src": "2995:17:22"
																},
																"nativeSrc": "2995:53:22",
																"nodeType": "YulFunctionCall",
																"src": "2995:53:22"
															},
															"variableNames": [
																{
																	"name": "converted",
																	"nativeSrc": "2982:9:22",
																	"nodeType": "YulIdentifier",
																	"src": "2982:9:22"
																}
															]
														}
													]
												},
												"name": "convert_t_uint256_to_t_uint256",
												"nativeSrc": "2912:142:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2952:5:22",
														"nodeType": "YulTypedName",
														"src": "2952:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "converted",
														"nativeSrc": "2962:9:22",
														"nodeType": "YulTypedName",
														"src": "2962:9:22",
														"type": ""
													}
												],
												"src": "2912:142:22"
											},
											{
												"body": {
													"nativeSrc": "3107:28:22",
													"nodeType": "YulBlock",
													"src": "3107:28:22",
													"statements": [
														{
															"nativeSrc": "3117:12:22",
															"nodeType": "YulAssignment",
															"src": "3117:12:22",
															"value": {
																"name": "value",
																"nativeSrc": "3124:5:22",
																"nodeType": "YulIdentifier",
																"src": "3124:5:22"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "3117:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "3117:3:22"
																}
															]
														}
													]
												},
												"name": "prepare_store_t_uint256",
												"nativeSrc": "3060:75:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3093:5:22",
														"nodeType": "YulTypedName",
														"src": "3093:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "3103:3:22",
														"nodeType": "YulTypedName",
														"src": "3103:3:22",
														"type": ""
													}
												],
												"src": "3060:75:22"
											},
											{
												"body": {
													"nativeSrc": "3217:193:22",
													"nodeType": "YulBlock",
													"src": "3217:193:22",
													"statements": [
														{
															"nativeSrc": "3227:63:22",
															"nodeType": "YulVariableDeclaration",
															"src": "3227:63:22",
															"value": {
																"arguments": [
																	{
																		"name": "value_0",
																		"nativeSrc": "3282:7:22",
																		"nodeType": "YulIdentifier",
																		"src": "3282:7:22"
																	}
																],
																"functionName": {
																	"name": "convert_t_uint256_to_t_uint256",
																	"nativeSrc": "3251:30:22",
																	"nodeType": "YulIdentifier",
																	"src": "3251:30:22"
																},
																"nativeSrc": "3251:39:22",
																"nodeType": "YulFunctionCall",
																"src": "3251:39:22"
															},
															"variables": [
																{
																	"name": "convertedValue_0",
																	"nativeSrc": "3231:16:22",
																	"nodeType": "YulTypedName",
																	"src": "3231:16:22",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "3306:4:22",
																		"nodeType": "YulIdentifier",
																		"src": "3306:4:22"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nativeSrc": "3346:4:22",
																						"nodeType": "YulIdentifier",
																						"src": "3346:4:22"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nativeSrc": "3340:5:22",
																					"nodeType": "YulIdentifier",
																					"src": "3340:5:22"
																				},
																				"nativeSrc": "3340:11:22",
																				"nodeType": "YulFunctionCall",
																				"src": "3340:11:22"
																			},
																			{
																				"name": "offset",
																				"nativeSrc": "3353:6:22",
																				"nodeType": "YulIdentifier",
																				"src": "3353:6:22"
																			},
																			{
																				"arguments": [
																					{
																						"name": "convertedValue_0",
																						"nativeSrc": "3385:16:22",
																						"nodeType": "YulIdentifier",
																						"src": "3385:16:22"
																					}
																				],
																				"functionName": {
																					"name": "prepare_store_t_uint256",
																					"nativeSrc": "3361:23:22",
																					"nodeType": "YulIdentifier",
																					"src": "3361:23:22"
																				},
																				"nativeSrc": "3361:41:22",
																				"nodeType": "YulFunctionCall",
																				"src": "3361:41:22"
																			}
																		],
																		"functionName": {
																			"name": "update_byte_slice_dynamic32",
																			"nativeSrc": "3312:27:22",
																			"nodeType": "YulIdentifier",
																			"src": "3312:27:22"
																		},
																		"nativeSrc": "3312:91:22",
																		"nodeType": "YulFunctionCall",
																		"src": "3312:91:22"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nativeSrc": "3299:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "3299:6:22"
																},
																"nativeSrc": "3299:105:22",
																"nodeType": "YulFunctionCall",
																"src": "3299:105:22"
															},
															"nativeSrc": "3299:105:22",
															"nodeType": "YulExpressionStatement",
															"src": "3299:105:22"
														}
													]
												},
												"name": "update_storage_value_t_uint256_to_t_uint256",
												"nativeSrc": "3141:269:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "3194:4:22",
														"nodeType": "YulTypedName",
														"src": "3194:4:22",
														"type": ""
													},
													{
														"name": "offset",
														"nativeSrc": "3200:6:22",
														"nodeType": "YulTypedName",
														"src": "3200:6:22",
														"type": ""
													},
													{
														"name": "value_0",
														"nativeSrc": "3208:7:22",
														"nodeType": "YulTypedName",
														"src": "3208:7:22",
														"type": ""
													}
												],
												"src": "3141:269:22"
											},
											{
												"body": {
													"nativeSrc": "3465:24:22",
													"nodeType": "YulBlock",
													"src": "3465:24:22",
													"statements": [
														{
															"nativeSrc": "3475:8:22",
															"nodeType": "YulAssignment",
															"src": "3475:8:22",
															"value": {
																"kind": "number",
																"nativeSrc": "3482:1:22",
																"nodeType": "YulLiteral",
																"src": "3482:1:22",
																"type": "",
																"value": "0"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nativeSrc": "3475:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "3475:3:22"
																}
															]
														}
													]
												},
												"name": "zero_value_for_split_t_uint256",
												"nativeSrc": "3416:73:22",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "ret",
														"nativeSrc": "3461:3:22",
														"nodeType": "YulTypedName",
														"src": "3461:3:22",
														"type": ""
													}
												],
												"src": "3416:73:22"
											},
											{
												"body": {
													"nativeSrc": "3548:136:22",
													"nodeType": "YulBlock",
													"src": "3548:136:22",
													"statements": [
														{
															"nativeSrc": "3558:46:22",
															"nodeType": "YulVariableDeclaration",
															"src": "3558:46:22",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "zero_value_for_split_t_uint256",
																	"nativeSrc": "3572:30:22",
																	"nodeType": "YulIdentifier",
																	"src": "3572:30:22"
																},
																"nativeSrc": "3572:32:22",
																"nodeType": "YulFunctionCall",
																"src": "3572:32:22"
															},
															"variables": [
																{
																	"name": "zero_0",
																	"nativeSrc": "3562:6:22",
																	"nodeType": "YulTypedName",
																	"src": "3562:6:22",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "3657:4:22",
																		"nodeType": "YulIdentifier",
																		"src": "3657:4:22"
																	},
																	{
																		"name": "offset",
																		"nativeSrc": "3663:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "3663:6:22"
																	},
																	{
																		"name": "zero_0",
																		"nativeSrc": "3671:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "3671:6:22"
																	}
																],
																"functionName": {
																	"name": "update_storage_value_t_uint256_to_t_uint256",
																	"nativeSrc": "3613:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "3613:43:22"
																},
																"nativeSrc": "3613:65:22",
																"nodeType": "YulFunctionCall",
																"src": "3613:65:22"
															},
															"nativeSrc": "3613:65:22",
															"nodeType": "YulExpressionStatement",
															"src": "3613:65:22"
														}
													]
												},
												"name": "storage_set_to_zero_t_uint256",
												"nativeSrc": "3495:189:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "3534:4:22",
														"nodeType": "YulTypedName",
														"src": "3534:4:22",
														"type": ""
													},
													{
														"name": "offset",
														"nativeSrc": "3540:6:22",
														"nodeType": "YulTypedName",
														"src": "3540:6:22",
														"type": ""
													}
												],
												"src": "3495:189:22"
											},
											{
												"body": {
													"nativeSrc": "3740:136:22",
													"nodeType": "YulBlock",
													"src": "3740:136:22",
													"statements": [
														{
															"body": {
																"nativeSrc": "3807:63:22",
																"nodeType": "YulBlock",
																"src": "3807:63:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "start",
																					"nativeSrc": "3851:5:22",
																					"nodeType": "YulIdentifier",
																					"src": "3851:5:22"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3858:1:22",
																					"nodeType": "YulLiteral",
																					"src": "3858:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "storage_set_to_zero_t_uint256",
																				"nativeSrc": "3821:29:22",
																				"nodeType": "YulIdentifier",
																				"src": "3821:29:22"
																			},
																			"nativeSrc": "3821:39:22",
																			"nodeType": "YulFunctionCall",
																			"src": "3821:39:22"
																		},
																		"nativeSrc": "3821:39:22",
																		"nodeType": "YulExpressionStatement",
																		"src": "3821:39:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "start",
																		"nativeSrc": "3760:5:22",
																		"nodeType": "YulIdentifier",
																		"src": "3760:5:22"
																	},
																	{
																		"name": "end",
																		"nativeSrc": "3767:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "3767:3:22"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "3757:2:22",
																	"nodeType": "YulIdentifier",
																	"src": "3757:2:22"
																},
																"nativeSrc": "3757:14:22",
																"nodeType": "YulFunctionCall",
																"src": "3757:14:22"
															},
															"nativeSrc": "3750:120:22",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "3772:26:22",
																"nodeType": "YulBlock",
																"src": "3772:26:22",
																"statements": [
																	{
																		"nativeSrc": "3774:22:22",
																		"nodeType": "YulAssignment",
																		"src": "3774:22:22",
																		"value": {
																			"arguments": [
																				{
																					"name": "start",
																					"nativeSrc": "3787:5:22",
																					"nodeType": "YulIdentifier",
																					"src": "3787:5:22"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3794:1:22",
																					"nodeType": "YulLiteral",
																					"src": "3794:1:22",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "3783:3:22",
																				"nodeType": "YulIdentifier",
																				"src": "3783:3:22"
																			},
																			"nativeSrc": "3783:13:22",
																			"nodeType": "YulFunctionCall",
																			"src": "3783:13:22"
																		},
																		"variableNames": [
																			{
																				"name": "start",
																				"nativeSrc": "3774:5:22",
																				"nodeType": "YulIdentifier",
																				"src": "3774:5:22"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "3754:2:22",
																"nodeType": "YulBlock",
																"src": "3754:2:22",
																"statements": []
															},
															"src": "3750:120:22"
														}
													]
												},
												"name": "clear_storage_range_t_bytes1",
												"nativeSrc": "3690:186:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "start",
														"nativeSrc": "3728:5:22",
														"nodeType": "YulTypedName",
														"src": "3728:5:22",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "3735:3:22",
														"nodeType": "YulTypedName",
														"src": "3735:3:22",
														"type": ""
													}
												],
												"src": "3690:186:22"
											},
											{
												"body": {
													"nativeSrc": "3961:464:22",
													"nodeType": "YulBlock",
													"src": "3961:464:22",
													"statements": [
														{
															"body": {
																"nativeSrc": "3987:431:22",
																"nodeType": "YulBlock",
																"src": "3987:431:22",
																"statements": [
																	{
																		"nativeSrc": "4001:54:22",
																		"nodeType": "YulVariableDeclaration",
																		"src": "4001:54:22",
																		"value": {
																			"arguments": [
																				{
																					"name": "array",
																					"nativeSrc": "4049:5:22",
																					"nodeType": "YulIdentifier",
																					"src": "4049:5:22"
																				}
																			],
																			"functionName": {
																				"name": "array_dataslot_t_string_storage",
																				"nativeSrc": "4017:31:22",
																				"nodeType": "YulIdentifier",
																				"src": "4017:31:22"
																			},
																			"nativeSrc": "4017:38:22",
																			"nodeType": "YulFunctionCall",
																			"src": "4017:38:22"
																		},
																		"variables": [
																			{
																				"name": "dataArea",
																				"nativeSrc": "4005:8:22",
																				"nodeType": "YulTypedName",
																				"src": "4005:8:22",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "4068:63:22",
																		"nodeType": "YulVariableDeclaration",
																		"src": "4068:63:22",
																		"value": {
																			"arguments": [
																				{
																					"name": "dataArea",
																					"nativeSrc": "4091:8:22",
																					"nodeType": "YulIdentifier",
																					"src": "4091:8:22"
																				},
																				{
																					"arguments": [
																						{
																							"name": "startIndex",
																							"nativeSrc": "4119:10:22",
																							"nodeType": "YulIdentifier",
																							"src": "4119:10:22"
																						}
																					],
																					"functionName": {
																						"name": "divide_by_32_ceil",
																						"nativeSrc": "4101:17:22",
																						"nodeType": "YulIdentifier",
																						"src": "4101:17:22"
																					},
																					"nativeSrc": "4101:29:22",
																					"nodeType": "YulFunctionCall",
																					"src": "4101:29:22"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "4087:3:22",
																				"nodeType": "YulIdentifier",
																				"src": "4087:3:22"
																			},
																			"nativeSrc": "4087:44:22",
																			"nodeType": "YulFunctionCall",
																			"src": "4087:44:22"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nativeSrc": "4072:11:22",
																				"nodeType": "YulTypedName",
																				"src": "4072:11:22",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "4288:27:22",
																			"nodeType": "YulBlock",
																			"src": "4288:27:22",
																			"statements": [
																				{
																					"nativeSrc": "4290:23:22",
																					"nodeType": "YulAssignment",
																					"src": "4290:23:22",
																					"value": {
																						"name": "dataArea",
																						"nativeSrc": "4305:8:22",
																						"nodeType": "YulIdentifier",
																						"src": "4305:8:22"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nativeSrc": "4290:11:22",
																							"nodeType": "YulIdentifier",
																							"src": "4290:11:22"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nativeSrc": "4272:10:22",
																					"nodeType": "YulIdentifier",
																					"src": "4272:10:22"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4284:2:22",
																					"nodeType": "YulLiteral",
																					"src": "4284:2:22",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nativeSrc": "4269:2:22",
																				"nodeType": "YulIdentifier",
																				"src": "4269:2:22"
																			},
																			"nativeSrc": "4269:18:22",
																			"nodeType": "YulFunctionCall",
																			"src": "4269:18:22"
																		},
																		"nativeSrc": "4266:49:22",
																		"nodeType": "YulIf",
																		"src": "4266:49:22"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "deleteStart",
																					"nativeSrc": "4357:11:22",
																					"nodeType": "YulIdentifier",
																					"src": "4357:11:22"
																				},
																				{
																					"arguments": [
																						{
																							"name": "dataArea",
																							"nativeSrc": "4374:8:22",
																							"nodeType": "YulIdentifier",
																							"src": "4374:8:22"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nativeSrc": "4402:3:22",
																									"nodeType": "YulIdentifier",
																									"src": "4402:3:22"
																								}
																							],
																							"functionName": {
																								"name": "divide_by_32_ceil",
																								"nativeSrc": "4384:17:22",
																								"nodeType": "YulIdentifier",
																								"src": "4384:17:22"
																							},
																							"nativeSrc": "4384:22:22",
																							"nodeType": "YulFunctionCall",
																							"src": "4384:22:22"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "4370:3:22",
																						"nodeType": "YulIdentifier",
																						"src": "4370:3:22"
																					},
																					"nativeSrc": "4370:37:22",
																					"nodeType": "YulFunctionCall",
																					"src": "4370:37:22"
																				}
																			],
																			"functionName": {
																				"name": "clear_storage_range_t_bytes1",
																				"nativeSrc": "4328:28:22",
																				"nodeType": "YulIdentifier",
																				"src": "4328:28:22"
																			},
																			"nativeSrc": "4328:80:22",
																			"nodeType": "YulFunctionCall",
																			"src": "4328:80:22"
																		},
																		"nativeSrc": "4328:80:22",
																		"nodeType": "YulExpressionStatement",
																		"src": "4328:80:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nativeSrc": "3978:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "3978:3:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3983:2:22",
																		"nodeType": "YulLiteral",
																		"src": "3983:2:22",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "3975:2:22",
																	"nodeType": "YulIdentifier",
																	"src": "3975:2:22"
																},
																"nativeSrc": "3975:11:22",
																"nodeType": "YulFunctionCall",
																"src": "3975:11:22"
															},
															"nativeSrc": "3972:446:22",
															"nodeType": "YulIf",
															"src": "3972:446:22"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_t_string_storage",
												"nativeSrc": "3882:543:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nativeSrc": "3937:5:22",
														"nodeType": "YulTypedName",
														"src": "3937:5:22",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "3944:3:22",
														"nodeType": "YulTypedName",
														"src": "3944:3:22",
														"type": ""
													},
													{
														"name": "startIndex",
														"nativeSrc": "3949:10:22",
														"nodeType": "YulTypedName",
														"src": "3949:10:22",
														"type": ""
													}
												],
												"src": "3882:543:22"
											},
											{
												"body": {
													"nativeSrc": "4494:54:22",
													"nodeType": "YulBlock",
													"src": "4494:54:22",
													"statements": [
														{
															"nativeSrc": "4504:37:22",
															"nodeType": "YulAssignment",
															"src": "4504:37:22",
															"value": {
																"arguments": [
																	{
																		"name": "bits",
																		"nativeSrc": "4529:4:22",
																		"nodeType": "YulIdentifier",
																		"src": "4529:4:22"
																	},
																	{
																		"name": "value",
																		"nativeSrc": "4535:5:22",
																		"nodeType": "YulIdentifier",
																		"src": "4535:5:22"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "4525:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "4525:3:22"
																},
																"nativeSrc": "4525:16:22",
																"nodeType": "YulFunctionCall",
																"src": "4525:16:22"
															},
															"variableNames": [
																{
																	"name": "newValue",
																	"nativeSrc": "4504:8:22",
																	"nodeType": "YulIdentifier",
																	"src": "4504:8:22"
																}
															]
														}
													]
												},
												"name": "shift_right_unsigned_dynamic",
												"nativeSrc": "4431:117:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "bits",
														"nativeSrc": "4469:4:22",
														"nodeType": "YulTypedName",
														"src": "4469:4:22",
														"type": ""
													},
													{
														"name": "value",
														"nativeSrc": "4475:5:22",
														"nodeType": "YulTypedName",
														"src": "4475:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "newValue",
														"nativeSrc": "4485:8:22",
														"nodeType": "YulTypedName",
														"src": "4485:8:22",
														"type": ""
													}
												],
												"src": "4431:117:22"
											},
											{
												"body": {
													"nativeSrc": "4605:118:22",
													"nodeType": "YulBlock",
													"src": "4605:118:22",
													"statements": [
														{
															"nativeSrc": "4615:68:22",
															"nodeType": "YulVariableDeclaration",
															"src": "4615:68:22",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "4664:1:22",
																						"nodeType": "YulLiteral",
																						"src": "4664:1:22",
																						"type": "",
																						"value": "8"
																					},
																					{
																						"name": "bytes",
																						"nativeSrc": "4667:5:22",
																						"nodeType": "YulIdentifier",
																						"src": "4667:5:22"
																					}
																				],
																				"functionName": {
																					"name": "mul",
																					"nativeSrc": "4660:3:22",
																					"nodeType": "YulIdentifier",
																					"src": "4660:3:22"
																				},
																				"nativeSrc": "4660:13:22",
																				"nodeType": "YulFunctionCall",
																				"src": "4660:13:22"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "4679:1:22",
																						"nodeType": "YulLiteral",
																						"src": "4679:1:22",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "4675:3:22",
																					"nodeType": "YulIdentifier",
																					"src": "4675:3:22"
																				},
																				"nativeSrc": "4675:6:22",
																				"nodeType": "YulFunctionCall",
																				"src": "4675:6:22"
																			}
																		],
																		"functionName": {
																			"name": "shift_right_unsigned_dynamic",
																			"nativeSrc": "4631:28:22",
																			"nodeType": "YulIdentifier",
																			"src": "4631:28:22"
																		},
																		"nativeSrc": "4631:51:22",
																		"nodeType": "YulFunctionCall",
																		"src": "4631:51:22"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nativeSrc": "4627:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "4627:3:22"
																},
																"nativeSrc": "4627:56:22",
																"nodeType": "YulFunctionCall",
																"src": "4627:56:22"
															},
															"variables": [
																{
																	"name": "mask",
																	"nativeSrc": "4619:4:22",
																	"nodeType": "YulTypedName",
																	"src": "4619:4:22",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4692:25:22",
															"nodeType": "YulAssignment",
															"src": "4692:25:22",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "4706:4:22",
																		"nodeType": "YulIdentifier",
																		"src": "4706:4:22"
																	},
																	{
																		"name": "mask",
																		"nativeSrc": "4712:4:22",
																		"nodeType": "YulIdentifier",
																		"src": "4712:4:22"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "4702:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "4702:3:22"
																},
																"nativeSrc": "4702:15:22",
																"nodeType": "YulFunctionCall",
																"src": "4702:15:22"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "4692:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "4692:6:22"
																}
															]
														}
													]
												},
												"name": "mask_bytes_dynamic",
												"nativeSrc": "4554:169:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "4582:4:22",
														"nodeType": "YulTypedName",
														"src": "4582:4:22",
														"type": ""
													},
													{
														"name": "bytes",
														"nativeSrc": "4588:5:22",
														"nodeType": "YulTypedName",
														"src": "4588:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "4598:6:22",
														"nodeType": "YulTypedName",
														"src": "4598:6:22",
														"type": ""
													}
												],
												"src": "4554:169:22"
											},
											{
												"body": {
													"nativeSrc": "4809:214:22",
													"nodeType": "YulBlock",
													"src": "4809:214:22",
													"statements": [
														{
															"nativeSrc": "4942:37:22",
															"nodeType": "YulAssignment",
															"src": "4942:37:22",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "4969:4:22",
																		"nodeType": "YulIdentifier",
																		"src": "4969:4:22"
																	},
																	{
																		"name": "len",
																		"nativeSrc": "4975:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "4975:3:22"
																	}
																],
																"functionName": {
																	"name": "mask_bytes_dynamic",
																	"nativeSrc": "4950:18:22",
																	"nodeType": "YulIdentifier",
																	"src": "4950:18:22"
																},
																"nativeSrc": "4950:29:22",
																"nodeType": "YulFunctionCall",
																"src": "4950:29:22"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "4942:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "4942:4:22"
																}
															]
														},
														{
															"nativeSrc": "4988:29:22",
															"nodeType": "YulAssignment",
															"src": "4988:29:22",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "4999:4:22",
																		"nodeType": "YulIdentifier",
																		"src": "4999:4:22"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "5009:1:22",
																				"nodeType": "YulLiteral",
																				"src": "5009:1:22",
																				"type": "",
																				"value": "2"
																			},
																			{
																				"name": "len",
																				"nativeSrc": "5012:3:22",
																				"nodeType": "YulIdentifier",
																				"src": "5012:3:22"
																			}
																		],
																		"functionName": {
																			"name": "mul",
																			"nativeSrc": "5005:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "5005:3:22"
																		},
																		"nativeSrc": "5005:11:22",
																		"nodeType": "YulFunctionCall",
																		"src": "5005:11:22"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "4996:2:22",
																	"nodeType": "YulIdentifier",
																	"src": "4996:2:22"
																},
																"nativeSrc": "4996:21:22",
																"nodeType": "YulFunctionCall",
																"src": "4996:21:22"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nativeSrc": "4988:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "4988:4:22"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nativeSrc": "4728:295:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "4790:4:22",
														"nodeType": "YulTypedName",
														"src": "4790:4:22",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "4796:3:22",
														"nodeType": "YulTypedName",
														"src": "4796:3:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nativeSrc": "4804:4:22",
														"nodeType": "YulTypedName",
														"src": "4804:4:22",
														"type": ""
													}
												],
												"src": "4728:295:22"
											},
											{
												"body": {
													"nativeSrc": "5120:1303:22",
													"nodeType": "YulBlock",
													"src": "5120:1303:22",
													"statements": [
														{
															"nativeSrc": "5131:51:22",
															"nodeType": "YulVariableDeclaration",
															"src": "5131:51:22",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nativeSrc": "5178:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "5178:3:22"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nativeSrc": "5145:32:22",
																	"nodeType": "YulIdentifier",
																	"src": "5145:32:22"
																},
																"nativeSrc": "5145:37:22",
																"nodeType": "YulFunctionCall",
																"src": "5145:37:22"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nativeSrc": "5135:6:22",
																	"nodeType": "YulTypedName",
																	"src": "5135:6:22",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "5267:22:22",
																"nodeType": "YulBlock",
																"src": "5267:22:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "5269:16:22",
																				"nodeType": "YulIdentifier",
																				"src": "5269:16:22"
																			},
																			"nativeSrc": "5269:18:22",
																			"nodeType": "YulFunctionCall",
																			"src": "5269:18:22"
																		},
																		"nativeSrc": "5269:18:22",
																		"nodeType": "YulExpressionStatement",
																		"src": "5269:18:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "5239:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "5239:6:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5247:18:22",
																		"nodeType": "YulLiteral",
																		"src": "5247:18:22",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "5236:2:22",
																	"nodeType": "YulIdentifier",
																	"src": "5236:2:22"
																},
																"nativeSrc": "5236:30:22",
																"nodeType": "YulFunctionCall",
																"src": "5236:30:22"
															},
															"nativeSrc": "5233:56:22",
															"nodeType": "YulIf",
															"src": "5233:56:22"
														},
														{
															"nativeSrc": "5299:52:22",
															"nodeType": "YulVariableDeclaration",
															"src": "5299:52:22",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "slot",
																				"nativeSrc": "5345:4:22",
																				"nodeType": "YulIdentifier",
																				"src": "5345:4:22"
																			}
																		],
																		"functionName": {
																			"name": "sload",
																			"nativeSrc": "5339:5:22",
																			"nodeType": "YulIdentifier",
																			"src": "5339:5:22"
																		},
																		"nativeSrc": "5339:11:22",
																		"nodeType": "YulFunctionCall",
																		"src": "5339:11:22"
																	}
																],
																"functionName": {
																	"name": "extract_byte_array_length",
																	"nativeSrc": "5313:25:22",
																	"nodeType": "YulIdentifier",
																	"src": "5313:25:22"
																},
																"nativeSrc": "5313:38:22",
																"nodeType": "YulFunctionCall",
																"src": "5313:38:22"
															},
															"variables": [
																{
																	"name": "oldLen",
																	"nativeSrc": "5303:6:22",
																	"nodeType": "YulTypedName",
																	"src": "5303:6:22",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "5444:4:22",
																		"nodeType": "YulIdentifier",
																		"src": "5444:4:22"
																	},
																	{
																		"name": "oldLen",
																		"nativeSrc": "5450:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "5450:6:22"
																	},
																	{
																		"name": "newLen",
																		"nativeSrc": "5458:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "5458:6:22"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_t_string_storage",
																	"nativeSrc": "5398:45:22",
																	"nodeType": "YulIdentifier",
																	"src": "5398:45:22"
																},
																"nativeSrc": "5398:67:22",
																"nodeType": "YulFunctionCall",
																"src": "5398:67:22"
															},
															"nativeSrc": "5398:67:22",
															"nodeType": "YulExpressionStatement",
															"src": "5398:67:22"
														},
														{
															"nativeSrc": "5475:18:22",
															"nodeType": "YulVariableDeclaration",
															"src": "5475:18:22",
															"value": {
																"kind": "number",
																"nativeSrc": "5492:1:22",
																"nodeType": "YulLiteral",
																"src": "5492:1:22",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "5479:9:22",
																	"nodeType": "YulTypedName",
																	"src": "5479:9:22",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "5503:17:22",
															"nodeType": "YulAssignment",
															"src": "5503:17:22",
															"value": {
																"kind": "number",
																"nativeSrc": "5516:4:22",
																"nodeType": "YulLiteral",
																"src": "5516:4:22",
																"type": "",
																"value": "0x20"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "5503:9:22",
																	"nodeType": "YulIdentifier",
																	"src": "5503:9:22"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "5567:611:22",
																		"nodeType": "YulBlock",
																		"src": "5567:611:22",
																		"statements": [
																			{
																				"nativeSrc": "5581:37:22",
																				"nodeType": "YulVariableDeclaration",
																				"src": "5581:37:22",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nativeSrc": "5600:6:22",
																							"nodeType": "YulIdentifier",
																							"src": "5600:6:22"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "5612:4:22",
																									"nodeType": "YulLiteral",
																									"src": "5612:4:22",
																									"type": "",
																									"value": "0x1f"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "5608:3:22",
																								"nodeType": "YulIdentifier",
																								"src": "5608:3:22"
																							},
																							"nativeSrc": "5608:9:22",
																							"nodeType": "YulFunctionCall",
																							"src": "5608:9:22"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nativeSrc": "5596:3:22",
																						"nodeType": "YulIdentifier",
																						"src": "5596:3:22"
																					},
																					"nativeSrc": "5596:22:22",
																					"nodeType": "YulFunctionCall",
																					"src": "5596:22:22"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nativeSrc": "5585:7:22",
																						"nodeType": "YulTypedName",
																						"src": "5585:7:22",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "5632:51:22",
																				"nodeType": "YulVariableDeclaration",
																				"src": "5632:51:22",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "5678:4:22",
																							"nodeType": "YulIdentifier",
																							"src": "5678:4:22"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_t_string_storage",
																						"nativeSrc": "5646:31:22",
																						"nodeType": "YulIdentifier",
																						"src": "5646:31:22"
																					},
																					"nativeSrc": "5646:37:22",
																					"nodeType": "YulFunctionCall",
																					"src": "5646:37:22"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nativeSrc": "5636:6:22",
																						"nodeType": "YulTypedName",
																						"src": "5636:6:22",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "5696:10:22",
																				"nodeType": "YulVariableDeclaration",
																				"src": "5696:10:22",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "5705:1:22",
																					"nodeType": "YulLiteral",
																					"src": "5705:1:22",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nativeSrc": "5700:1:22",
																						"nodeType": "YulTypedName",
																						"src": "5700:1:22",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "5764:163:22",
																					"nodeType": "YulBlock",
																					"src": "5764:163:22",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "5789:6:22",
																										"nodeType": "YulIdentifier",
																										"src": "5789:6:22"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nativeSrc": "5807:3:22",
																														"nodeType": "YulIdentifier",
																														"src": "5807:3:22"
																													},
																													{
																														"name": "srcOffset",
																														"nativeSrc": "5812:9:22",
																														"nodeType": "YulIdentifier",
																														"src": "5812:9:22"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nativeSrc": "5803:3:22",
																													"nodeType": "YulIdentifier",
																													"src": "5803:3:22"
																												},
																												"nativeSrc": "5803:19:22",
																												"nodeType": "YulFunctionCall",
																												"src": "5803:19:22"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nativeSrc": "5797:5:22",
																											"nodeType": "YulIdentifier",
																											"src": "5797:5:22"
																										},
																										"nativeSrc": "5797:26:22",
																										"nodeType": "YulFunctionCall",
																										"src": "5797:26:22"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "5782:6:22",
																									"nodeType": "YulIdentifier",
																									"src": "5782:6:22"
																								},
																								"nativeSrc": "5782:42:22",
																								"nodeType": "YulFunctionCall",
																								"src": "5782:42:22"
																							},
																							"nativeSrc": "5782:42:22",
																							"nodeType": "YulExpressionStatement",
																							"src": "5782:42:22"
																						},
																						{
																							"nativeSrc": "5841:24:22",
																							"nodeType": "YulAssignment",
																							"src": "5841:24:22",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "5855:6:22",
																										"nodeType": "YulIdentifier",
																										"src": "5855:6:22"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "5863:1:22",
																										"nodeType": "YulLiteral",
																										"src": "5863:1:22",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "5851:3:22",
																									"nodeType": "YulIdentifier",
																									"src": "5851:3:22"
																								},
																								"nativeSrc": "5851:14:22",
																								"nodeType": "YulFunctionCall",
																								"src": "5851:14:22"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nativeSrc": "5841:6:22",
																									"nodeType": "YulIdentifier",
																									"src": "5841:6:22"
																								}
																							]
																						},
																						{
																							"nativeSrc": "5882:31:22",
																							"nodeType": "YulAssignment",
																							"src": "5882:31:22",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nativeSrc": "5899:9:22",
																										"nodeType": "YulIdentifier",
																										"src": "5899:9:22"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "5910:2:22",
																										"nodeType": "YulLiteral",
																										"src": "5910:2:22",
																										"type": "",
																										"value": "32"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "5895:3:22",
																									"nodeType": "YulIdentifier",
																									"src": "5895:3:22"
																								},
																								"nativeSrc": "5895:18:22",
																								"nodeType": "YulFunctionCall",
																								"src": "5895:18:22"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nativeSrc": "5882:9:22",
																									"nodeType": "YulIdentifier",
																									"src": "5882:9:22"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nativeSrc": "5730:1:22",
																							"nodeType": "YulIdentifier",
																							"src": "5730:1:22"
																						},
																						{
																							"name": "loopEnd",
																							"nativeSrc": "5733:7:22",
																							"nodeType": "YulIdentifier",
																							"src": "5733:7:22"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "5727:2:22",
																						"nodeType": "YulIdentifier",
																						"src": "5727:2:22"
																					},
																					"nativeSrc": "5727:14:22",
																					"nodeType": "YulFunctionCall",
																					"src": "5727:14:22"
																				},
																				"nativeSrc": "5719:208:22",
																				"nodeType": "YulForLoop",
																				"post": {
																					"nativeSrc": "5742:21:22",
																					"nodeType": "YulBlock",
																					"src": "5742:21:22",
																					"statements": [
																						{
																							"nativeSrc": "5744:17:22",
																							"nodeType": "YulAssignment",
																							"src": "5744:17:22",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nativeSrc": "5753:1:22",
																										"nodeType": "YulIdentifier",
																										"src": "5753:1:22"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "5756:4:22",
																										"nodeType": "YulLiteral",
																										"src": "5756:4:22",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "5749:3:22",
																									"nodeType": "YulIdentifier",
																									"src": "5749:3:22"
																								},
																								"nativeSrc": "5749:12:22",
																								"nodeType": "YulFunctionCall",
																								"src": "5749:12:22"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nativeSrc": "5744:1:22",
																									"nodeType": "YulIdentifier",
																									"src": "5744:1:22"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nativeSrc": "5723:3:22",
																					"nodeType": "YulBlock",
																					"src": "5723:3:22",
																					"statements": []
																				},
																				"src": "5719:208:22"
																			},
																			{
																				"body": {
																					"nativeSrc": "5963:156:22",
																					"nodeType": "YulBlock",
																					"src": "5963:156:22",
																					"statements": [
																						{
																							"nativeSrc": "5981:43:22",
																							"nodeType": "YulVariableDeclaration",
																							"src": "5981:43:22",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "6008:3:22",
																												"nodeType": "YulIdentifier",
																												"src": "6008:3:22"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "6013:9:22",
																												"nodeType": "YulIdentifier",
																												"src": "6013:9:22"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "6004:3:22",
																											"nodeType": "YulIdentifier",
																											"src": "6004:3:22"
																										},
																										"nativeSrc": "6004:19:22",
																										"nodeType": "YulFunctionCall",
																										"src": "6004:19:22"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "5998:5:22",
																									"nodeType": "YulIdentifier",
																									"src": "5998:5:22"
																								},
																								"nativeSrc": "5998:26:22",
																								"nodeType": "YulFunctionCall",
																								"src": "5998:26:22"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nativeSrc": "5985:9:22",
																									"nodeType": "YulTypedName",
																									"src": "5985:9:22",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "6048:6:22",
																										"nodeType": "YulIdentifier",
																										"src": "6048:6:22"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nativeSrc": "6075:9:22",
																												"nodeType": "YulIdentifier",
																												"src": "6075:9:22"
																											},
																											{
																												"arguments": [
																													{
																														"name": "newLen",
																														"nativeSrc": "6090:6:22",
																														"nodeType": "YulIdentifier",
																														"src": "6090:6:22"
																													},
																													{
																														"kind": "number",
																														"nativeSrc": "6098:4:22",
																														"nodeType": "YulLiteral",
																														"src": "6098:4:22",
																														"type": "",
																														"value": "0x1f"
																													}
																												],
																												"functionName": {
																													"name": "and",
																													"nativeSrc": "6086:3:22",
																													"nodeType": "YulIdentifier",
																													"src": "6086:3:22"
																												},
																												"nativeSrc": "6086:17:22",
																												"nodeType": "YulFunctionCall",
																												"src": "6086:17:22"
																											}
																										],
																										"functionName": {
																											"name": "mask_bytes_dynamic",
																											"nativeSrc": "6056:18:22",
																											"nodeType": "YulIdentifier",
																											"src": "6056:18:22"
																										},
																										"nativeSrc": "6056:48:22",
																										"nodeType": "YulFunctionCall",
																										"src": "6056:48:22"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "6041:6:22",
																									"nodeType": "YulIdentifier",
																									"src": "6041:6:22"
																								},
																								"nativeSrc": "6041:64:22",
																								"nodeType": "YulFunctionCall",
																								"src": "6041:64:22"
																							},
																							"nativeSrc": "6041:64:22",
																							"nodeType": "YulExpressionStatement",
																							"src": "6041:64:22"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nativeSrc": "5946:7:22",
																							"nodeType": "YulIdentifier",
																							"src": "5946:7:22"
																						},
																						{
																							"name": "newLen",
																							"nativeSrc": "5955:6:22",
																							"nodeType": "YulIdentifier",
																							"src": "5955:6:22"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "5943:2:22",
																						"nodeType": "YulIdentifier",
																						"src": "5943:2:22"
																					},
																					"nativeSrc": "5943:19:22",
																					"nodeType": "YulFunctionCall",
																					"src": "5943:19:22"
																				},
																				"nativeSrc": "5940:179:22",
																				"nodeType": "YulIf",
																				"src": "5940:179:22"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "6139:4:22",
																							"nodeType": "YulIdentifier",
																							"src": "6139:4:22"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "newLen",
																											"nativeSrc": "6153:6:22",
																											"nodeType": "YulIdentifier",
																											"src": "6153:6:22"
																										},
																										{
																											"kind": "number",
																											"nativeSrc": "6161:1:22",
																											"nodeType": "YulLiteral",
																											"src": "6161:1:22",
																											"type": "",
																											"value": "2"
																										}
																									],
																									"functionName": {
																										"name": "mul",
																										"nativeSrc": "6149:3:22",
																										"nodeType": "YulIdentifier",
																										"src": "6149:3:22"
																									},
																									"nativeSrc": "6149:14:22",
																									"nodeType": "YulFunctionCall",
																									"src": "6149:14:22"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "6165:1:22",
																									"nodeType": "YulLiteral",
																									"src": "6165:1:22",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "6145:3:22",
																								"nodeType": "YulIdentifier",
																								"src": "6145:3:22"
																							},
																							"nativeSrc": "6145:22:22",
																							"nodeType": "YulFunctionCall",
																							"src": "6145:22:22"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "6132:6:22",
																						"nodeType": "YulIdentifier",
																						"src": "6132:6:22"
																					},
																					"nativeSrc": "6132:36:22",
																					"nodeType": "YulFunctionCall",
																					"src": "6132:36:22"
																				},
																				"nativeSrc": "6132:36:22",
																				"nodeType": "YulExpressionStatement",
																				"src": "6132:36:22"
																			}
																		]
																	},
																	"nativeSrc": "5560:618:22",
																	"nodeType": "YulCase",
																	"src": "5560:618:22",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "5565:1:22",
																		"nodeType": "YulLiteral",
																		"src": "5565:1:22",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "6195:222:22",
																		"nodeType": "YulBlock",
																		"src": "6195:222:22",
																		"statements": [
																			{
																				"nativeSrc": "6209:14:22",
																				"nodeType": "YulVariableDeclaration",
																				"src": "6209:14:22",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "6222:1:22",
																					"nodeType": "YulLiteral",
																					"src": "6222:1:22",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nativeSrc": "6213:5:22",
																						"nodeType": "YulTypedName",
																						"src": "6213:5:22",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "6246:67:22",
																					"nodeType": "YulBlock",
																					"src": "6246:67:22",
																					"statements": [
																						{
																							"nativeSrc": "6264:35:22",
																							"nodeType": "YulAssignment",
																							"src": "6264:35:22",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "6283:3:22",
																												"nodeType": "YulIdentifier",
																												"src": "6283:3:22"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "6288:9:22",
																												"nodeType": "YulIdentifier",
																												"src": "6288:9:22"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "6279:3:22",
																											"nodeType": "YulIdentifier",
																											"src": "6279:3:22"
																										},
																										"nativeSrc": "6279:19:22",
																										"nodeType": "YulFunctionCall",
																										"src": "6279:19:22"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "6273:5:22",
																									"nodeType": "YulIdentifier",
																									"src": "6273:5:22"
																								},
																								"nativeSrc": "6273:26:22",
																								"nodeType": "YulFunctionCall",
																								"src": "6273:26:22"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nativeSrc": "6264:5:22",
																									"nodeType": "YulIdentifier",
																									"src": "6264:5:22"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nativeSrc": "6239:6:22",
																					"nodeType": "YulIdentifier",
																					"src": "6239:6:22"
																				},
																				"nativeSrc": "6236:77:22",
																				"nodeType": "YulIf",
																				"src": "6236:77:22"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "6333:4:22",
																							"nodeType": "YulIdentifier",
																							"src": "6333:4:22"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nativeSrc": "6392:5:22",
																									"nodeType": "YulIdentifier",
																									"src": "6392:5:22"
																								},
																								{
																									"name": "newLen",
																									"nativeSrc": "6399:6:22",
																									"nodeType": "YulIdentifier",
																									"src": "6399:6:22"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nativeSrc": "6339:52:22",
																								"nodeType": "YulIdentifier",
																								"src": "6339:52:22"
																							},
																							"nativeSrc": "6339:67:22",
																							"nodeType": "YulFunctionCall",
																							"src": "6339:67:22"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "6326:6:22",
																						"nodeType": "YulIdentifier",
																						"src": "6326:6:22"
																					},
																					"nativeSrc": "6326:81:22",
																					"nodeType": "YulFunctionCall",
																					"src": "6326:81:22"
																				},
																				"nativeSrc": "6326:81:22",
																				"nodeType": "YulExpressionStatement",
																				"src": "6326:81:22"
																			}
																		]
																	},
																	"nativeSrc": "6187:230:22",
																	"nodeType": "YulCase",
																	"src": "6187:230:22",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "5540:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "5540:6:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5548:2:22",
																		"nodeType": "YulLiteral",
																		"src": "5548:2:22",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "5537:2:22",
																	"nodeType": "YulIdentifier",
																	"src": "5537:2:22"
																},
																"nativeSrc": "5537:14:22",
																"nodeType": "YulFunctionCall",
																"src": "5537:14:22"
															},
															"nativeSrc": "5530:887:22",
															"nodeType": "YulSwitch",
															"src": "5530:887:22"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nativeSrc": "5028:1395:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "5109:4:22",
														"nodeType": "YulTypedName",
														"src": "5109:4:22",
														"type": ""
													},
													{
														"name": "src",
														"nativeSrc": "5115:3:22",
														"nodeType": "YulTypedName",
														"src": "5115:3:22",
														"type": ""
													}
												],
												"src": "5028:1395:22"
											},
											{
												"body": {
													"nativeSrc": "6494:53:22",
													"nodeType": "YulBlock",
													"src": "6494:53:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "6511:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "6511:3:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "6534:5:22",
																				"nodeType": "YulIdentifier",
																				"src": "6534:5:22"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nativeSrc": "6516:17:22",
																			"nodeType": "YulIdentifier",
																			"src": "6516:17:22"
																		},
																		"nativeSrc": "6516:24:22",
																		"nodeType": "YulFunctionCall",
																		"src": "6516:24:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6504:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "6504:6:22"
																},
																"nativeSrc": "6504:37:22",
																"nodeType": "YulFunctionCall",
																"src": "6504:37:22"
															},
															"nativeSrc": "6504:37:22",
															"nodeType": "YulExpressionStatement",
															"src": "6504:37:22"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "6429:118:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6482:5:22",
														"nodeType": "YulTypedName",
														"src": "6482:5:22",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "6489:3:22",
														"nodeType": "YulTypedName",
														"src": "6489:3:22",
														"type": ""
													}
												],
												"src": "6429:118:22"
											},
											{
												"body": {
													"nativeSrc": "6651:124:22",
													"nodeType": "YulBlock",
													"src": "6651:124:22",
													"statements": [
														{
															"nativeSrc": "6661:26:22",
															"nodeType": "YulAssignment",
															"src": "6661:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6673:9:22",
																		"nodeType": "YulIdentifier",
																		"src": "6673:9:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6684:2:22",
																		"nodeType": "YulLiteral",
																		"src": "6684:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6669:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "6669:3:22"
																},
																"nativeSrc": "6669:18:22",
																"nodeType": "YulFunctionCall",
																"src": "6669:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "6661:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "6661:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "6741:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "6741:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6754:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "6754:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6765:1:22",
																				"nodeType": "YulLiteral",
																				"src": "6765:1:22",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6750:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "6750:3:22"
																		},
																		"nativeSrc": "6750:17:22",
																		"nodeType": "YulFunctionCall",
																		"src": "6750:17:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "6697:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "6697:43:22"
																},
																"nativeSrc": "6697:71:22",
																"nodeType": "YulFunctionCall",
																"src": "6697:71:22"
															},
															"nativeSrc": "6697:71:22",
															"nodeType": "YulExpressionStatement",
															"src": "6697:71:22"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "6553:222:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6623:9:22",
														"nodeType": "YulTypedName",
														"src": "6623:9:22",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "6635:6:22",
														"nodeType": "YulTypedName",
														"src": "6635:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "6646:4:22",
														"nodeType": "YulTypedName",
														"src": "6646:4:22",
														"type": ""
													}
												],
												"src": "6553:222:22"
											},
											{
												"body": {
													"nativeSrc": "6826:32:22",
													"nodeType": "YulBlock",
													"src": "6826:32:22",
													"statements": [
														{
															"nativeSrc": "6836:16:22",
															"nodeType": "YulAssignment",
															"src": "6836:16:22",
															"value": {
																"name": "value",
																"nativeSrc": "6847:5:22",
																"nodeType": "YulIdentifier",
																"src": "6847:5:22"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "6836:7:22",
																	"nodeType": "YulIdentifier",
																	"src": "6836:7:22"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes32",
												"nativeSrc": "6781:77:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6808:5:22",
														"nodeType": "YulTypedName",
														"src": "6808:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "6818:7:22",
														"nodeType": "YulTypedName",
														"src": "6818:7:22",
														"type": ""
													}
												],
												"src": "6781:77:22"
											},
											{
												"body": {
													"nativeSrc": "6929:53:22",
													"nodeType": "YulBlock",
													"src": "6929:53:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "6946:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "6946:3:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "6969:5:22",
																				"nodeType": "YulIdentifier",
																				"src": "6969:5:22"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bytes32",
																			"nativeSrc": "6951:17:22",
																			"nodeType": "YulIdentifier",
																			"src": "6951:17:22"
																		},
																		"nativeSrc": "6951:24:22",
																		"nodeType": "YulFunctionCall",
																		"src": "6951:24:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6939:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "6939:6:22"
																},
																"nativeSrc": "6939:37:22",
																"nodeType": "YulFunctionCall",
																"src": "6939:37:22"
															},
															"nativeSrc": "6939:37:22",
															"nodeType": "YulExpressionStatement",
															"src": "6939:37:22"
														}
													]
												},
												"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
												"nativeSrc": "6864:118:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6917:5:22",
														"nodeType": "YulTypedName",
														"src": "6917:5:22",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "6924:3:22",
														"nodeType": "YulTypedName",
														"src": "6924:3:22",
														"type": ""
													}
												],
												"src": "6864:118:22"
											},
											{
												"body": {
													"nativeSrc": "7053:53:22",
													"nodeType": "YulBlock",
													"src": "7053:53:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "7070:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "7070:3:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "7093:5:22",
																				"nodeType": "YulIdentifier",
																				"src": "7093:5:22"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nativeSrc": "7075:17:22",
																			"nodeType": "YulIdentifier",
																			"src": "7075:17:22"
																		},
																		"nativeSrc": "7075:24:22",
																		"nodeType": "YulFunctionCall",
																		"src": "7075:24:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7063:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "7063:6:22"
																},
																"nativeSrc": "7063:37:22",
																"nodeType": "YulFunctionCall",
																"src": "7063:37:22"
															},
															"nativeSrc": "7063:37:22",
															"nodeType": "YulExpressionStatement",
															"src": "7063:37:22"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "6988:118:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "7041:5:22",
														"nodeType": "YulTypedName",
														"src": "7041:5:22",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "7048:3:22",
														"nodeType": "YulTypedName",
														"src": "7048:3:22",
														"type": ""
													}
												],
												"src": "6988:118:22"
											},
											{
												"body": {
													"nativeSrc": "7322:454:22",
													"nodeType": "YulBlock",
													"src": "7322:454:22",
													"statements": [
														{
															"nativeSrc": "7332:27:22",
															"nodeType": "YulAssignment",
															"src": "7332:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7344:9:22",
																		"nodeType": "YulIdentifier",
																		"src": "7344:9:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7355:3:22",
																		"nodeType": "YulLiteral",
																		"src": "7355:3:22",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7340:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "7340:3:22"
																},
																"nativeSrc": "7340:19:22",
																"nodeType": "YulFunctionCall",
																"src": "7340:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "7332:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "7332:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "7413:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "7413:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7426:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "7426:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7437:1:22",
																				"nodeType": "YulLiteral",
																				"src": "7437:1:22",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7422:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "7422:3:22"
																		},
																		"nativeSrc": "7422:17:22",
																		"nodeType": "YulFunctionCall",
																		"src": "7422:17:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nativeSrc": "7369:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "7369:43:22"
																},
																"nativeSrc": "7369:71:22",
																"nodeType": "YulFunctionCall",
																"src": "7369:71:22"
															},
															"nativeSrc": "7369:71:22",
															"nodeType": "YulExpressionStatement",
															"src": "7369:71:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "7494:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "7494:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7507:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "7507:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7518:2:22",
																				"nodeType": "YulLiteral",
																				"src": "7518:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7503:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "7503:3:22"
																		},
																		"nativeSrc": "7503:18:22",
																		"nodeType": "YulFunctionCall",
																		"src": "7503:18:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nativeSrc": "7450:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "7450:43:22"
																},
																"nativeSrc": "7450:72:22",
																"nodeType": "YulFunctionCall",
																"src": "7450:72:22"
															},
															"nativeSrc": "7450:72:22",
															"nodeType": "YulExpressionStatement",
															"src": "7450:72:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "7576:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "7576:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7589:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "7589:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7600:2:22",
																				"nodeType": "YulLiteral",
																				"src": "7600:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7585:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "7585:3:22"
																		},
																		"nativeSrc": "7585:18:22",
																		"nodeType": "YulFunctionCall",
																		"src": "7585:18:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nativeSrc": "7532:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "7532:43:22"
																},
																"nativeSrc": "7532:72:22",
																"nodeType": "YulFunctionCall",
																"src": "7532:72:22"
															},
															"nativeSrc": "7532:72:22",
															"nodeType": "YulExpressionStatement",
															"src": "7532:72:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value3",
																		"nativeSrc": "7658:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "7658:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7671:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "7671:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7682:2:22",
																				"nodeType": "YulLiteral",
																				"src": "7682:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7667:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "7667:3:22"
																		},
																		"nativeSrc": "7667:18:22",
																		"nodeType": "YulFunctionCall",
																		"src": "7667:18:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "7614:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "7614:43:22"
																},
																"nativeSrc": "7614:72:22",
																"nodeType": "YulFunctionCall",
																"src": "7614:72:22"
															},
															"nativeSrc": "7614:72:22",
															"nodeType": "YulExpressionStatement",
															"src": "7614:72:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value4",
																		"nativeSrc": "7740:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "7740:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7753:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "7753:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7764:3:22",
																				"nodeType": "YulLiteral",
																				"src": "7764:3:22",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7749:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "7749:3:22"
																		},
																		"nativeSrc": "7749:19:22",
																		"nodeType": "YulFunctionCall",
																		"src": "7749:19:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "7696:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "7696:43:22"
																},
																"nativeSrc": "7696:73:22",
																"nodeType": "YulFunctionCall",
																"src": "7696:73:22"
															},
															"nativeSrc": "7696:73:22",
															"nodeType": "YulExpressionStatement",
															"src": "7696:73:22"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
												"nativeSrc": "7112:664:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "7262:9:22",
														"nodeType": "YulTypedName",
														"src": "7262:9:22",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "7274:6:22",
														"nodeType": "YulTypedName",
														"src": "7274:6:22",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "7282:6:22",
														"nodeType": "YulTypedName",
														"src": "7282:6:22",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "7290:6:22",
														"nodeType": "YulTypedName",
														"src": "7290:6:22",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "7298:6:22",
														"nodeType": "YulTypedName",
														"src": "7298:6:22",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "7306:6:22",
														"nodeType": "YulTypedName",
														"src": "7306:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "7317:4:22",
														"nodeType": "YulTypedName",
														"src": "7317:4:22",
														"type": ""
													}
												],
												"src": "7112:664:22"
											},
											{
												"body": {
													"nativeSrc": "7878:73:22",
													"nodeType": "YulBlock",
													"src": "7878:73:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "7895:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "7895:3:22"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "7900:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "7900:6:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7888:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "7888:6:22"
																},
																"nativeSrc": "7888:19:22",
																"nodeType": "YulFunctionCall",
																"src": "7888:19:22"
															},
															"nativeSrc": "7888:19:22",
															"nodeType": "YulExpressionStatement",
															"src": "7888:19:22"
														},
														{
															"nativeSrc": "7916:29:22",
															"nodeType": "YulAssignment",
															"src": "7916:29:22",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "7935:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "7935:3:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7940:4:22",
																		"nodeType": "YulLiteral",
																		"src": "7940:4:22",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7931:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "7931:3:22"
																},
																"nativeSrc": "7931:14:22",
																"nodeType": "YulFunctionCall",
																"src": "7931:14:22"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nativeSrc": "7916:11:22",
																	"nodeType": "YulIdentifier",
																	"src": "7916:11:22"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "7782:169:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "7850:3:22",
														"nodeType": "YulTypedName",
														"src": "7850:3:22",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "7855:6:22",
														"nodeType": "YulTypedName",
														"src": "7855:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nativeSrc": "7866:11:22",
														"nodeType": "YulTypedName",
														"src": "7866:11:22",
														"type": ""
													}
												],
												"src": "7782:169:22"
											},
											{
												"body": {
													"nativeSrc": "8019:77:22",
													"nodeType": "YulBlock",
													"src": "8019:77:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nativeSrc": "8036:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "8036:3:22"
																	},
																	{
																		"name": "src",
																		"nativeSrc": "8041:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "8041:3:22"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "8046:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "8046:6:22"
																	}
																],
																"functionName": {
																	"name": "mcopy",
																	"nativeSrc": "8030:5:22",
																	"nodeType": "YulIdentifier",
																	"src": "8030:5:22"
																},
																"nativeSrc": "8030:23:22",
																"nodeType": "YulFunctionCall",
																"src": "8030:23:22"
															},
															"nativeSrc": "8030:23:22",
															"nodeType": "YulExpressionStatement",
															"src": "8030:23:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nativeSrc": "8073:3:22",
																				"nodeType": "YulIdentifier",
																				"src": "8073:3:22"
																			},
																			{
																				"name": "length",
																				"nativeSrc": "8078:6:22",
																				"nodeType": "YulIdentifier",
																				"src": "8078:6:22"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8069:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "8069:3:22"
																		},
																		"nativeSrc": "8069:16:22",
																		"nodeType": "YulFunctionCall",
																		"src": "8069:16:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8087:1:22",
																		"nodeType": "YulLiteral",
																		"src": "8087:1:22",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8062:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "8062:6:22"
																},
																"nativeSrc": "8062:27:22",
																"nodeType": "YulFunctionCall",
																"src": "8062:27:22"
															},
															"nativeSrc": "8062:27:22",
															"nodeType": "YulExpressionStatement",
															"src": "8062:27:22"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nativeSrc": "7957:139:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nativeSrc": "8001:3:22",
														"nodeType": "YulTypedName",
														"src": "8001:3:22",
														"type": ""
													},
													{
														"name": "dst",
														"nativeSrc": "8006:3:22",
														"nodeType": "YulTypedName",
														"src": "8006:3:22",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "8011:6:22",
														"nodeType": "YulTypedName",
														"src": "8011:6:22",
														"type": ""
													}
												],
												"src": "7957:139:22"
											},
											{
												"body": {
													"nativeSrc": "8150:54:22",
													"nodeType": "YulBlock",
													"src": "8150:54:22",
													"statements": [
														{
															"nativeSrc": "8160:38:22",
															"nodeType": "YulAssignment",
															"src": "8160:38:22",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "8178:5:22",
																				"nodeType": "YulIdentifier",
																				"src": "8178:5:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8185:2:22",
																				"nodeType": "YulLiteral",
																				"src": "8185:2:22",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8174:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "8174:3:22"
																		},
																		"nativeSrc": "8174:14:22",
																		"nodeType": "YulFunctionCall",
																		"src": "8174:14:22"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "8194:2:22",
																				"nodeType": "YulLiteral",
																				"src": "8194:2:22",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "8190:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "8190:3:22"
																		},
																		"nativeSrc": "8190:7:22",
																		"nodeType": "YulFunctionCall",
																		"src": "8190:7:22"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "8170:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "8170:3:22"
																},
																"nativeSrc": "8170:28:22",
																"nodeType": "YulFunctionCall",
																"src": "8170:28:22"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "8160:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "8160:6:22"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nativeSrc": "8102:102:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "8133:5:22",
														"nodeType": "YulTypedName",
														"src": "8133:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "8143:6:22",
														"nodeType": "YulTypedName",
														"src": "8143:6:22",
														"type": ""
													}
												],
												"src": "8102:102:22"
											},
											{
												"body": {
													"nativeSrc": "8302:285:22",
													"nodeType": "YulBlock",
													"src": "8302:285:22",
													"statements": [
														{
															"nativeSrc": "8312:53:22",
															"nodeType": "YulVariableDeclaration",
															"src": "8312:53:22",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "8359:5:22",
																		"nodeType": "YulIdentifier",
																		"src": "8359:5:22"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nativeSrc": "8326:32:22",
																	"nodeType": "YulIdentifier",
																	"src": "8326:32:22"
																},
																"nativeSrc": "8326:39:22",
																"nodeType": "YulFunctionCall",
																"src": "8326:39:22"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "8316:6:22",
																	"nodeType": "YulTypedName",
																	"src": "8316:6:22",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "8374:78:22",
															"nodeType": "YulAssignment",
															"src": "8374:78:22",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "8440:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "8440:3:22"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "8445:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "8445:6:22"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "8381:58:22",
																	"nodeType": "YulIdentifier",
																	"src": "8381:58:22"
																},
																"nativeSrc": "8381:71:22",
																"nodeType": "YulFunctionCall",
																"src": "8381:71:22"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "8374:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "8374:3:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "8500:5:22",
																				"nodeType": "YulIdentifier",
																				"src": "8500:5:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8507:4:22",
																				"nodeType": "YulLiteral",
																				"src": "8507:4:22",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8496:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "8496:3:22"
																		},
																		"nativeSrc": "8496:16:22",
																		"nodeType": "YulFunctionCall",
																		"src": "8496:16:22"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "8514:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "8514:3:22"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "8519:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "8519:6:22"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nativeSrc": "8461:34:22",
																	"nodeType": "YulIdentifier",
																	"src": "8461:34:22"
																},
																"nativeSrc": "8461:65:22",
																"nodeType": "YulFunctionCall",
																"src": "8461:65:22"
															},
															"nativeSrc": "8461:65:22",
															"nodeType": "YulExpressionStatement",
															"src": "8461:65:22"
														},
														{
															"nativeSrc": "8535:46:22",
															"nodeType": "YulAssignment",
															"src": "8535:46:22",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "8546:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "8546:3:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "8573:6:22",
																				"nodeType": "YulIdentifier",
																				"src": "8573:6:22"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nativeSrc": "8551:21:22",
																			"nodeType": "YulIdentifier",
																			"src": "8551:21:22"
																		},
																		"nativeSrc": "8551:29:22",
																		"nodeType": "YulFunctionCall",
																		"src": "8551:29:22"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "8542:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "8542:3:22"
																},
																"nativeSrc": "8542:39:22",
																"nodeType": "YulFunctionCall",
																"src": "8542:39:22"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "8535:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "8535:3:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "8210:377:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "8283:5:22",
														"nodeType": "YulTypedName",
														"src": "8283:5:22",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "8290:3:22",
														"nodeType": "YulTypedName",
														"src": "8290:3:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "8298:3:22",
														"nodeType": "YulTypedName",
														"src": "8298:3:22",
														"type": ""
													}
												],
												"src": "8210:377:22"
											},
											{
												"body": {
													"nativeSrc": "8711:195:22",
													"nodeType": "YulBlock",
													"src": "8711:195:22",
													"statements": [
														{
															"nativeSrc": "8721:26:22",
															"nodeType": "YulAssignment",
															"src": "8721:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "8733:9:22",
																		"nodeType": "YulIdentifier",
																		"src": "8733:9:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8744:2:22",
																		"nodeType": "YulLiteral",
																		"src": "8744:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "8729:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "8729:3:22"
																},
																"nativeSrc": "8729:18:22",
																"nodeType": "YulFunctionCall",
																"src": "8729:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "8721:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "8721:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8768:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "8768:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8779:1:22",
																				"nodeType": "YulLiteral",
																				"src": "8779:1:22",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8764:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "8764:3:22"
																		},
																		"nativeSrc": "8764:17:22",
																		"nodeType": "YulFunctionCall",
																		"src": "8764:17:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "8787:4:22",
																				"nodeType": "YulIdentifier",
																				"src": "8787:4:22"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "8793:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "8793:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "8783:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "8783:3:22"
																		},
																		"nativeSrc": "8783:20:22",
																		"nodeType": "YulFunctionCall",
																		"src": "8783:20:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8757:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "8757:6:22"
																},
																"nativeSrc": "8757:47:22",
																"nodeType": "YulFunctionCall",
																"src": "8757:47:22"
															},
															"nativeSrc": "8757:47:22",
															"nodeType": "YulExpressionStatement",
															"src": "8757:47:22"
														},
														{
															"nativeSrc": "8813:86:22",
															"nodeType": "YulAssignment",
															"src": "8813:86:22",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "8885:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "8885:6:22"
																	},
																	{
																		"name": "tail",
																		"nativeSrc": "8894:4:22",
																		"nodeType": "YulIdentifier",
																		"src": "8894:4:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "8821:63:22",
																	"nodeType": "YulIdentifier",
																	"src": "8821:63:22"
																},
																"nativeSrc": "8821:78:22",
																"nodeType": "YulFunctionCall",
																"src": "8821:78:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "8813:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "8813:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "8593:313:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "8683:9:22",
														"nodeType": "YulTypedName",
														"src": "8683:9:22",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "8695:6:22",
														"nodeType": "YulTypedName",
														"src": "8695:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "8706:4:22",
														"nodeType": "YulTypedName",
														"src": "8706:4:22",
														"type": ""
													}
												],
												"src": "8593:313:22"
											},
											{
												"body": {
													"nativeSrc": "8970:40:22",
													"nodeType": "YulBlock",
													"src": "8970:40:22",
													"statements": [
														{
															"nativeSrc": "8981:22:22",
															"nodeType": "YulAssignment",
															"src": "8981:22:22",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "8997:5:22",
																		"nodeType": "YulIdentifier",
																		"src": "8997:5:22"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "8991:5:22",
																	"nodeType": "YulIdentifier",
																	"src": "8991:5:22"
																},
																"nativeSrc": "8991:12:22",
																"nodeType": "YulFunctionCall",
																"src": "8991:12:22"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "8981:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "8981:6:22"
																}
															]
														}
													]
												},
												"name": "array_length_t_bytes_memory_ptr",
												"nativeSrc": "8912:98:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "8953:5:22",
														"nodeType": "YulTypedName",
														"src": "8953:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "8963:6:22",
														"nodeType": "YulTypedName",
														"src": "8963:6:22",
														"type": ""
													}
												],
												"src": "8912:98:22"
											},
											{
												"body": {
													"nativeSrc": "9072:60:22",
													"nodeType": "YulBlock",
													"src": "9072:60:22",
													"statements": [
														{
															"nativeSrc": "9082:11:22",
															"nodeType": "YulAssignment",
															"src": "9082:11:22",
															"value": {
																"name": "ptr",
																"nativeSrc": "9090:3:22",
																"nodeType": "YulIdentifier",
																"src": "9090:3:22"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "9082:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "9082:4:22"
																}
															]
														},
														{
															"nativeSrc": "9103:22:22",
															"nodeType": "YulAssignment",
															"src": "9103:22:22",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "9115:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "9115:3:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9120:4:22",
																		"nodeType": "YulLiteral",
																		"src": "9120:4:22",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "9111:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "9111:3:22"
																},
																"nativeSrc": "9111:14:22",
																"nodeType": "YulFunctionCall",
																"src": "9111:14:22"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "9103:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "9103:4:22"
																}
															]
														}
													]
												},
												"name": "array_dataslot_t_bytes_memory_ptr",
												"nativeSrc": "9016:116:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nativeSrc": "9059:3:22",
														"nodeType": "YulTypedName",
														"src": "9059:3:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nativeSrc": "9067:4:22",
														"nodeType": "YulTypedName",
														"src": "9067:4:22",
														"type": ""
													}
												],
												"src": "9016:116:22"
											},
											{
												"body": {
													"nativeSrc": "9193:99:22",
													"nodeType": "YulBlock",
													"src": "9193:99:22",
													"statements": [
														{
															"nativeSrc": "9204:42:22",
															"nodeType": "YulVariableDeclaration",
															"src": "9204:42:22",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "9241:3:22",
																				"nodeType": "YulIdentifier",
																				"src": "9241:3:22"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nativeSrc": "9235:5:22",
																			"nodeType": "YulIdentifier",
																			"src": "9235:5:22"
																		},
																		"nativeSrc": "9235:10:22",
																		"nodeType": "YulFunctionCall",
																		"src": "9235:10:22"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_bytes32",
																	"nativeSrc": "9217:17:22",
																	"nodeType": "YulIdentifier",
																	"src": "9217:17:22"
																},
																"nativeSrc": "9217:29:22",
																"nodeType": "YulFunctionCall",
																"src": "9217:29:22"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "9208:5:22",
																	"nodeType": "YulTypedName",
																	"src": "9208:5:22",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "9256:29:22",
															"nodeType": "YulAssignment",
															"src": "9256:29:22",
															"value": {
																"name": "value",
																"nativeSrc": "9280:5:22",
																"nodeType": "YulIdentifier",
																"src": "9280:5:22"
															},
															"variableNames": [
																{
																	"name": "returnValue",
																	"nativeSrc": "9256:11:22",
																	"nodeType": "YulIdentifier",
																	"src": "9256:11:22"
																}
															]
														}
													]
												},
												"name": "read_from_memoryt_bytes32",
												"nativeSrc": "9138:154:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nativeSrc": "9173:3:22",
														"nodeType": "YulTypedName",
														"src": "9173:3:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "returnValue",
														"nativeSrc": "9181:11:22",
														"nodeType": "YulTypedName",
														"src": "9181:11:22",
														"type": ""
													}
												],
												"src": "9138:154:22"
											},
											{
												"body": {
													"nativeSrc": "9388:504:22",
													"nodeType": "YulBlock",
													"src": "9388:504:22",
													"statements": [
														{
															"nativeSrc": "9399:52:22",
															"nodeType": "YulVariableDeclaration",
															"src": "9399:52:22",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nativeSrc": "9445:5:22",
																		"nodeType": "YulIdentifier",
																		"src": "9445:5:22"
																	}
																],
																"functionName": {
																	"name": "array_length_t_bytes_memory_ptr",
																	"nativeSrc": "9413:31:22",
																	"nodeType": "YulIdentifier",
																	"src": "9413:31:22"
																},
																"nativeSrc": "9413:38:22",
																"nodeType": "YulFunctionCall",
																"src": "9413:38:22"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "9403:6:22",
																	"nodeType": "YulTypedName",
																	"src": "9403:6:22",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "9460:21:22",
															"nodeType": "YulVariableDeclaration",
															"src": "9460:21:22",
															"value": {
																"name": "array",
																"nativeSrc": "9476:5:22",
																"nodeType": "YulIdentifier",
																"src": "9476:5:22"
															},
															"variables": [
																{
																	"name": "dataArea",
																	"nativeSrc": "9464:8:22",
																	"nodeType": "YulTypedName",
																	"src": "9464:8:22",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "9491:52:22",
															"nodeType": "YulAssignment",
															"src": "9491:52:22",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nativeSrc": "9537:5:22",
																		"nodeType": "YulIdentifier",
																		"src": "9537:5:22"
																	}
																],
																"functionName": {
																	"name": "array_dataslot_t_bytes_memory_ptr",
																	"nativeSrc": "9503:33:22",
																	"nodeType": "YulIdentifier",
																	"src": "9503:33:22"
																},
																"nativeSrc": "9503:40:22",
																"nodeType": "YulFunctionCall",
																"src": "9503:40:22"
															},
															"variableNames": [
																{
																	"name": "dataArea",
																	"nativeSrc": "9491:8:22",
																	"nodeType": "YulIdentifier",
																	"src": "9491:8:22"
																}
															]
														},
														{
															"nativeSrc": "9553:44:22",
															"nodeType": "YulAssignment",
															"src": "9553:44:22",
															"value": {
																"arguments": [
																	{
																		"name": "dataArea",
																		"nativeSrc": "9588:8:22",
																		"nodeType": "YulIdentifier",
																		"src": "9588:8:22"
																	}
																],
																"functionName": {
																	"name": "read_from_memoryt_bytes32",
																	"nativeSrc": "9562:25:22",
																	"nodeType": "YulIdentifier",
																	"src": "9562:25:22"
																},
																"nativeSrc": "9562:35:22",
																"nodeType": "YulFunctionCall",
																"src": "9562:35:22"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "9553:5:22",
																	"nodeType": "YulIdentifier",
																	"src": "9553:5:22"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "9625:260:22",
																"nodeType": "YulBlock",
																"src": "9625:260:22",
																"statements": [
																	{
																		"nativeSrc": "9639:236:22",
																		"nodeType": "YulAssignment",
																		"src": "9639:236:22",
																		"value": {
																			"arguments": [
																				{
																					"name": "value",
																					"nativeSrc": "9669:5:22",
																					"nodeType": "YulIdentifier",
																					"src": "9669:5:22"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "9736:1:22",
																									"nodeType": "YulLiteral",
																									"src": "9736:1:22",
																									"type": "",
																									"value": "8"
																								},
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nativeSrc": "9743:2:22",
																											"nodeType": "YulLiteral",
																											"src": "9743:2:22",
																											"type": "",
																											"value": "32"
																										},
																										{
																											"name": "length",
																											"nativeSrc": "9747:6:22",
																											"nodeType": "YulIdentifier",
																											"src": "9747:6:22"
																										}
																									],
																									"functionName": {
																										"name": "sub",
																										"nativeSrc": "9739:3:22",
																										"nodeType": "YulIdentifier",
																										"src": "9739:3:22"
																									},
																									"nativeSrc": "9739:15:22",
																									"nodeType": "YulFunctionCall",
																									"src": "9739:15:22"
																								}
																							],
																							"functionName": {
																								"name": "mul",
																								"nativeSrc": "9732:3:22",
																								"nodeType": "YulIdentifier",
																								"src": "9732:3:22"
																							},
																							"nativeSrc": "9732:23:22",
																							"nodeType": "YulFunctionCall",
																							"src": "9732:23:22"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "9777:66:22",
																							"nodeType": "YulLiteral",
																							"src": "9777:66:22",
																							"type": "",
																							"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																						}
																					],
																					"functionName": {
																						"name": "shift_left_dynamic",
																						"nativeSrc": "9692:18:22",
																						"nodeType": "YulIdentifier",
																						"src": "9692:18:22"
																					},
																					"nativeSrc": "9692:169:22",
																					"nodeType": "YulFunctionCall",
																					"src": "9692:169:22"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "9648:3:22",
																				"nodeType": "YulIdentifier",
																				"src": "9648:3:22"
																			},
																			"nativeSrc": "9648:227:22",
																			"nodeType": "YulFunctionCall",
																			"src": "9648:227:22"
																		},
																		"variableNames": [
																			{
																				"name": "value",
																				"nativeSrc": "9639:5:22",
																				"nodeType": "YulIdentifier",
																				"src": "9639:5:22"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nativeSrc": "9613:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "9613:6:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9621:2:22",
																		"nodeType": "YulLiteral",
																		"src": "9621:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "9610:2:22",
																	"nodeType": "YulIdentifier",
																	"src": "9610:2:22"
																},
																"nativeSrc": "9610:14:22",
																"nodeType": "YulFunctionCall",
																"src": "9610:14:22"
															},
															"nativeSrc": "9607:278:22",
															"nodeType": "YulIf",
															"src": "9607:278:22"
														}
													]
												},
												"name": "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32",
												"nativeSrc": "9298:594:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nativeSrc": "9372:5:22",
														"nodeType": "YulTypedName",
														"src": "9372:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "9382:5:22",
														"nodeType": "YulTypedName",
														"src": "9382:5:22",
														"type": ""
													}
												],
												"src": "9298:594:22"
											}
										]
									},
									"contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        mcopy(dst, src, length)\n        mstore(add(dst, length), 0)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_dataslot_t_bytes_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function read_from_memoryt_bytes32(ptr) -> returnValue {\n\n        let value := cleanup_t_bytes32(mload(ptr))\n\n        returnValue :=\n\n        value\n\n    }\n\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value {\n\n        let length := array_length_t_bytes_memory_ptr(array)\n        let dataArea := array\n\n        dataArea := array_dataslot_t_bytes_memory_ptr(array)\n\n        value := read_from_memoryt_bytes32(dataArea)\n\n        if lt(length, 32) {\n            value := and(\n                value,\n                shift_left_dynamic(\n                    mul(8, sub(32, length)),\n                    0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n                )\n            )\n        }\n\n    }\n\n}\n",
									"id": 22,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "610160604052348015610010575f80fd5b50604051612b93380380612b9383398181016040528101906100329190610476565b6040518060600160405280602a8152602001612b69602a9139806040518060400160405280600181526020017f3100000000000000000000000000000000000000000000000000000000000000815250836040518060600160405280602a8152602001612b69602a91396040518060400160405280600481526020017f474354550000000000000000000000000000000000000000000000000000000081525081600390816100e191906106db565b5080600490816100f191906106db565b5050505f60055f6101000a81548160ff0219169083151502179055505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361017d575f6040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161017491906107b9565b60405180910390fd5b61018c8161023e60201b60201c565b506101a160068361030360201b90919060201c565b61012081815250506101bd60078261030360201b90919060201c565b6101408181525050818051906020012060e08181525050808051906020012061010081815250504660a081815250506101fa61035060201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505050505050610963565b5f600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f6020835110156103245761031d836103aa60201b60201c565b905061034a565b826103348361040f60201b60201c565b5f01908161034291906106db565b5060ff5f1b90505b92915050565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60e05161010051463060405160200161038f9594939291906107f9565b60405160208183030381529060405280519060200120905090565b5f80829050601f815111156103f657826040517f305a27a90000000000000000000000000000000000000000000000000000000081526004016103ed91906108b0565b60405180910390fd5b805181610402906108fd565b5f1c175f1b915050919050565b5f819050919050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6104458261041c565b9050919050565b6104558161043b565b811461045f575f80fd5b50565b5f815190506104708161044c565b92915050565b5f6020828403121561048b5761048a610418565b5b5f61049884828501610462565b91505092915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061051c57607f821691505b60208210810361052f5761052e6104d8565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026105917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610556565b61059b8683610556565b95508019841693508086168417925050509392505050565b5f819050919050565b5f819050919050565b5f6105df6105da6105d5846105b3565b6105bc565b6105b3565b9050919050565b5f819050919050565b6105f8836105c5565b61060c610604826105e6565b848454610562565b825550505050565b5f90565b610620610614565b61062b8184846105ef565b505050565b5b8181101561064e576106435f82610618565b600181019050610631565b5050565b601f8211156106935761066481610535565b61066d84610547565b8101602085101561067c578190505b61069061068885610547565b830182610630565b50505b505050565b5f82821c905092915050565b5f6106b35f1984600802610698565b1980831691505092915050565b5f6106cb83836106a4565b9150826002028217905092915050565b6106e4826104a1565b67ffffffffffffffff8111156106fd576106fc6104ab565b5b6107078254610505565b610712828285610652565b5f60209050601f831160018114610743575f8415610731578287015190505b61073b85826106c0565b8655506107a2565b601f19841661075186610535565b5f5b8281101561077857848901518255600182019150602085019450602081019050610753565b868310156107955784890151610791601f8916826106a4565b8355505b6001600288020188555050505b505050505050565b6107b38161043b565b82525050565b5f6020820190506107cc5f8301846107aa565b92915050565b5f819050919050565b6107e4816107d2565b82525050565b6107f3816105b3565b82525050565b5f60a08201905061080c5f8301886107db565b61081960208301876107db565b61082660408301866107db565b61083360608301856107ea565b61084060808301846107aa565b9695505050505050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f610882826104a1565b61088c818561084a565b935061089c81856020860161085a565b6108a581610868565b840191505092915050565b5f6020820190508181035f8301526108c88184610878565b905092915050565b5f81519050919050565b5f819050602082019050919050565b5f6108f482516107d2565b80915050919050565b5f610907826108d0565b82610911846108da565b905061091c816108e9565b9250602082101561095c576109577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83602003600802610556565b831692505b5050919050565b60805160a05160c05160e0516101005161012051610140516121b56109b45f395f610fa201525f610f6701525f61129201525f61127101525f610b5801525f610bae01525f610bd701526121b55ff3fe608060405234801561000f575f80fd5b5060043610610140575f3560e01c8063715018a6116100b65780638da5cb5b1161007a5780638da5cb5b1461033057806395d89b411461034e578063a9059cbb1461036c578063d505accf1461039c578063dd62ed3e146103b8578063f2fde38b146103e857610140565b8063715018a6146102ac57806379cc6790146102b65780637ecebe00146102d25780638456cb591461030257806384b0196e1461030c57610140565b80633644e515116101085780633644e515146101fe5780633f4ba83a1461021c57806340c10f191461022657806342966c68146102425780635c975abb1461025e57806370a082311461027c57610140565b806306fdde0314610144578063095ea7b31461016257806318160ddd1461019257806323b872dd146101b0578063313ce567146101e0575b5f80fd5b61014c610404565b60405161015991906119fa565b60405180910390f35b61017c60048036038101906101779190611aab565b610494565b6040516101899190611b03565b60405180910390f35b61019a6104b6565b6040516101a79190611b2b565b60405180910390f35b6101ca60048036038101906101c59190611b44565b6104bf565b6040516101d79190611b03565b60405180910390f35b6101e86104ed565b6040516101f59190611baf565b60405180910390f35b6102066104f5565b6040516102139190611be0565b60405180910390f35b610224610503565b005b610240600480360381019061023b9190611aab565b610515565b005b61025c60048036038101906102579190611bf9565b61052b565b005b61026661053f565b6040516102739190611b03565b60405180910390f35b61029660048036038101906102919190611c24565b610554565b6040516102a39190611b2b565b60405180910390f35b6102b4610599565b005b6102d060048036038101906102cb9190611aab565b6105ac565b005b6102ec60048036038101906102e79190611c24565b6105cc565b6040516102f99190611b2b565b60405180910390f35b61030a6105dd565b005b6103146105ef565b6040516103279796959493929190611d4f565b60405180910390f35b610338610694565b6040516103459190611dd1565b60405180910390f35b6103566106bd565b60405161036391906119fa565b60405180910390f35b61038660048036038101906103819190611aab565b61074d565b6040516103939190611b03565b60405180910390f35b6103b660048036038101906103b19190611e3e565b61076f565b005b6103d260048036038101906103cd9190611edb565b6108b4565b6040516103df9190611b2b565b60405180910390f35b61040260048036038101906103fd9190611c24565b610936565b005b60606003805461041390611f46565b80601f016020809104026020016040519081016040528092919081815260200182805461043f90611f46565b801561048a5780601f106104615761010080835404028352916020019161048a565b820191905f5260205f20905b81548152906001019060200180831161046d57829003601f168201915b5050505050905090565b5f8061049e6109ba565b90506104ab8185856109c1565b600191505092915050565b5f600254905090565b5f806104c96109ba565b90506104d68582856109d3565b6104e1858585610a65565b60019150509392505050565b5f6012905090565b5f6104fe610b55565b905090565b61050b610c0b565b610513610c92565b565b61051d610c0b565b6105278282610cf3565b5050565b61053c6105366109ba565b82610d72565b50565b5f60055f9054906101000a900460ff16905090565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b6105a1610c0b565b6105aa5f610df1565b565b6105be826105b86109ba565b836109d3565b6105c88282610d72565b5050565b5f6105d682610eb6565b9050919050565b6105e5610c0b565b6105ed610efc565b565b5f6060805f805f6060610600610f5e565b610608610f99565b46305f801b5f67ffffffffffffffff81111561062757610626611f76565b5b6040519080825280602002602001820160405280156106555781602001602082028036833780820191505090505b507f0f00000000000000000000000000000000000000000000000000000000000000959493929190965096509650965096509650965090919293949596565b5f600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600480546106cc90611f46565b80601f01602080910402602001604051908101604052809291908181526020018280546106f890611f46565b80156107435780601f1061071a57610100808354040283529160200191610743565b820191905f5260205f20905b81548152906001019060200180831161072657829003601f168201915b5050505050905090565b5f806107576109ba565b9050610764818585610a65565b600191505092915050565b834211156107b457836040517f627913020000000000000000000000000000000000000000000000000000000081526004016107ab9190611b2b565b60405180910390fd5b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886107e28c610fd4565b896040516020016107f896959493929190611fa3565b6040516020818303038152906040528051906020012090505f61081a82611027565b90505f61082982878787611040565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461089d57808a6040517f4b800e46000000000000000000000000000000000000000000000000000000008152600401610894929190612002565b60405180910390fd5b6108a88a8a8a6109c1565b50505050505050505050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b61093e610c0b565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109ae575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016109a59190611dd1565b60405180910390fd5b6109b781610df1565b50565b5f33905090565b6109ce838383600161106e565b505050565b5f6109de84846108b4565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610a5f5781811015610a50578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610a4793929190612029565b60405180910390fd5b610a5e84848484035f61106e565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610ad5575f6040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610acc9190611dd1565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b45575f6040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610b3c9190611dd1565b60405180910390fd5b610b5083838361123d565b505050565b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148015610bd057507f000000000000000000000000000000000000000000000000000000000000000046145b15610bfd577f00000000000000000000000000000000000000000000000000000000000000009050610c08565b610c0561124d565b90505b90565b610c136109ba565b73ffffffffffffffffffffffffffffffffffffffff16610c31610694565b73ffffffffffffffffffffffffffffffffffffffff1614610c9057610c546109ba565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610c879190611dd1565b60405180910390fd5b565b610c9a6112e2565b5f60055f6101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610cdc6109ba565b604051610ce99190611dd1565b60405180910390a1565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d63575f6040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610d5a9190611dd1565b60405180910390fd5b610d6e5f838361123d565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610de2575f6040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610dd99190611dd1565b60405180910390fd5b610ded825f8361123d565b5050565b5f600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f60085f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b610f04611322565b600160055f6101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610f476109ba565b604051610f549190611dd1565b60405180910390a1565b6060610f9460067f000000000000000000000000000000000000000000000000000000000000000061136390919063ffffffff16565b905090565b6060610fcf60077f000000000000000000000000000000000000000000000000000000000000000061136390919063ffffffff16565b905090565b5f60085f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f815480929190600101919050559050919050565b5f611039611033610b55565b83611410565b9050919050565b5f805f8061105088888888611450565b9250925092506110608282611537565b829350505050949350505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036110de575f6040517fe602df050000000000000000000000000000000000000000000000000000000081526004016110d59190611dd1565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361114e575f6040517f94280d620000000000000000000000000000000000000000000000000000000081526004016111459190611dd1565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508015611237578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161122e9190611b2b565b60405180910390a35b50505050565b611248838383611699565b505050565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000046306040516020016112c795949392919061205e565b60405160208183030381529060405280519060200120905090565b6112ea61053f565b611320576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61132a61053f565b15611361576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b606060ff5f1b831461137f57611378836116b1565b905061140a565b81805461138b90611f46565b80601f01602080910402602001604051908101604052809291908181526020018280546113b790611f46565b80156114025780601f106113d957610100808354040283529160200191611402565b820191905f5260205f20905b8154815290600101906020018083116113e557829003601f168201915b505050505090505b92915050565b5f6040517f190100000000000000000000000000000000000000000000000000000000000081528360028201528260228201526042812091505092915050565b5f805f7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0845f1c111561148c575f60038592509250925061152d565b5f6001888888886040515f81526020016040526040516114af94939291906120af565b6020604051602081039080840390855afa1580156114cf573d5f803e3d5ffd5b5050506020604051035190505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611520575f60015f801b9350935093505061152d565b805f805f1b935093509350505b9450945094915050565b5f600381111561154a576115496120f2565b5b82600381111561155d5761155c6120f2565b5b03156116955760016003811115611577576115766120f2565b5b82600381111561158a576115896120f2565b5b036115c1576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260038111156115d5576115d46120f2565b5b8260038111156115e8576115e76120f2565b5b0361162c57805f1c6040517ffce698f70000000000000000000000000000000000000000000000000000000081526004016116239190611b2b565b60405180910390fd5b60038081111561163f5761163e6120f2565b5b826003811115611652576116516120f2565b5b0361169457806040517fd78bce0c00000000000000000000000000000000000000000000000000000000815260040161168b9190611be0565b60405180910390fd5b5b5050565b6116a1611322565b6116ac838383611723565b505050565b60605f6116bd8361193c565b90505f602067ffffffffffffffff8111156116db576116da611f76565b5b6040519080825280601f01601f19166020018201604052801561170d5781602001600182028036833780820191505090505b5090508181528360208201528092505050919050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611773578060025f828254611767919061214c565b92505081905550611841565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050818110156117fc578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016117f393929190612029565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611888578060025f82825403925050819055506118d2565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161192f9190611b2b565b60405180910390a3505050565b5f8060ff835f1c169050601f811115611981576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6119cc8261198a565b6119d68185611994565b93506119e68185602086016119a4565b6119ef816119b2565b840191505092915050565b5f6020820190508181035f830152611a1281846119c2565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611a4782611a1e565b9050919050565b611a5781611a3d565b8114611a61575f80fd5b50565b5f81359050611a7281611a4e565b92915050565b5f819050919050565b611a8a81611a78565b8114611a94575f80fd5b50565b5f81359050611aa581611a81565b92915050565b5f8060408385031215611ac157611ac0611a1a565b5b5f611ace85828601611a64565b9250506020611adf85828601611a97565b9150509250929050565b5f8115159050919050565b611afd81611ae9565b82525050565b5f602082019050611b165f830184611af4565b92915050565b611b2581611a78565b82525050565b5f602082019050611b3e5f830184611b1c565b92915050565b5f805f60608486031215611b5b57611b5a611a1a565b5b5f611b6886828701611a64565b9350506020611b7986828701611a64565b9250506040611b8a86828701611a97565b9150509250925092565b5f60ff82169050919050565b611ba981611b94565b82525050565b5f602082019050611bc25f830184611ba0565b92915050565b5f819050919050565b611bda81611bc8565b82525050565b5f602082019050611bf35f830184611bd1565b92915050565b5f60208284031215611c0e57611c0d611a1a565b5b5f611c1b84828501611a97565b91505092915050565b5f60208284031215611c3957611c38611a1a565b5b5f611c4684828501611a64565b91505092915050565b5f7fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b611c8381611c4f565b82525050565b611c9281611a3d565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b611cca81611a78565b82525050565b5f611cdb8383611cc1565b60208301905092915050565b5f602082019050919050565b5f611cfd82611c98565b611d078185611ca2565b9350611d1283611cb2565b805f5b83811015611d42578151611d298882611cd0565b9750611d3483611ce7565b925050600181019050611d15565b5085935050505092915050565b5f60e082019050611d625f83018a611c7a565b8181036020830152611d7481896119c2565b90508181036040830152611d8881886119c2565b9050611d976060830187611b1c565b611da46080830186611c89565b611db160a0830185611bd1565b81810360c0830152611dc38184611cf3565b905098975050505050505050565b5f602082019050611de45f830184611c89565b92915050565b611df381611b94565b8114611dfd575f80fd5b50565b5f81359050611e0e81611dea565b92915050565b611e1d81611bc8565b8114611e27575f80fd5b50565b5f81359050611e3881611e14565b92915050565b5f805f805f805f60e0888a031215611e5957611e58611a1a565b5b5f611e668a828b01611a64565b9750506020611e778a828b01611a64565b9650506040611e888a828b01611a97565b9550506060611e998a828b01611a97565b9450506080611eaa8a828b01611e00565b93505060a0611ebb8a828b01611e2a565b92505060c0611ecc8a828b01611e2a565b91505092959891949750929550565b5f8060408385031215611ef157611ef0611a1a565b5b5f611efe85828601611a64565b9250506020611f0f85828601611a64565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680611f5d57607f821691505b602082108103611f7057611f6f611f19565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f60c082019050611fb65f830189611bd1565b611fc36020830188611c89565b611fd06040830187611c89565b611fdd6060830186611b1c565b611fea6080830185611b1c565b611ff760a0830184611b1c565b979650505050505050565b5f6040820190506120155f830185611c89565b6120226020830184611c89565b9392505050565b5f60608201905061203c5f830186611c89565b6120496020830185611b1c565b6120566040830184611b1c565b949350505050565b5f60a0820190506120715f830188611bd1565b61207e6020830187611bd1565b61208b6040830186611bd1565b6120986060830185611b1c565b6120a56080830184611c89565b9695505050505050565b5f6080820190506120c25f830187611bd1565b6120cf6020830186611ba0565b6120dc6040830185611bd1565b6120e96060830184611bd1565b95945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61215682611a78565b915061216183611a78565b92508282019050808211156121795761217861211f565b5b9291505056fea2646970667358221220ff9e023953b20e928a81c3df5312e9e96fbddfb24a474c672d6ee9dfe43b5dbc64736f6c634300081a00334768616e6120436f6d6d756e69636174696f6e20546563686e6f6c6f677920556e697665727369747920",
							"opcodes": "PUSH2 0x160 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x2B93 CODESIZE SUB DUP1 PUSH2 0x2B93 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0x476 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2B69 PUSH1 0x2A SWAP2 CODECOPY DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x3100000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2A DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2B69 PUSH1 0x2A SWAP2 CODECOPY PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x4 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4743545500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH2 0xE1 SWAP2 SWAP1 PUSH2 0x6DB JUMP JUMPDEST POP DUP1 PUSH1 0x4 SWAP1 DUP2 PUSH2 0xF1 SWAP2 SWAP1 PUSH2 0x6DB JUMP JUMPDEST POP POP POP PUSH0 PUSH1 0x5 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x17D JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x174 SWAP2 SWAP1 PUSH2 0x7B9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x18C DUP2 PUSH2 0x23E PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP PUSH2 0x1A1 PUSH1 0x6 DUP4 PUSH2 0x303 PUSH1 0x20 SHL SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x120 DUP2 DUP2 MSTORE POP POP PUSH2 0x1BD PUSH1 0x7 DUP3 PUSH2 0x303 PUSH1 0x20 SHL SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x140 DUP2 DUP2 MSTORE POP POP DUP2 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0xE0 DUP2 DUP2 MSTORE POP POP DUP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x100 DUP2 DUP2 MSTORE POP POP CHAINID PUSH1 0xA0 DUP2 DUP2 MSTORE POP POP PUSH2 0x1FA PUSH2 0x350 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x80 DUP2 DUP2 MSTORE POP POP ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP POP POP POP POP PUSH2 0x963 JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x5 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP4 MLOAD LT ISZERO PUSH2 0x324 JUMPI PUSH2 0x31D DUP4 PUSH2 0x3AA PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 POP PUSH2 0x34A JUMP JUMPDEST DUP3 PUSH2 0x334 DUP4 PUSH2 0x40F PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH0 ADD SWAP1 DUP2 PUSH2 0x342 SWAP2 SWAP1 PUSH2 0x6DB JUMP JUMPDEST POP PUSH1 0xFF PUSH0 SHL SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x38F SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x7F9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 DUP3 SWAP1 POP PUSH1 0x1F DUP2 MLOAD GT ISZERO PUSH2 0x3F6 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x305A27A900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3ED SWAP2 SWAP1 PUSH2 0x8B0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH2 0x402 SWAP1 PUSH2 0x8FD JUMP JUMPDEST PUSH0 SHR OR PUSH0 SHL SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x445 DUP3 PUSH2 0x41C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x455 DUP2 PUSH2 0x43B JUMP JUMPDEST DUP2 EQ PUSH2 0x45F JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP PUSH2 0x470 DUP2 PUSH2 0x44C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x48B JUMPI PUSH2 0x48A PUSH2 0x418 JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x498 DUP5 DUP3 DUP6 ADD PUSH2 0x462 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x51C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x52F JUMPI PUSH2 0x52E PUSH2 0x4D8 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP DUP2 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x8 DUP4 MUL PUSH2 0x591 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x556 JUMP JUMPDEST PUSH2 0x59B DUP7 DUP4 PUSH2 0x556 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x5DF PUSH2 0x5DA PUSH2 0x5D5 DUP5 PUSH2 0x5B3 JUMP JUMPDEST PUSH2 0x5BC JUMP JUMPDEST PUSH2 0x5B3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5F8 DUP4 PUSH2 0x5C5 JUMP JUMPDEST PUSH2 0x60C PUSH2 0x604 DUP3 PUSH2 0x5E6 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x562 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH0 SWAP1 JUMP JUMPDEST PUSH2 0x620 PUSH2 0x614 JUMP JUMPDEST PUSH2 0x62B DUP2 DUP5 DUP5 PUSH2 0x5EF JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x64E JUMPI PUSH2 0x643 PUSH0 DUP3 PUSH2 0x618 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x631 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x693 JUMPI PUSH2 0x664 DUP2 PUSH2 0x535 JUMP JUMPDEST PUSH2 0x66D DUP5 PUSH2 0x547 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x67C JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x690 PUSH2 0x688 DUP6 PUSH2 0x547 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x630 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x6B3 PUSH0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x698 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x6CB DUP4 DUP4 PUSH2 0x6A4 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x6E4 DUP3 PUSH2 0x4A1 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x6FD JUMPI PUSH2 0x6FC PUSH2 0x4AB JUMP JUMPDEST JUMPDEST PUSH2 0x707 DUP3 SLOAD PUSH2 0x505 JUMP JUMPDEST PUSH2 0x712 DUP3 DUP3 DUP6 PUSH2 0x652 JUMP JUMPDEST PUSH0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x743 JUMPI PUSH0 DUP5 ISZERO PUSH2 0x731 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x73B DUP6 DUP3 PUSH2 0x6C0 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x7A2 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x751 DUP7 PUSH2 0x535 JUMP JUMPDEST PUSH0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x778 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x753 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x795 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x791 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x6A4 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x7B3 DUP2 PUSH2 0x43B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x7CC PUSH0 DUP4 ADD DUP5 PUSH2 0x7AA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x7E4 DUP2 PUSH2 0x7D2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x7F3 DUP2 PUSH2 0x5B3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x80C PUSH0 DUP4 ADD DUP9 PUSH2 0x7DB JUMP JUMPDEST PUSH2 0x819 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x7DB JUMP JUMPDEST PUSH2 0x826 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x7DB JUMP JUMPDEST PUSH2 0x833 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x7EA JUMP JUMPDEST PUSH2 0x840 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x7AA JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 MCOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x882 DUP3 PUSH2 0x4A1 JUMP JUMPDEST PUSH2 0x88C DUP2 DUP6 PUSH2 0x84A JUMP JUMPDEST SWAP4 POP PUSH2 0x89C DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x85A JUMP JUMPDEST PUSH2 0x8A5 DUP2 PUSH2 0x868 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x8C8 DUP2 DUP5 PUSH2 0x878 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x8F4 DUP3 MLOAD PUSH2 0x7D2 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x907 DUP3 PUSH2 0x8D0 JUMP JUMPDEST DUP3 PUSH2 0x911 DUP5 PUSH2 0x8DA JUMP JUMPDEST SWAP1 POP PUSH2 0x91C DUP2 PUSH2 0x8E9 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP3 LT ISZERO PUSH2 0x95C JUMPI PUSH2 0x957 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 PUSH1 0x20 SUB PUSH1 0x8 MUL PUSH2 0x556 JUMP JUMPDEST DUP4 AND SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x21B5 PUSH2 0x9B4 PUSH0 CODECOPY PUSH0 PUSH2 0xFA2 ADD MSTORE PUSH0 PUSH2 0xF67 ADD MSTORE PUSH0 PUSH2 0x1292 ADD MSTORE PUSH0 PUSH2 0x1271 ADD MSTORE PUSH0 PUSH2 0xB58 ADD MSTORE PUSH0 PUSH2 0xBAE ADD MSTORE PUSH0 PUSH2 0xBD7 ADD MSTORE PUSH2 0x21B5 PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x140 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xB6 JUMPI DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x7A JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x330 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x34E JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x36C JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x39C JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x3B8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3E8 JUMPI PUSH2 0x140 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2AC JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x2B6 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x2D2 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x302 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x30C JUMPI PUSH2 0x140 JUMP JUMPDEST DUP1 PUSH4 0x3644E515 GT PUSH2 0x108 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x21C JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x226 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x27C JUMPI PUSH2 0x140 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x144 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x162 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B0 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1E0 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x14C PUSH2 0x404 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x159 SWAP2 SWAP1 PUSH2 0x19FA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x177 SWAP2 SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH2 0x494 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x189 SWAP2 SWAP1 PUSH2 0x1B03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19A PUSH2 0x4B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A7 SWAP2 SWAP1 PUSH2 0x1B2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C5 SWAP2 SWAP1 PUSH2 0x1B44 JUMP JUMPDEST PUSH2 0x4BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D7 SWAP2 SWAP1 PUSH2 0x1B03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E8 PUSH2 0x4ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F5 SWAP2 SWAP1 PUSH2 0x1BAF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x206 PUSH2 0x4F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x213 SWAP2 SWAP1 PUSH2 0x1BE0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x224 PUSH2 0x503 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x240 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23B SWAP2 SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH2 0x515 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x257 SWAP2 SWAP1 PUSH2 0x1BF9 JUMP JUMPDEST PUSH2 0x52B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x266 PUSH2 0x53F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x273 SWAP2 SWAP1 PUSH2 0x1B03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x296 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x291 SWAP2 SWAP1 PUSH2 0x1C24 JUMP JUMPDEST PUSH2 0x554 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A3 SWAP2 SWAP1 PUSH2 0x1B2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B4 PUSH2 0x599 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2CB SWAP2 SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH2 0x5AC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2EC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E7 SWAP2 SWAP1 PUSH2 0x1C24 JUMP JUMPDEST PUSH2 0x5CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F9 SWAP2 SWAP1 PUSH2 0x1B2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x30A PUSH2 0x5DD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x314 PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x327 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D4F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x338 PUSH2 0x694 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x345 SWAP2 SWAP1 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x356 PUSH2 0x6BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x363 SWAP2 SWAP1 PUSH2 0x19FA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x386 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x381 SWAP2 SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x393 SWAP2 SWAP1 PUSH2 0x1B03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3B6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3B1 SWAP2 SWAP1 PUSH2 0x1E3E JUMP JUMPDEST PUSH2 0x76F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3D2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3CD SWAP2 SWAP1 PUSH2 0x1EDB JUMP JUMPDEST PUSH2 0x8B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3DF SWAP2 SWAP1 PUSH2 0x1B2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x402 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3FD SWAP2 SWAP1 PUSH2 0x1C24 JUMP JUMPDEST PUSH2 0x936 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x413 SWAP1 PUSH2 0x1F46 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x43F SWAP1 PUSH2 0x1F46 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x48A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x461 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x48A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x46D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x49E PUSH2 0x9BA JUMP JUMPDEST SWAP1 POP PUSH2 0x4AB DUP2 DUP6 DUP6 PUSH2 0x9C1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x4C9 PUSH2 0x9BA JUMP JUMPDEST SWAP1 POP PUSH2 0x4D6 DUP6 DUP3 DUP6 PUSH2 0x9D3 JUMP JUMPDEST PUSH2 0x4E1 DUP6 DUP6 DUP6 PUSH2 0xA65 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x4FE PUSH2 0xB55 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x50B PUSH2 0xC0B JUMP JUMPDEST PUSH2 0x513 PUSH2 0xC92 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x51D PUSH2 0xC0B JUMP JUMPDEST PUSH2 0x527 DUP3 DUP3 PUSH2 0xCF3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x53C PUSH2 0x536 PUSH2 0x9BA JUMP JUMPDEST DUP3 PUSH2 0xD72 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5A1 PUSH2 0xC0B JUMP JUMPDEST PUSH2 0x5AA PUSH0 PUSH2 0xDF1 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x5BE DUP3 PUSH2 0x5B8 PUSH2 0x9BA JUMP JUMPDEST DUP4 PUSH2 0x9D3 JUMP JUMPDEST PUSH2 0x5C8 DUP3 DUP3 PUSH2 0xD72 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH2 0x5D6 DUP3 PUSH2 0xEB6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5E5 PUSH2 0xC0B JUMP JUMPDEST PUSH2 0x5ED PUSH2 0xEFC JUMP JUMPDEST JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x60 PUSH2 0x600 PUSH2 0xF5E JUMP JUMPDEST PUSH2 0x608 PUSH2 0xF99 JUMP JUMPDEST CHAINID ADDRESS PUSH0 DUP1 SHL PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x627 JUMPI PUSH2 0x626 PUSH2 0x1F76 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x655 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH32 0xF00000000000000000000000000000000000000000000000000000000000000 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x6CC SWAP1 PUSH2 0x1F46 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x6F8 SWAP1 PUSH2 0x1F46 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x743 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x71A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x743 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x726 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x757 PUSH2 0x9BA JUMP JUMPDEST SWAP1 POP PUSH2 0x764 DUP2 DUP6 DUP6 PUSH2 0xA65 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x7B4 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x6279130200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7AB SWAP2 SWAP1 PUSH2 0x1B2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x7E2 DUP13 PUSH2 0xFD4 JUMP JUMPDEST DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x7F8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1FA3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH0 PUSH2 0x81A DUP3 PUSH2 0x1027 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x829 DUP3 DUP8 DUP8 DUP8 PUSH2 0x1040 JUMP JUMPDEST SWAP1 POP DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x89D JUMPI DUP1 DUP11 PUSH1 0x40 MLOAD PUSH32 0x4B800E4600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x894 SWAP3 SWAP2 SWAP1 PUSH2 0x2002 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8A8 DUP11 DUP11 DUP11 PUSH2 0x9C1 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x93E PUSH2 0xC0B JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x9AE JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9A5 SWAP2 SWAP1 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9B7 DUP2 PUSH2 0xDF1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x9CE DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x106E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x9DE DUP5 DUP5 PUSH2 0x8B4 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0xA5F JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xA50 JUMPI DUP3 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA47 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2029 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA5E DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x106E JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xAD5 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xACC SWAP2 SWAP1 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xB45 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB3C SWAP2 SWAP1 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB50 DUP4 DUP4 DUP4 PUSH2 0x123D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0xBD0 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0xBFD JUMPI PUSH32 0x0 SWAP1 POP PUSH2 0xC08 JUMP JUMPDEST PUSH2 0xC05 PUSH2 0x124D JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC13 PUSH2 0x9BA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC31 PUSH2 0x694 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC90 JUMPI PUSH2 0xC54 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC87 SWAP2 SWAP1 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0xC9A PUSH2 0x12E2 JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0xCDC PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCE9 SWAP2 SWAP1 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD63 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD5A SWAP2 SWAP1 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD6E PUSH0 DUP4 DUP4 PUSH2 0x123D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xDE2 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDD9 SWAP2 SWAP1 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDED DUP3 PUSH0 DUP4 PUSH2 0x123D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x5 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x8 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF04 PUSH2 0x1322 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x5 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0xF47 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF54 SWAP2 SWAP1 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF94 PUSH1 0x6 PUSH32 0x0 PUSH2 0x1363 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xFCF PUSH1 0x7 PUSH32 0x0 PUSH2 0x1363 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x8 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 ADD SWAP2 SWAP1 POP SSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1039 PUSH2 0x1033 PUSH2 0xB55 JUMP JUMPDEST DUP4 PUSH2 0x1410 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH2 0x1050 DUP9 DUP9 DUP9 DUP9 PUSH2 0x1450 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x1060 DUP3 DUP3 PUSH2 0x1537 JUMP JUMPDEST DUP3 SWAP4 POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x10DE JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10D5 SWAP2 SWAP1 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x114E JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1145 SWAP2 SWAP1 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x1237 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x122E SWAP2 SWAP1 PUSH2 0x1B2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1248 DUP4 DUP4 DUP4 PUSH2 0x1699 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH32 0x0 PUSH32 0x0 CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x12C7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x205E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x12EA PUSH2 0x53F JUMP JUMPDEST PUSH2 0x1320 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8DFC202B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x132A PUSH2 0x53F JUMP JUMPDEST ISZERO PUSH2 0x1361 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD93C066500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF PUSH0 SHL DUP4 EQ PUSH2 0x137F JUMPI PUSH2 0x1378 DUP4 PUSH2 0x16B1 JUMP JUMPDEST SWAP1 POP PUSH2 0x140A JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0x138B SWAP1 PUSH2 0x1F46 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x13B7 SWAP1 PUSH2 0x1F46 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1402 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x13D9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1402 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x13E5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP4 PUSH1 0x2 DUP3 ADD MSTORE DUP3 PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 DUP2 KECCAK256 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 PUSH0 SHR GT ISZERO PUSH2 0x148C JUMPI PUSH0 PUSH1 0x3 DUP6 SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x152D JUMP JUMPDEST PUSH0 PUSH1 0x1 DUP9 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x14AF SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x20AF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x14CF JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1520 JUMPI PUSH0 PUSH1 0x1 PUSH0 DUP1 SHL SWAP4 POP SWAP4 POP SWAP4 POP POP PUSH2 0x152D JUMP JUMPDEST DUP1 PUSH0 DUP1 PUSH0 SHL SWAP4 POP SWAP4 POP SWAP4 POP POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x154A JUMPI PUSH2 0x1549 PUSH2 0x20F2 JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x155D JUMPI PUSH2 0x155C PUSH2 0x20F2 JUMP JUMPDEST JUMPDEST SUB ISZERO PUSH2 0x1695 JUMPI PUSH1 0x1 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1577 JUMPI PUSH2 0x1576 PUSH2 0x20F2 JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x158A JUMPI PUSH2 0x1589 PUSH2 0x20F2 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x15C1 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF645EEDF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x15D5 JUMPI PUSH2 0x15D4 PUSH2 0x20F2 JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x15E8 JUMPI PUSH2 0x15E7 PUSH2 0x20F2 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x162C JUMPI DUP1 PUSH0 SHR PUSH1 0x40 MLOAD PUSH32 0xFCE698F700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1623 SWAP2 SWAP1 PUSH2 0x1B2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP1 DUP2 GT ISZERO PUSH2 0x163F JUMPI PUSH2 0x163E PUSH2 0x20F2 JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1652 JUMPI PUSH2 0x1651 PUSH2 0x20F2 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x1694 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0xD78BCE0C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x168B SWAP2 SWAP1 PUSH2 0x1BE0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x16A1 PUSH2 0x1322 JUMP JUMPDEST PUSH2 0x16AC DUP4 DUP4 DUP4 PUSH2 0x1723 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x16BD DUP4 PUSH2 0x193C JUMP JUMPDEST SWAP1 POP PUSH0 PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x16DB JUMPI PUSH2 0x16DA PUSH2 0x1F76 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x170D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE DUP1 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1773 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x1767 SWAP2 SWAP1 PUSH2 0x214C JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1841 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x17FC JUMPI DUP4 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17F3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2029 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1888 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x18D2 JUMP JUMPDEST DUP1 PUSH0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x192F SWAP2 SWAP1 PUSH2 0x1B2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0xFF DUP4 PUSH0 SHR AND SWAP1 POP PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x1981 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB3512B0C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 MCOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x19CC DUP3 PUSH2 0x198A JUMP JUMPDEST PUSH2 0x19D6 DUP2 DUP6 PUSH2 0x1994 JUMP JUMPDEST SWAP4 POP PUSH2 0x19E6 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x19A4 JUMP JUMPDEST PUSH2 0x19EF DUP2 PUSH2 0x19B2 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1A12 DUP2 DUP5 PUSH2 0x19C2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1A47 DUP3 PUSH2 0x1A1E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A57 DUP2 PUSH2 0x1A3D JUMP JUMPDEST DUP2 EQ PUSH2 0x1A61 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1A72 DUP2 PUSH2 0x1A4E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A8A DUP2 PUSH2 0x1A78 JUMP JUMPDEST DUP2 EQ PUSH2 0x1A94 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1AA5 DUP2 PUSH2 0x1A81 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1AC1 JUMPI PUSH2 0x1AC0 PUSH2 0x1A1A JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1ACE DUP6 DUP3 DUP7 ADD PUSH2 0x1A64 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1ADF DUP6 DUP3 DUP7 ADD PUSH2 0x1A97 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AFD DUP2 PUSH2 0x1AE9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B16 PUSH0 DUP4 ADD DUP5 PUSH2 0x1AF4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1B25 DUP2 PUSH2 0x1A78 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B3E PUSH0 DUP4 ADD DUP5 PUSH2 0x1B1C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1B5B JUMPI PUSH2 0x1B5A PUSH2 0x1A1A JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1B68 DUP7 DUP3 DUP8 ADD PUSH2 0x1A64 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1B79 DUP7 DUP3 DUP8 ADD PUSH2 0x1A64 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1B8A DUP7 DUP3 DUP8 ADD PUSH2 0x1A97 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1BA9 DUP2 PUSH2 0x1B94 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1BC2 PUSH0 DUP4 ADD DUP5 PUSH2 0x1BA0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1BDA DUP2 PUSH2 0x1BC8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1BF3 PUSH0 DUP4 ADD DUP5 PUSH2 0x1BD1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C0E JUMPI PUSH2 0x1C0D PUSH2 0x1A1A JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1C1B DUP5 DUP3 DUP6 ADD PUSH2 0x1A97 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C39 JUMPI PUSH2 0x1C38 PUSH2 0x1A1A JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1C46 DUP5 DUP3 DUP6 ADD PUSH2 0x1A64 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1C83 DUP2 PUSH2 0x1C4F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1C92 DUP2 PUSH2 0x1A3D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1CCA DUP2 PUSH2 0x1A78 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1CDB DUP4 DUP4 PUSH2 0x1CC1 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1CFD DUP3 PUSH2 0x1C98 JUMP JUMPDEST PUSH2 0x1D07 DUP2 DUP6 PUSH2 0x1CA2 JUMP JUMPDEST SWAP4 POP PUSH2 0x1D12 DUP4 PUSH2 0x1CB2 JUMP JUMPDEST DUP1 PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1D42 JUMPI DUP2 MLOAD PUSH2 0x1D29 DUP9 DUP3 PUSH2 0x1CD0 JUMP JUMPDEST SWAP8 POP PUSH2 0x1D34 DUP4 PUSH2 0x1CE7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x1D15 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0xE0 DUP3 ADD SWAP1 POP PUSH2 0x1D62 PUSH0 DUP4 ADD DUP11 PUSH2 0x1C7A JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1D74 DUP2 DUP10 PUSH2 0x19C2 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x1D88 DUP2 DUP9 PUSH2 0x19C2 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D97 PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x1B1C JUMP JUMPDEST PUSH2 0x1DA4 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x1C89 JUMP JUMPDEST PUSH2 0x1DB1 PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x1BD1 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x1DC3 DUP2 DUP5 PUSH2 0x1CF3 JUMP JUMPDEST SWAP1 POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1DE4 PUSH0 DUP4 ADD DUP5 PUSH2 0x1C89 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1DF3 DUP2 PUSH2 0x1B94 JUMP JUMPDEST DUP2 EQ PUSH2 0x1DFD JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1E0E DUP2 PUSH2 0x1DEA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1E1D DUP2 PUSH2 0x1BC8 JUMP JUMPDEST DUP2 EQ PUSH2 0x1E27 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1E38 DUP2 PUSH2 0x1E14 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x1E59 JUMPI PUSH2 0x1E58 PUSH2 0x1A1A JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1E66 DUP11 DUP3 DUP12 ADD PUSH2 0x1A64 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x1E77 DUP11 DUP3 DUP12 ADD PUSH2 0x1A64 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x1E88 DUP11 DUP3 DUP12 ADD PUSH2 0x1A97 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x1E99 DUP11 DUP3 DUP12 ADD PUSH2 0x1A97 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x1EAA DUP11 DUP3 DUP12 ADD PUSH2 0x1E00 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x1EBB DUP11 DUP3 DUP12 ADD PUSH2 0x1E2A JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x1ECC DUP11 DUP3 DUP12 ADD PUSH2 0x1E2A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1EF1 JUMPI PUSH2 0x1EF0 PUSH2 0x1A1A JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1EFE DUP6 DUP3 DUP7 ADD PUSH2 0x1A64 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1F0F DUP6 DUP3 DUP7 ADD PUSH2 0x1A64 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1F5D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1F70 JUMPI PUSH2 0x1F6F PUSH2 0x1F19 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x1FB6 PUSH0 DUP4 ADD DUP10 PUSH2 0x1BD1 JUMP JUMPDEST PUSH2 0x1FC3 PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x1C89 JUMP JUMPDEST PUSH2 0x1FD0 PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x1C89 JUMP JUMPDEST PUSH2 0x1FDD PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x1B1C JUMP JUMPDEST PUSH2 0x1FEA PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x1B1C JUMP JUMPDEST PUSH2 0x1FF7 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x1B1C JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2015 PUSH0 DUP4 ADD DUP6 PUSH2 0x1C89 JUMP JUMPDEST PUSH2 0x2022 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1C89 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x203C PUSH0 DUP4 ADD DUP7 PUSH2 0x1C89 JUMP JUMPDEST PUSH2 0x2049 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1B1C JUMP JUMPDEST PUSH2 0x2056 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1B1C JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x2071 PUSH0 DUP4 ADD DUP9 PUSH2 0x1BD1 JUMP JUMPDEST PUSH2 0x207E PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x1BD1 JUMP JUMPDEST PUSH2 0x208B PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x1BD1 JUMP JUMPDEST PUSH2 0x2098 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x1B1C JUMP JUMPDEST PUSH2 0x20A5 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x1C89 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x20C2 PUSH0 DUP4 ADD DUP8 PUSH2 0x1BD1 JUMP JUMPDEST PUSH2 0x20CF PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1BA0 JUMP JUMPDEST PUSH2 0x20DC PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1BD1 JUMP JUMPDEST PUSH2 0x20E9 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x1BD1 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x2156 DUP3 PUSH2 0x1A78 JUMP JUMPDEST SWAP2 POP PUSH2 0x2161 DUP4 PUSH2 0x1A78 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x2179 JUMPI PUSH2 0x2178 PUSH2 0x211F JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT SWAP15 MUL CODECOPY MSTORE8 0xB2 0xE SWAP3 DUP11 DUP2 0xC3 0xDF MSTORE8 SLT 0xE9 0xE9 PUSH16 0xBDDFB24A474C672D6EE9DFE43B5DBC64 PUSH20 0x6F6C634300081A00334768616E6120436F6D6D75 PUSH15 0x69636174696F6E20546563686E6F6C PUSH16 0x677920556E6976657273697479200000 ",
							"sourceMap": "450:820:21:-:0;;;566:208;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1574:52:7;;;;;;;;;;;;;;;;;1613:4;3328:431:17;;;;;;;;;;;;;;;;;686:12:21;1896:113:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1970:5;1962;:13;;;;;;:::i;:::-;;1995:7;1985;:17;;;;;;:::i;:::-;;1896:113;;1241:5:12;1231:7;;:15;;;;;;;;;;;;;;;;;;1297:1:0;1273:26;;:12;:26;;;1269:95;;1350:1;1322:31;;;;;;;;;;;:::i;:::-;;;;;;;;1269:95;1373:32;1392:12;1373:18;;;:32;;:::i;:::-;1225:187;3401:45:17;3432:13;3401:4;:30;;;;:45;;;;:::i;:::-;3393:53;;;;;;3467:51;3501:16;3467:7;:33;;;;:51;;;;:::i;:::-;3456:62;;;;;;3558:4;3542:22;;;;;;3528:36;;;;;;3607:7;3591:25;;;;;;3574:42;;;;;;3644:13;3627:30;;;;;;3692:23;:21;;;:23;;:::i;:::-;3667:48;;;;;;3747:4;3725:27;;;;;;;;;;3328:431;;1574:52:7;566:208:21;450:820;;2912:187:0;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;2914:340:13:-;3010:11;3059:2;3043:5;3037:19;:24;3033:215;;;3084:20;3098:5;3084:13;;;:20;;:::i;:::-;3077:27;;;;3033:215;3176:5;3135:32;3161:5;3135:25;;;:32;;:::i;:::-;:38;;:46;;;;;;:::i;:::-;;1390:66;3219:17;;3195:42;;2914:340;;;;;:::o;4113:179:17:-;4168:7;2079:95;4226:11;;4239:14;;4255:13;4278:4;4204:80;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4194:91;;;;;;4187:98;;4113:179;:::o;1708:286:13:-;1773:11;1796:17;1822:3;1796:30;;1854:2;1840:4;:11;:16;1836:72;;;1893:3;1879:18;;;;;;;;;;;:::i;:::-;;;;;;;;1836:72;1974:4;:11;1965:4;1957:13;;;:::i;:::-;1949:22;;:36;1941:45;;1917:70;;;1708:286;;;:::o;3135:202:14:-;3203:20;3311:10;3301:20;;3135:202;;;:::o;88:117:22:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:351::-;915:6;964:2;952:9;943:7;939:23;935:32;932:119;;;970:79;;:::i;:::-;932:119;1090:1;1115:64;1171:7;1162:6;1151:9;1147:22;1115:64;:::i;:::-;1105:74;;1061:128;845:351;;;;:::o;1202:99::-;1254:6;1288:5;1282:12;1272:22;;1202:99;;;:::o;1307:180::-;1355:77;1352:1;1345:88;1452:4;1449:1;1442:15;1476:4;1473:1;1466:15;1493:180;1541:77;1538:1;1531:88;1638:4;1635:1;1628:15;1662:4;1659:1;1652:15;1679:320;1723:6;1760:1;1754:4;1750:12;1740:22;;1807:1;1801:4;1797:12;1828:18;1818:81;;1884:4;1876:6;1872:17;1862:27;;1818:81;1946:2;1938:6;1935:14;1915:18;1912:38;1909:84;;1965:18;;:::i;:::-;1909:84;1730:269;1679:320;;;:::o;2005:141::-;2054:4;2077:3;2069:11;;2100:3;2097:1;2090:14;2134:4;2131:1;2121:18;2113:26;;2005:141;;;:::o;2152:93::-;2189:6;2236:2;2231;2224:5;2220:14;2216:23;2206:33;;2152:93;;;:::o;2251:107::-;2295:8;2345:5;2339:4;2335:16;2314:37;;2251:107;;;;:::o;2364:393::-;2433:6;2483:1;2471:10;2467:18;2506:97;2536:66;2525:9;2506:97;:::i;:::-;2624:39;2654:8;2643:9;2624:39;:::i;:::-;2612:51;;2696:4;2692:9;2685:5;2681:21;2672:30;;2745:4;2735:8;2731:19;2724:5;2721:30;2711:40;;2440:317;;2364:393;;;;;:::o;2763:77::-;2800:7;2829:5;2818:16;;2763:77;;;:::o;2846:60::-;2874:3;2895:5;2888:12;;2846:60;;;:::o;2912:142::-;2962:9;2995:53;3013:34;3022:24;3040:5;3022:24;:::i;:::-;3013:34;:::i;:::-;2995:53;:::i;:::-;2982:66;;2912:142;;;:::o;3060:75::-;3103:3;3124:5;3117:12;;3060:75;;;:::o;3141:269::-;3251:39;3282:7;3251:39;:::i;:::-;3312:91;3361:41;3385:16;3361:41;:::i;:::-;3353:6;3346:4;3340:11;3312:91;:::i;:::-;3306:4;3299:105;3217:193;3141:269;;;:::o;3416:73::-;3461:3;3416:73;:::o;3495:189::-;3572:32;;:::i;:::-;3613:65;3671:6;3663;3657:4;3613:65;:::i;:::-;3548:136;3495:189;;:::o;3690:186::-;3750:120;3767:3;3760:5;3757:14;3750:120;;;3821:39;3858:1;3851:5;3821:39;:::i;:::-;3794:1;3787:5;3783:13;3774:22;;3750:120;;;3690:186;;:::o;3882:543::-;3983:2;3978:3;3975:11;3972:446;;;4017:38;4049:5;4017:38;:::i;:::-;4101:29;4119:10;4101:29;:::i;:::-;4091:8;4087:44;4284:2;4272:10;4269:18;4266:49;;;4305:8;4290:23;;4266:49;4328:80;4384:22;4402:3;4384:22;:::i;:::-;4374:8;4370:37;4357:11;4328:80;:::i;:::-;3987:431;;3972:446;3882:543;;;:::o;4431:117::-;4485:8;4535:5;4529:4;4525:16;4504:37;;4431:117;;;;:::o;4554:169::-;4598:6;4631:51;4679:1;4675:6;4667:5;4664:1;4660:13;4631:51;:::i;:::-;4627:56;4712:4;4706;4702:15;4692:25;;4605:118;4554:169;;;;:::o;4728:295::-;4804:4;4950:29;4975:3;4969:4;4950:29;:::i;:::-;4942:37;;5012:3;5009:1;5005:11;4999:4;4996:21;4988:29;;4728:295;;;;:::o;5028:1395::-;5145:37;5178:3;5145:37;:::i;:::-;5247:18;5239:6;5236:30;5233:56;;;5269:18;;:::i;:::-;5233:56;5313:38;5345:4;5339:11;5313:38;:::i;:::-;5398:67;5458:6;5450;5444:4;5398:67;:::i;:::-;5492:1;5516:4;5503:17;;5548:2;5540:6;5537:14;5565:1;5560:618;;;;6222:1;6239:6;6236:77;;;6288:9;6283:3;6279:19;6273:26;6264:35;;6236:77;6339:67;6399:6;6392:5;6339:67;:::i;:::-;6333:4;6326:81;6195:222;5530:887;;5560:618;5612:4;5608:9;5600:6;5596:22;5646:37;5678:4;5646:37;:::i;:::-;5705:1;5719:208;5733:7;5730:1;5727:14;5719:208;;;5812:9;5807:3;5803:19;5797:26;5789:6;5782:42;5863:1;5855:6;5851:14;5841:24;;5910:2;5899:9;5895:18;5882:31;;5756:4;5753:1;5749:12;5744:17;;5719:208;;;5955:6;5946:7;5943:19;5940:179;;;6013:9;6008:3;6004:19;5998:26;6056:48;6098:4;6090:6;6086:17;6075:9;6056:48;:::i;:::-;6048:6;6041:64;5963:156;5940:179;6165:1;6161;6153:6;6149:14;6145:22;6139:4;6132:36;5567:611;;;5530:887;;5120:1303;;;5028:1395;;:::o;6429:118::-;6516:24;6534:5;6516:24;:::i;:::-;6511:3;6504:37;6429:118;;:::o;6553:222::-;6646:4;6684:2;6673:9;6669:18;6661:26;;6697:71;6765:1;6754:9;6750:17;6741:6;6697:71;:::i;:::-;6553:222;;;;:::o;6781:77::-;6818:7;6847:5;6836:16;;6781:77;;;:::o;6864:118::-;6951:24;6969:5;6951:24;:::i;:::-;6946:3;6939:37;6864:118;;:::o;6988:::-;7075:24;7093:5;7075:24;:::i;:::-;7070:3;7063:37;6988:118;;:::o;7112:664::-;7317:4;7355:3;7344:9;7340:19;7332:27;;7369:71;7437:1;7426:9;7422:17;7413:6;7369:71;:::i;:::-;7450:72;7518:2;7507:9;7503:18;7494:6;7450:72;:::i;:::-;7532;7600:2;7589:9;7585:18;7576:6;7532:72;:::i;:::-;7614;7682:2;7671:9;7667:18;7658:6;7614:72;:::i;:::-;7696:73;7764:3;7753:9;7749:19;7740:6;7696:73;:::i;:::-;7112:664;;;;;;;;:::o;7782:169::-;7866:11;7900:6;7895:3;7888:19;7940:4;7935:3;7931:14;7916:29;;7782:169;;;;:::o;7957:139::-;8046:6;8041:3;8036;8030:23;8087:1;8078:6;8073:3;8069:16;8062:27;7957:139;;;:::o;8102:102::-;8143:6;8194:2;8190:7;8185:2;8178:5;8174:14;8170:28;8160:38;;8102:102;;;:::o;8210:377::-;8298:3;8326:39;8359:5;8326:39;:::i;:::-;8381:71;8445:6;8440:3;8381:71;:::i;:::-;8374:78;;8461:65;8519:6;8514:3;8507:4;8500:5;8496:16;8461:65;:::i;:::-;8551:29;8573:6;8551:29;:::i;:::-;8546:3;8542:39;8535:46;;8302:285;8210:377;;;;:::o;8593:313::-;8706:4;8744:2;8733:9;8729:18;8721:26;;8793:9;8787:4;8783:20;8779:1;8768:9;8764:17;8757:47;8821:78;8894:4;8885:6;8821:78;:::i;:::-;8813:86;;8593:313;;;;:::o;8912:98::-;8963:6;8997:5;8991:12;8981:22;;8912:98;;;:::o;9016:116::-;9067:4;9090:3;9082:11;;9120:4;9115:3;9111:14;9103:22;;9016:116;;;:::o;9138:154::-;9181:11;9217:29;9241:3;9235:10;9217:29;:::i;:::-;9280:5;9256:29;;9193:99;9138:154;;;:::o;9298:594::-;9382:5;9413:38;9445:5;9413:38;:::i;:::-;9476:5;9503:40;9537:5;9503:40;:::i;:::-;9491:52;;9562:35;9588:8;9562:35;:::i;:::-;9553:44;;9621:2;9613:6;9610:14;9607:278;;;9692:169;9777:66;9747:6;9743:2;9739:15;9736:1;9732:23;9692:169;:::i;:::-;9669:5;9648:227;9639:236;;9607:278;9388:504;;9298:594;;;:::o;450:820:21:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@DOMAIN_SEPARATOR_1135": {
									"entryPoint": 1269,
									"id": 1135,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_EIP712Name_2557": {
									"entryPoint": 3934,
									"id": 2557,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_EIP712Version_2569": {
									"entryPoint": 3993,
									"id": 2569,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_approve_715": {
									"entryPoint": 2497,
									"id": 715,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_775": {
									"entryPoint": 4206,
									"id": 775,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_buildDomainSeparator_2487": {
									"entryPoint": 4685,
									"id": 2487,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_burn_697": {
									"entryPoint": 3442,
									"id": 697,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkOwner_84": {
									"entryPoint": 3083,
									"id": 84,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_domainSeparatorV4_2466": {
									"entryPoint": 2901,
									"id": 2466,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_hashTypedDataV4_2503": {
									"entryPoint": 4135,
									"id": 2503,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_mint_664": {
									"entryPoint": 3315,
									"id": 664,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_1210": {
									"entryPoint": 2490,
									"id": 1210,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_pause_1396": {
									"entryPoint": 3836,
									"id": 1396,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_requireNotPaused_1367": {
									"entryPoint": 4898,
									"id": 1367,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_requirePaused_1380": {
									"entryPoint": 4834,
									"id": 1380,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_spendAllowance_823": {
									"entryPoint": 2515,
									"id": 823,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_throwError_2342": {
									"entryPoint": 5431,
									"id": 2342,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_transferOwnership_146": {
									"entryPoint": 3569,
									"id": 146,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_transfer_554": {
									"entryPoint": 2661,
									"id": 554,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_unpause_1412": {
									"entryPoint": 3218,
									"id": 1412,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_update_3890": {
									"entryPoint": 4669,
									"id": 3890,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_631": {
									"entryPoint": 5923,
									"id": 631,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_981": {
									"entryPoint": 5785,
									"id": 981,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_useNonce_1270": {
									"entryPoint": 4052,
									"id": 1270,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@allowance_451": {
									"entryPoint": 2228,
									"id": 451,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_475": {
									"entryPoint": 1172,
									"id": 475,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_410": {
									"entryPoint": 1364,
									"id": 410,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@burnFrom_947": {
									"entryPoint": 1452,
									"id": 947,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@burn_926": {
									"entryPoint": 1323,
									"id": 926,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@byteLength_1531": {
									"entryPoint": 6460,
									"id": 1531,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_388": {
									"entryPoint": 1261,
									"id": 388,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@eip712Domain_2545": {
									"entryPoint": 1519,
									"id": 2545,
									"parameterSlots": 0,
									"returnSlots": 7
								},
								"@mint_3869": {
									"entryPoint": 1301,
									"id": 3869,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@name_370": {
									"entryPoint": 1028,
									"id": 370,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@nonces_1125": {
									"entryPoint": 1484,
									"id": 1125,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@nonces_1255": {
									"entryPoint": 3766,
									"id": 1255,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owner_67": {
									"entryPoint": 1684,
									"id": 67,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@pause_3845": {
									"entryPoint": 1501,
									"id": 3845,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@paused_1355": {
									"entryPoint": 1343,
									"id": 1355,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@permit_1108": {
									"entryPoint": 1903,
									"id": 1108,
									"parameterSlots": 7,
									"returnSlots": 0
								},
								"@recover_2293": {
									"entryPoint": 4160,
									"id": 2293,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@renounceOwnership_98": {
									"entryPoint": 1433,
									"id": 98,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@symbol_379": {
									"entryPoint": 1725,
									"id": 379,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@toStringWithFallback_1598": {
									"entryPoint": 4963,
									"id": 1598,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@toString_1499": {
									"entryPoint": 5809,
									"id": 1499,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@toTypedDataHash_2643": {
									"entryPoint": 5136,
									"id": 2643,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@totalSupply_397": {
									"entryPoint": 1206,
									"id": 397,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_507": {
									"entryPoint": 1215,
									"id": 507,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transferOwnership_126": {
									"entryPoint": 2358,
									"id": 126,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@transfer_434": {
									"entryPoint": 1869,
									"id": 434,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@tryRecover_2257": {
									"entryPoint": 5200,
									"id": 2257,
									"parameterSlots": 4,
									"returnSlots": 3
								},
								"@unpause_3854": {
									"entryPoint": 1283,
									"id": 3854,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"abi_decode_t_address": {
									"entryPoint": 6756,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_bytes32": {
									"entryPoint": 7722,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 6807,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint8": {
									"entryPoint": 7680,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 7204,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 7899,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 6980,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32": {
									"entryPoint": 7742,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 7
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 6827,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 7161,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encodeUpdatedPos_t_uint256_to_t_uint256": {
									"entryPoint": 7376,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_address_to_t_address_fromStack": {
									"entryPoint": 7305,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack": {
									"entryPoint": 7411,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 6900,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes1_to_t_bytes1_fromStack": {
									"entryPoint": 7290,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_bytes32_to_t_bytes32_fromStack": {
									"entryPoint": 7121,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
									"entryPoint": 6594,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_t_uint256_to_t_uint256": {
									"entryPoint": 7361,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint256_to_t_uint256_fromStack": {
									"entryPoint": 6940,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_t_uint8_to_t_uint8_fromStack": {
									"entryPoint": 7072,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": 7633,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
									"entryPoint": 8194,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": 8233,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 6915,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
									"entryPoint": 7503,
									"id": null,
									"parameterSlots": 8,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": 7136,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": 8099,
									"id": null,
									"parameterSlots": 7,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
									"entryPoint": 8286,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
									"entryPoint": 8367,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 6650,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": 6955,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": 7087,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"array_dataslot_t_array$_t_uint256_$dyn_memory_ptr": {
									"entryPoint": 7346,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_array$_t_uint256_$dyn_memory_ptr": {
									"entryPoint": 7320,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_length_t_string_memory_ptr": {
									"entryPoint": 6538,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_nextElement_t_array$_t_uint256_$dyn_memory_ptr": {
									"entryPoint": 7399,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack": {
									"entryPoint": 7330,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
									"entryPoint": 6548,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 8524,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_address": {
									"entryPoint": 6717,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 6889,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bytes1": {
									"entryPoint": 7247,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_bytes32": {
									"entryPoint": 7112,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint160": {
									"entryPoint": 6686,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 6776,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint8": {
									"entryPoint": 7060,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 6564,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 8006,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 8479,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x21": {
									"entryPoint": 8434,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x22": {
									"entryPoint": 7961,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 8054,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 6682,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"round_up_to_mul_of_32": {
									"entryPoint": 6578,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"validator_revert_t_address": {
									"entryPoint": 6734,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_bytes32": {
									"entryPoint": 7700,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 6785,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"validator_revert_t_uint8": {
									"entryPoint": 7658,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:15609:22",
										"nodeType": "YulBlock",
										"src": "0:15609:22",
										"statements": [
											{
												"body": {
													"nativeSrc": "66:40:22",
													"nodeType": "YulBlock",
													"src": "66:40:22",
													"statements": [
														{
															"nativeSrc": "77:22:22",
															"nodeType": "YulAssignment",
															"src": "77:22:22",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "93:5:22",
																		"nodeType": "YulIdentifier",
																		"src": "93:5:22"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "87:5:22",
																	"nodeType": "YulIdentifier",
																	"src": "87:5:22"
																},
																"nativeSrc": "87:12:22",
																"nodeType": "YulFunctionCall",
																"src": "87:12:22"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "77:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "77:6:22"
																}
															]
														}
													]
												},
												"name": "array_length_t_string_memory_ptr",
												"nativeSrc": "7:99:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "49:5:22",
														"nodeType": "YulTypedName",
														"src": "49:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "59:6:22",
														"nodeType": "YulTypedName",
														"src": "59:6:22",
														"type": ""
													}
												],
												"src": "7:99:22"
											},
											{
												"body": {
													"nativeSrc": "208:73:22",
													"nodeType": "YulBlock",
													"src": "208:73:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "225:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "225:3:22"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "230:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "230:6:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "218:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "218:6:22"
																},
																"nativeSrc": "218:19:22",
																"nodeType": "YulFunctionCall",
																"src": "218:19:22"
															},
															"nativeSrc": "218:19:22",
															"nodeType": "YulExpressionStatement",
															"src": "218:19:22"
														},
														{
															"nativeSrc": "246:29:22",
															"nodeType": "YulAssignment",
															"src": "246:29:22",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "265:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "265:3:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "270:4:22",
																		"nodeType": "YulLiteral",
																		"src": "270:4:22",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "261:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "261:3:22"
																},
																"nativeSrc": "261:14:22",
																"nodeType": "YulFunctionCall",
																"src": "261:14:22"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nativeSrc": "246:11:22",
																	"nodeType": "YulIdentifier",
																	"src": "246:11:22"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
												"nativeSrc": "112:169:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "180:3:22",
														"nodeType": "YulTypedName",
														"src": "180:3:22",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "185:6:22",
														"nodeType": "YulTypedName",
														"src": "185:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nativeSrc": "196:11:22",
														"nodeType": "YulTypedName",
														"src": "196:11:22",
														"type": ""
													}
												],
												"src": "112:169:22"
											},
											{
												"body": {
													"nativeSrc": "349:77:22",
													"nodeType": "YulBlock",
													"src": "349:77:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "dst",
																		"nativeSrc": "366:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "366:3:22"
																	},
																	{
																		"name": "src",
																		"nativeSrc": "371:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "371:3:22"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "376:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "376:6:22"
																	}
																],
																"functionName": {
																	"name": "mcopy",
																	"nativeSrc": "360:5:22",
																	"nodeType": "YulIdentifier",
																	"src": "360:5:22"
																},
																"nativeSrc": "360:23:22",
																"nodeType": "YulFunctionCall",
																"src": "360:23:22"
															},
															"nativeSrc": "360:23:22",
															"nodeType": "YulExpressionStatement",
															"src": "360:23:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nativeSrc": "403:3:22",
																				"nodeType": "YulIdentifier",
																				"src": "403:3:22"
																			},
																			{
																				"name": "length",
																				"nativeSrc": "408:6:22",
																				"nodeType": "YulIdentifier",
																				"src": "408:6:22"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "399:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "399:3:22"
																		},
																		"nativeSrc": "399:16:22",
																		"nodeType": "YulFunctionCall",
																		"src": "399:16:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "417:1:22",
																		"nodeType": "YulLiteral",
																		"src": "417:1:22",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "392:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "392:6:22"
																},
																"nativeSrc": "392:27:22",
																"nodeType": "YulFunctionCall",
																"src": "392:27:22"
															},
															"nativeSrc": "392:27:22",
															"nodeType": "YulExpressionStatement",
															"src": "392:27:22"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nativeSrc": "287:139:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nativeSrc": "331:3:22",
														"nodeType": "YulTypedName",
														"src": "331:3:22",
														"type": ""
													},
													{
														"name": "dst",
														"nativeSrc": "336:3:22",
														"nodeType": "YulTypedName",
														"src": "336:3:22",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "341:6:22",
														"nodeType": "YulTypedName",
														"src": "341:6:22",
														"type": ""
													}
												],
												"src": "287:139:22"
											},
											{
												"body": {
													"nativeSrc": "480:54:22",
													"nodeType": "YulBlock",
													"src": "480:54:22",
													"statements": [
														{
															"nativeSrc": "490:38:22",
															"nodeType": "YulAssignment",
															"src": "490:38:22",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "508:5:22",
																				"nodeType": "YulIdentifier",
																				"src": "508:5:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "515:2:22",
																				"nodeType": "YulLiteral",
																				"src": "515:2:22",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "504:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "504:3:22"
																		},
																		"nativeSrc": "504:14:22",
																		"nodeType": "YulFunctionCall",
																		"src": "504:14:22"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "524:2:22",
																				"nodeType": "YulLiteral",
																				"src": "524:2:22",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "520:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "520:3:22"
																		},
																		"nativeSrc": "520:7:22",
																		"nodeType": "YulFunctionCall",
																		"src": "520:7:22"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "500:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "500:3:22"
																},
																"nativeSrc": "500:28:22",
																"nodeType": "YulFunctionCall",
																"src": "500:28:22"
															},
															"variableNames": [
																{
																	"name": "result",
																	"nativeSrc": "490:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "490:6:22"
																}
															]
														}
													]
												},
												"name": "round_up_to_mul_of_32",
												"nativeSrc": "432:102:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "463:5:22",
														"nodeType": "YulTypedName",
														"src": "463:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "result",
														"nativeSrc": "473:6:22",
														"nodeType": "YulTypedName",
														"src": "473:6:22",
														"type": ""
													}
												],
												"src": "432:102:22"
											},
											{
												"body": {
													"nativeSrc": "632:285:22",
													"nodeType": "YulBlock",
													"src": "632:285:22",
													"statements": [
														{
															"nativeSrc": "642:53:22",
															"nodeType": "YulVariableDeclaration",
															"src": "642:53:22",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "689:5:22",
																		"nodeType": "YulIdentifier",
																		"src": "689:5:22"
																	}
																],
																"functionName": {
																	"name": "array_length_t_string_memory_ptr",
																	"nativeSrc": "656:32:22",
																	"nodeType": "YulIdentifier",
																	"src": "656:32:22"
																},
																"nativeSrc": "656:39:22",
																"nodeType": "YulFunctionCall",
																"src": "656:39:22"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "646:6:22",
																	"nodeType": "YulTypedName",
																	"src": "646:6:22",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "704:78:22",
															"nodeType": "YulAssignment",
															"src": "704:78:22",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "770:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "770:3:22"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "775:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "775:6:22"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
																	"nativeSrc": "711:58:22",
																	"nodeType": "YulIdentifier",
																	"src": "711:58:22"
																},
																"nativeSrc": "711:71:22",
																"nodeType": "YulFunctionCall",
																"src": "711:71:22"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "704:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "704:3:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "830:5:22",
																				"nodeType": "YulIdentifier",
																				"src": "830:5:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "837:4:22",
																				"nodeType": "YulLiteral",
																				"src": "837:4:22",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "826:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "826:3:22"
																		},
																		"nativeSrc": "826:16:22",
																		"nodeType": "YulFunctionCall",
																		"src": "826:16:22"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "844:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "844:3:22"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "849:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "849:6:22"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nativeSrc": "791:34:22",
																	"nodeType": "YulIdentifier",
																	"src": "791:34:22"
																},
																"nativeSrc": "791:65:22",
																"nodeType": "YulFunctionCall",
																"src": "791:65:22"
															},
															"nativeSrc": "791:65:22",
															"nodeType": "YulExpressionStatement",
															"src": "791:65:22"
														},
														{
															"nativeSrc": "865:46:22",
															"nodeType": "YulAssignment",
															"src": "865:46:22",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "876:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "876:3:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "903:6:22",
																				"nodeType": "YulIdentifier",
																				"src": "903:6:22"
																			}
																		],
																		"functionName": {
																			"name": "round_up_to_mul_of_32",
																			"nativeSrc": "881:21:22",
																			"nodeType": "YulIdentifier",
																			"src": "881:21:22"
																		},
																		"nativeSrc": "881:29:22",
																		"nodeType": "YulFunctionCall",
																		"src": "881:29:22"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "872:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "872:3:22"
																},
																"nativeSrc": "872:39:22",
																"nodeType": "YulFunctionCall",
																"src": "872:39:22"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "865:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "865:3:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
												"nativeSrc": "540:377:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "613:5:22",
														"nodeType": "YulTypedName",
														"src": "613:5:22",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "620:3:22",
														"nodeType": "YulTypedName",
														"src": "620:3:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "628:3:22",
														"nodeType": "YulTypedName",
														"src": "628:3:22",
														"type": ""
													}
												],
												"src": "540:377:22"
											},
											{
												"body": {
													"nativeSrc": "1041:195:22",
													"nodeType": "YulBlock",
													"src": "1041:195:22",
													"statements": [
														{
															"nativeSrc": "1051:26:22",
															"nodeType": "YulAssignment",
															"src": "1051:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1063:9:22",
																		"nodeType": "YulIdentifier",
																		"src": "1063:9:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1074:2:22",
																		"nodeType": "YulLiteral",
																		"src": "1074:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1059:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "1059:3:22"
																},
																"nativeSrc": "1059:18:22",
																"nodeType": "YulFunctionCall",
																"src": "1059:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1051:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "1051:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1098:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "1098:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1109:1:22",
																				"nodeType": "YulLiteral",
																				"src": "1109:1:22",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1094:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "1094:3:22"
																		},
																		"nativeSrc": "1094:17:22",
																		"nodeType": "YulFunctionCall",
																		"src": "1094:17:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "1117:4:22",
																				"nodeType": "YulIdentifier",
																				"src": "1117:4:22"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1123:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "1123:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1113:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "1113:3:22"
																		},
																		"nativeSrc": "1113:20:22",
																		"nodeType": "YulFunctionCall",
																		"src": "1113:20:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1087:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "1087:6:22"
																},
																"nativeSrc": "1087:47:22",
																"nodeType": "YulFunctionCall",
																"src": "1087:47:22"
															},
															"nativeSrc": "1087:47:22",
															"nodeType": "YulExpressionStatement",
															"src": "1087:47:22"
														},
														{
															"nativeSrc": "1143:86:22",
															"nodeType": "YulAssignment",
															"src": "1143:86:22",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "1215:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "1215:6:22"
																	},
																	{
																		"name": "tail",
																		"nativeSrc": "1224:4:22",
																		"nodeType": "YulIdentifier",
																		"src": "1224:4:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "1151:63:22",
																	"nodeType": "YulIdentifier",
																	"src": "1151:63:22"
																},
																"nativeSrc": "1151:78:22",
																"nodeType": "YulFunctionCall",
																"src": "1151:78:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1143:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "1143:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "923:313:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1013:9:22",
														"nodeType": "YulTypedName",
														"src": "1013:9:22",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1025:6:22",
														"nodeType": "YulTypedName",
														"src": "1025:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1036:4:22",
														"nodeType": "YulTypedName",
														"src": "1036:4:22",
														"type": ""
													}
												],
												"src": "923:313:22"
											},
											{
												"body": {
													"nativeSrc": "1282:35:22",
													"nodeType": "YulBlock",
													"src": "1282:35:22",
													"statements": [
														{
															"nativeSrc": "1292:19:22",
															"nodeType": "YulAssignment",
															"src": "1292:19:22",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1308:2:22",
																		"nodeType": "YulLiteral",
																		"src": "1308:2:22",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1302:5:22",
																	"nodeType": "YulIdentifier",
																	"src": "1302:5:22"
																},
																"nativeSrc": "1302:9:22",
																"nodeType": "YulFunctionCall",
																"src": "1302:9:22"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nativeSrc": "1292:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "1292:6:22"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nativeSrc": "1242:75:22",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nativeSrc": "1275:6:22",
														"nodeType": "YulTypedName",
														"src": "1275:6:22",
														"type": ""
													}
												],
												"src": "1242:75:22"
											},
											{
												"body": {
													"nativeSrc": "1412:28:22",
													"nodeType": "YulBlock",
													"src": "1412:28:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1429:1:22",
																		"nodeType": "YulLiteral",
																		"src": "1429:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1432:1:22",
																		"nodeType": "YulLiteral",
																		"src": "1432:1:22",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1422:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "1422:6:22"
																},
																"nativeSrc": "1422:12:22",
																"nodeType": "YulFunctionCall",
																"src": "1422:12:22"
															},
															"nativeSrc": "1422:12:22",
															"nodeType": "YulExpressionStatement",
															"src": "1422:12:22"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nativeSrc": "1323:117:22",
												"nodeType": "YulFunctionDefinition",
												"src": "1323:117:22"
											},
											{
												"body": {
													"nativeSrc": "1535:28:22",
													"nodeType": "YulBlock",
													"src": "1535:28:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1552:1:22",
																		"nodeType": "YulLiteral",
																		"src": "1552:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1555:1:22",
																		"nodeType": "YulLiteral",
																		"src": "1555:1:22",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "1545:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "1545:6:22"
																},
																"nativeSrc": "1545:12:22",
																"nodeType": "YulFunctionCall",
																"src": "1545:12:22"
															},
															"nativeSrc": "1545:12:22",
															"nodeType": "YulExpressionStatement",
															"src": "1545:12:22"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nativeSrc": "1446:117:22",
												"nodeType": "YulFunctionDefinition",
												"src": "1446:117:22"
											},
											{
												"body": {
													"nativeSrc": "1614:81:22",
													"nodeType": "YulBlock",
													"src": "1614:81:22",
													"statements": [
														{
															"nativeSrc": "1624:65:22",
															"nodeType": "YulAssignment",
															"src": "1624:65:22",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1639:5:22",
																		"nodeType": "YulIdentifier",
																		"src": "1639:5:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1646:42:22",
																		"nodeType": "YulLiteral",
																		"src": "1646:42:22",
																		"type": "",
																		"value": "0xffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "1635:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "1635:3:22"
																},
																"nativeSrc": "1635:54:22",
																"nodeType": "YulFunctionCall",
																"src": "1635:54:22"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "1624:7:22",
																	"nodeType": "YulIdentifier",
																	"src": "1624:7:22"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint160",
												"nativeSrc": "1569:126:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1596:5:22",
														"nodeType": "YulTypedName",
														"src": "1596:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "1606:7:22",
														"nodeType": "YulTypedName",
														"src": "1606:7:22",
														"type": ""
													}
												],
												"src": "1569:126:22"
											},
											{
												"body": {
													"nativeSrc": "1746:51:22",
													"nodeType": "YulBlock",
													"src": "1746:51:22",
													"statements": [
														{
															"nativeSrc": "1756:35:22",
															"nodeType": "YulAssignment",
															"src": "1756:35:22",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "1785:5:22",
																		"nodeType": "YulIdentifier",
																		"src": "1785:5:22"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint160",
																	"nativeSrc": "1767:17:22",
																	"nodeType": "YulIdentifier",
																	"src": "1767:17:22"
																},
																"nativeSrc": "1767:24:22",
																"nodeType": "YulFunctionCall",
																"src": "1767:24:22"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "1756:7:22",
																	"nodeType": "YulIdentifier",
																	"src": "1756:7:22"
																}
															]
														}
													]
												},
												"name": "cleanup_t_address",
												"nativeSrc": "1701:96:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1728:5:22",
														"nodeType": "YulTypedName",
														"src": "1728:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "1738:7:22",
														"nodeType": "YulTypedName",
														"src": "1738:7:22",
														"type": ""
													}
												],
												"src": "1701:96:22"
											},
											{
												"body": {
													"nativeSrc": "1846:79:22",
													"nodeType": "YulBlock",
													"src": "1846:79:22",
													"statements": [
														{
															"body": {
																"nativeSrc": "1903:16:22",
																"nodeType": "YulBlock",
																"src": "1903:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1912:1:22",
																					"nodeType": "YulLiteral",
																					"src": "1912:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1915:1:22",
																					"nodeType": "YulLiteral",
																					"src": "1915:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1905:6:22",
																				"nodeType": "YulIdentifier",
																				"src": "1905:6:22"
																			},
																			"nativeSrc": "1905:12:22",
																			"nodeType": "YulFunctionCall",
																			"src": "1905:12:22"
																		},
																		"nativeSrc": "1905:12:22",
																		"nodeType": "YulExpressionStatement",
																		"src": "1905:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "1869:5:22",
																				"nodeType": "YulIdentifier",
																				"src": "1869:5:22"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "1894:5:22",
																						"nodeType": "YulIdentifier",
																						"src": "1894:5:22"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_address",
																					"nativeSrc": "1876:17:22",
																					"nodeType": "YulIdentifier",
																					"src": "1876:17:22"
																				},
																				"nativeSrc": "1876:24:22",
																				"nodeType": "YulFunctionCall",
																				"src": "1876:24:22"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "1866:2:22",
																			"nodeType": "YulIdentifier",
																			"src": "1866:2:22"
																		},
																		"nativeSrc": "1866:35:22",
																		"nodeType": "YulFunctionCall",
																		"src": "1866:35:22"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "1859:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "1859:6:22"
																},
																"nativeSrc": "1859:43:22",
																"nodeType": "YulFunctionCall",
																"src": "1859:43:22"
															},
															"nativeSrc": "1856:63:22",
															"nodeType": "YulIf",
															"src": "1856:63:22"
														}
													]
												},
												"name": "validator_revert_t_address",
												"nativeSrc": "1803:122:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "1839:5:22",
														"nodeType": "YulTypedName",
														"src": "1839:5:22",
														"type": ""
													}
												],
												"src": "1803:122:22"
											},
											{
												"body": {
													"nativeSrc": "1983:87:22",
													"nodeType": "YulBlock",
													"src": "1983:87:22",
													"statements": [
														{
															"nativeSrc": "1993:29:22",
															"nodeType": "YulAssignment",
															"src": "1993:29:22",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "2015:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "2015:6:22"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2002:12:22",
																	"nodeType": "YulIdentifier",
																	"src": "2002:12:22"
																},
																"nativeSrc": "2002:20:22",
																"nodeType": "YulFunctionCall",
																"src": "2002:20:22"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "1993:5:22",
																	"nodeType": "YulIdentifier",
																	"src": "1993:5:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2058:5:22",
																		"nodeType": "YulIdentifier",
																		"src": "2058:5:22"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_address",
																	"nativeSrc": "2031:26:22",
																	"nodeType": "YulIdentifier",
																	"src": "2031:26:22"
																},
																"nativeSrc": "2031:33:22",
																"nodeType": "YulFunctionCall",
																"src": "2031:33:22"
															},
															"nativeSrc": "2031:33:22",
															"nodeType": "YulExpressionStatement",
															"src": "2031:33:22"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nativeSrc": "1931:139:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "1961:6:22",
														"nodeType": "YulTypedName",
														"src": "1961:6:22",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "1969:3:22",
														"nodeType": "YulTypedName",
														"src": "1969:3:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "1977:5:22",
														"nodeType": "YulTypedName",
														"src": "1977:5:22",
														"type": ""
													}
												],
												"src": "1931:139:22"
											},
											{
												"body": {
													"nativeSrc": "2121:32:22",
													"nodeType": "YulBlock",
													"src": "2121:32:22",
													"statements": [
														{
															"nativeSrc": "2131:16:22",
															"nodeType": "YulAssignment",
															"src": "2131:16:22",
															"value": {
																"name": "value",
																"nativeSrc": "2142:5:22",
																"nodeType": "YulIdentifier",
																"src": "2142:5:22"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "2131:7:22",
																	"nodeType": "YulIdentifier",
																	"src": "2131:7:22"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nativeSrc": "2076:77:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2103:5:22",
														"nodeType": "YulTypedName",
														"src": "2103:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "2113:7:22",
														"nodeType": "YulTypedName",
														"src": "2113:7:22",
														"type": ""
													}
												],
												"src": "2076:77:22"
											},
											{
												"body": {
													"nativeSrc": "2202:79:22",
													"nodeType": "YulBlock",
													"src": "2202:79:22",
													"statements": [
														{
															"body": {
																"nativeSrc": "2259:16:22",
																"nodeType": "YulBlock",
																"src": "2259:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2268:1:22",
																					"nodeType": "YulLiteral",
																					"src": "2268:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2271:1:22",
																					"nodeType": "YulLiteral",
																					"src": "2271:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2261:6:22",
																				"nodeType": "YulIdentifier",
																				"src": "2261:6:22"
																			},
																			"nativeSrc": "2261:12:22",
																			"nodeType": "YulFunctionCall",
																			"src": "2261:12:22"
																		},
																		"nativeSrc": "2261:12:22",
																		"nodeType": "YulExpressionStatement",
																		"src": "2261:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "2225:5:22",
																				"nodeType": "YulIdentifier",
																				"src": "2225:5:22"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "2250:5:22",
																						"nodeType": "YulIdentifier",
																						"src": "2250:5:22"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nativeSrc": "2232:17:22",
																					"nodeType": "YulIdentifier",
																					"src": "2232:17:22"
																				},
																				"nativeSrc": "2232:24:22",
																				"nodeType": "YulFunctionCall",
																				"src": "2232:24:22"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "2222:2:22",
																			"nodeType": "YulIdentifier",
																			"src": "2222:2:22"
																		},
																		"nativeSrc": "2222:35:22",
																		"nodeType": "YulFunctionCall",
																		"src": "2222:35:22"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2215:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "2215:6:22"
																},
																"nativeSrc": "2215:43:22",
																"nodeType": "YulFunctionCall",
																"src": "2215:43:22"
															},
															"nativeSrc": "2212:63:22",
															"nodeType": "YulIf",
															"src": "2212:63:22"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nativeSrc": "2159:122:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2195:5:22",
														"nodeType": "YulTypedName",
														"src": "2195:5:22",
														"type": ""
													}
												],
												"src": "2159:122:22"
											},
											{
												"body": {
													"nativeSrc": "2339:87:22",
													"nodeType": "YulBlock",
													"src": "2339:87:22",
													"statements": [
														{
															"nativeSrc": "2349:29:22",
															"nodeType": "YulAssignment",
															"src": "2349:29:22",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "2371:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "2371:6:22"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2358:12:22",
																	"nodeType": "YulIdentifier",
																	"src": "2358:12:22"
																},
																"nativeSrc": "2358:20:22",
																"nodeType": "YulFunctionCall",
																"src": "2358:20:22"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "2349:5:22",
																	"nodeType": "YulIdentifier",
																	"src": "2349:5:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "2414:5:22",
																		"nodeType": "YulIdentifier",
																		"src": "2414:5:22"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nativeSrc": "2387:26:22",
																	"nodeType": "YulIdentifier",
																	"src": "2387:26:22"
																},
																"nativeSrc": "2387:33:22",
																"nodeType": "YulFunctionCall",
																"src": "2387:33:22"
															},
															"nativeSrc": "2387:33:22",
															"nodeType": "YulExpressionStatement",
															"src": "2387:33:22"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nativeSrc": "2287:139:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "2317:6:22",
														"nodeType": "YulTypedName",
														"src": "2317:6:22",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "2325:3:22",
														"nodeType": "YulTypedName",
														"src": "2325:3:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "2333:5:22",
														"nodeType": "YulTypedName",
														"src": "2333:5:22",
														"type": ""
													}
												],
												"src": "2287:139:22"
											},
											{
												"body": {
													"nativeSrc": "2515:391:22",
													"nodeType": "YulBlock",
													"src": "2515:391:22",
													"statements": [
														{
															"body": {
																"nativeSrc": "2561:83:22",
																"nodeType": "YulBlock",
																"src": "2561:83:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "2563:77:22",
																				"nodeType": "YulIdentifier",
																				"src": "2563:77:22"
																			},
																			"nativeSrc": "2563:79:22",
																			"nodeType": "YulFunctionCall",
																			"src": "2563:79:22"
																		},
																		"nativeSrc": "2563:79:22",
																		"nodeType": "YulExpressionStatement",
																		"src": "2563:79:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2536:7:22",
																				"nodeType": "YulIdentifier",
																				"src": "2536:7:22"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2545:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "2545:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2532:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "2532:3:22"
																		},
																		"nativeSrc": "2532:23:22",
																		"nodeType": "YulFunctionCall",
																		"src": "2532:23:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2557:2:22",
																		"nodeType": "YulLiteral",
																		"src": "2557:2:22",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2528:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "2528:3:22"
																},
																"nativeSrc": "2528:32:22",
																"nodeType": "YulFunctionCall",
																"src": "2528:32:22"
															},
															"nativeSrc": "2525:119:22",
															"nodeType": "YulIf",
															"src": "2525:119:22"
														},
														{
															"nativeSrc": "2654:117:22",
															"nodeType": "YulBlock",
															"src": "2654:117:22",
															"statements": [
																{
																	"nativeSrc": "2669:15:22",
																	"nodeType": "YulVariableDeclaration",
																	"src": "2669:15:22",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "2683:1:22",
																		"nodeType": "YulLiteral",
																		"src": "2683:1:22",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "2673:6:22",
																			"nodeType": "YulTypedName",
																			"src": "2673:6:22",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "2698:63:22",
																	"nodeType": "YulAssignment",
																	"src": "2698:63:22",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "2733:9:22",
																						"nodeType": "YulIdentifier",
																						"src": "2733:9:22"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "2744:6:22",
																						"nodeType": "YulIdentifier",
																						"src": "2744:6:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2729:3:22",
																					"nodeType": "YulIdentifier",
																					"src": "2729:3:22"
																				},
																				"nativeSrc": "2729:22:22",
																				"nodeType": "YulFunctionCall",
																				"src": "2729:22:22"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2753:7:22",
																				"nodeType": "YulIdentifier",
																				"src": "2753:7:22"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "2708:20:22",
																			"nodeType": "YulIdentifier",
																			"src": "2708:20:22"
																		},
																		"nativeSrc": "2708:53:22",
																		"nodeType": "YulFunctionCall",
																		"src": "2708:53:22"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "2698:6:22",
																			"nodeType": "YulIdentifier",
																			"src": "2698:6:22"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "2781:118:22",
															"nodeType": "YulBlock",
															"src": "2781:118:22",
															"statements": [
																{
																	"nativeSrc": "2796:16:22",
																	"nodeType": "YulVariableDeclaration",
																	"src": "2796:16:22",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "2810:2:22",
																		"nodeType": "YulLiteral",
																		"src": "2810:2:22",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "2800:6:22",
																			"nodeType": "YulTypedName",
																			"src": "2800:6:22",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "2826:63:22",
																	"nodeType": "YulAssignment",
																	"src": "2826:63:22",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "2861:9:22",
																						"nodeType": "YulIdentifier",
																						"src": "2861:9:22"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "2872:6:22",
																						"nodeType": "YulIdentifier",
																						"src": "2872:6:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "2857:3:22",
																					"nodeType": "YulIdentifier",
																					"src": "2857:3:22"
																				},
																				"nativeSrc": "2857:22:22",
																				"nodeType": "YulFunctionCall",
																				"src": "2857:22:22"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2881:7:22",
																				"nodeType": "YulIdentifier",
																				"src": "2881:7:22"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "2836:20:22",
																			"nodeType": "YulIdentifier",
																			"src": "2836:20:22"
																		},
																		"nativeSrc": "2836:53:22",
																		"nodeType": "YulFunctionCall",
																		"src": "2836:53:22"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "2826:6:22",
																			"nodeType": "YulIdentifier",
																			"src": "2826:6:22"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nativeSrc": "2432:474:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2477:9:22",
														"nodeType": "YulTypedName",
														"src": "2477:9:22",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2488:7:22",
														"nodeType": "YulTypedName",
														"src": "2488:7:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2500:6:22",
														"nodeType": "YulTypedName",
														"src": "2500:6:22",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "2508:6:22",
														"nodeType": "YulTypedName",
														"src": "2508:6:22",
														"type": ""
													}
												],
												"src": "2432:474:22"
											},
											{
												"body": {
													"nativeSrc": "2954:48:22",
													"nodeType": "YulBlock",
													"src": "2954:48:22",
													"statements": [
														{
															"nativeSrc": "2964:32:22",
															"nodeType": "YulAssignment",
															"src": "2964:32:22",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "2989:5:22",
																				"nodeType": "YulIdentifier",
																				"src": "2989:5:22"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nativeSrc": "2982:6:22",
																			"nodeType": "YulIdentifier",
																			"src": "2982:6:22"
																		},
																		"nativeSrc": "2982:13:22",
																		"nodeType": "YulFunctionCall",
																		"src": "2982:13:22"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "2975:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "2975:6:22"
																},
																"nativeSrc": "2975:21:22",
																"nodeType": "YulFunctionCall",
																"src": "2975:21:22"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "2964:7:22",
																	"nodeType": "YulIdentifier",
																	"src": "2964:7:22"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nativeSrc": "2912:90:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "2936:5:22",
														"nodeType": "YulTypedName",
														"src": "2936:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "2946:7:22",
														"nodeType": "YulTypedName",
														"src": "2946:7:22",
														"type": ""
													}
												],
												"src": "2912:90:22"
											},
											{
												"body": {
													"nativeSrc": "3067:50:22",
													"nodeType": "YulBlock",
													"src": "3067:50:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "3084:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "3084:3:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "3104:5:22",
																				"nodeType": "YulIdentifier",
																				"src": "3104:5:22"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nativeSrc": "3089:14:22",
																			"nodeType": "YulIdentifier",
																			"src": "3089:14:22"
																		},
																		"nativeSrc": "3089:21:22",
																		"nodeType": "YulFunctionCall",
																		"src": "3089:21:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3077:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "3077:6:22"
																},
																"nativeSrc": "3077:34:22",
																"nodeType": "YulFunctionCall",
																"src": "3077:34:22"
															},
															"nativeSrc": "3077:34:22",
															"nodeType": "YulExpressionStatement",
															"src": "3077:34:22"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nativeSrc": "3008:109:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3055:5:22",
														"nodeType": "YulTypedName",
														"src": "3055:5:22",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "3062:3:22",
														"nodeType": "YulTypedName",
														"src": "3062:3:22",
														"type": ""
													}
												],
												"src": "3008:109:22"
											},
											{
												"body": {
													"nativeSrc": "3215:118:22",
													"nodeType": "YulBlock",
													"src": "3215:118:22",
													"statements": [
														{
															"nativeSrc": "3225:26:22",
															"nodeType": "YulAssignment",
															"src": "3225:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3237:9:22",
																		"nodeType": "YulIdentifier",
																		"src": "3237:9:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3248:2:22",
																		"nodeType": "YulLiteral",
																		"src": "3248:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3233:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "3233:3:22"
																},
																"nativeSrc": "3233:18:22",
																"nodeType": "YulFunctionCall",
																"src": "3233:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3225:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "3225:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "3299:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "3299:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3312:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "3312:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3323:1:22",
																				"nodeType": "YulLiteral",
																				"src": "3323:1:22",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3308:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "3308:3:22"
																		},
																		"nativeSrc": "3308:17:22",
																		"nodeType": "YulFunctionCall",
																		"src": "3308:17:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nativeSrc": "3261:37:22",
																	"nodeType": "YulIdentifier",
																	"src": "3261:37:22"
																},
																"nativeSrc": "3261:65:22",
																"nodeType": "YulFunctionCall",
																"src": "3261:65:22"
															},
															"nativeSrc": "3261:65:22",
															"nodeType": "YulExpressionStatement",
															"src": "3261:65:22"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nativeSrc": "3123:210:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3187:9:22",
														"nodeType": "YulTypedName",
														"src": "3187:9:22",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3199:6:22",
														"nodeType": "YulTypedName",
														"src": "3199:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3210:4:22",
														"nodeType": "YulTypedName",
														"src": "3210:4:22",
														"type": ""
													}
												],
												"src": "3123:210:22"
											},
											{
												"body": {
													"nativeSrc": "3404:53:22",
													"nodeType": "YulBlock",
													"src": "3404:53:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "3421:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "3421:3:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "3444:5:22",
																				"nodeType": "YulIdentifier",
																				"src": "3444:5:22"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nativeSrc": "3426:17:22",
																			"nodeType": "YulIdentifier",
																			"src": "3426:17:22"
																		},
																		"nativeSrc": "3426:24:22",
																		"nodeType": "YulFunctionCall",
																		"src": "3426:24:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3414:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "3414:6:22"
																},
																"nativeSrc": "3414:37:22",
																"nodeType": "YulFunctionCall",
																"src": "3414:37:22"
															},
															"nativeSrc": "3414:37:22",
															"nodeType": "YulExpressionStatement",
															"src": "3414:37:22"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
												"nativeSrc": "3339:118:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "3392:5:22",
														"nodeType": "YulTypedName",
														"src": "3392:5:22",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "3399:3:22",
														"nodeType": "YulTypedName",
														"src": "3399:3:22",
														"type": ""
													}
												],
												"src": "3339:118:22"
											},
											{
												"body": {
													"nativeSrc": "3561:124:22",
													"nodeType": "YulBlock",
													"src": "3561:124:22",
													"statements": [
														{
															"nativeSrc": "3571:26:22",
															"nodeType": "YulAssignment",
															"src": "3571:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3583:9:22",
																		"nodeType": "YulIdentifier",
																		"src": "3583:9:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3594:2:22",
																		"nodeType": "YulLiteral",
																		"src": "3594:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3579:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "3579:3:22"
																},
																"nativeSrc": "3579:18:22",
																"nodeType": "YulFunctionCall",
																"src": "3579:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3571:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "3571:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "3651:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "3651:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3664:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "3664:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3675:1:22",
																				"nodeType": "YulLiteral",
																				"src": "3675:1:22",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3660:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "3660:3:22"
																		},
																		"nativeSrc": "3660:17:22",
																		"nodeType": "YulFunctionCall",
																		"src": "3660:17:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "3607:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "3607:43:22"
																},
																"nativeSrc": "3607:71:22",
																"nodeType": "YulFunctionCall",
																"src": "3607:71:22"
															},
															"nativeSrc": "3607:71:22",
															"nodeType": "YulExpressionStatement",
															"src": "3607:71:22"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "3463:222:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3533:9:22",
														"nodeType": "YulTypedName",
														"src": "3533:9:22",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3545:6:22",
														"nodeType": "YulTypedName",
														"src": "3545:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3556:4:22",
														"nodeType": "YulTypedName",
														"src": "3556:4:22",
														"type": ""
													}
												],
												"src": "3463:222:22"
											},
											{
												"body": {
													"nativeSrc": "3791:519:22",
													"nodeType": "YulBlock",
													"src": "3791:519:22",
													"statements": [
														{
															"body": {
																"nativeSrc": "3837:83:22",
																"nodeType": "YulBlock",
																"src": "3837:83:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "3839:77:22",
																				"nodeType": "YulIdentifier",
																				"src": "3839:77:22"
																			},
																			"nativeSrc": "3839:79:22",
																			"nodeType": "YulFunctionCall",
																			"src": "3839:79:22"
																		},
																		"nativeSrc": "3839:79:22",
																		"nodeType": "YulExpressionStatement",
																		"src": "3839:79:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "3812:7:22",
																				"nodeType": "YulIdentifier",
																				"src": "3812:7:22"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "3821:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "3821:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3808:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "3808:3:22"
																		},
																		"nativeSrc": "3808:23:22",
																		"nodeType": "YulFunctionCall",
																		"src": "3808:23:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3833:2:22",
																		"nodeType": "YulLiteral",
																		"src": "3833:2:22",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "3804:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "3804:3:22"
																},
																"nativeSrc": "3804:32:22",
																"nodeType": "YulFunctionCall",
																"src": "3804:32:22"
															},
															"nativeSrc": "3801:119:22",
															"nodeType": "YulIf",
															"src": "3801:119:22"
														},
														{
															"nativeSrc": "3930:117:22",
															"nodeType": "YulBlock",
															"src": "3930:117:22",
															"statements": [
																{
																	"nativeSrc": "3945:15:22",
																	"nodeType": "YulVariableDeclaration",
																	"src": "3945:15:22",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "3959:1:22",
																		"nodeType": "YulLiteral",
																		"src": "3959:1:22",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "3949:6:22",
																			"nodeType": "YulTypedName",
																			"src": "3949:6:22",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "3974:63:22",
																	"nodeType": "YulAssignment",
																	"src": "3974:63:22",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4009:9:22",
																						"nodeType": "YulIdentifier",
																						"src": "4009:9:22"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4020:6:22",
																						"nodeType": "YulIdentifier",
																						"src": "4020:6:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4005:3:22",
																					"nodeType": "YulIdentifier",
																					"src": "4005:3:22"
																				},
																				"nativeSrc": "4005:22:22",
																				"nodeType": "YulFunctionCall",
																				"src": "4005:22:22"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4029:7:22",
																				"nodeType": "YulIdentifier",
																				"src": "4029:7:22"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "3984:20:22",
																			"nodeType": "YulIdentifier",
																			"src": "3984:20:22"
																		},
																		"nativeSrc": "3984:53:22",
																		"nodeType": "YulFunctionCall",
																		"src": "3984:53:22"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "3974:6:22",
																			"nodeType": "YulIdentifier",
																			"src": "3974:6:22"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "4057:118:22",
															"nodeType": "YulBlock",
															"src": "4057:118:22",
															"statements": [
																{
																	"nativeSrc": "4072:16:22",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4072:16:22",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4086:2:22",
																		"nodeType": "YulLiteral",
																		"src": "4086:2:22",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4076:6:22",
																			"nodeType": "YulTypedName",
																			"src": "4076:6:22",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4102:63:22",
																	"nodeType": "YulAssignment",
																	"src": "4102:63:22",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4137:9:22",
																						"nodeType": "YulIdentifier",
																						"src": "4137:9:22"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4148:6:22",
																						"nodeType": "YulIdentifier",
																						"src": "4148:6:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4133:3:22",
																					"nodeType": "YulIdentifier",
																					"src": "4133:3:22"
																				},
																				"nativeSrc": "4133:22:22",
																				"nodeType": "YulFunctionCall",
																				"src": "4133:22:22"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4157:7:22",
																				"nodeType": "YulIdentifier",
																				"src": "4157:7:22"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "4112:20:22",
																			"nodeType": "YulIdentifier",
																			"src": "4112:20:22"
																		},
																		"nativeSrc": "4112:53:22",
																		"nodeType": "YulFunctionCall",
																		"src": "4112:53:22"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "4102:6:22",
																			"nodeType": "YulIdentifier",
																			"src": "4102:6:22"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "4185:118:22",
															"nodeType": "YulBlock",
															"src": "4185:118:22",
															"statements": [
																{
																	"nativeSrc": "4200:16:22",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4200:16:22",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4214:2:22",
																		"nodeType": "YulLiteral",
																		"src": "4214:2:22",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "4204:6:22",
																			"nodeType": "YulTypedName",
																			"src": "4204:6:22",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4230:63:22",
																	"nodeType": "YulAssignment",
																	"src": "4230:63:22",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "4265:9:22",
																						"nodeType": "YulIdentifier",
																						"src": "4265:9:22"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "4276:6:22",
																						"nodeType": "YulIdentifier",
																						"src": "4276:6:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "4261:3:22",
																					"nodeType": "YulIdentifier",
																					"src": "4261:3:22"
																				},
																				"nativeSrc": "4261:22:22",
																				"nodeType": "YulFunctionCall",
																				"src": "4261:22:22"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4285:7:22",
																				"nodeType": "YulIdentifier",
																				"src": "4285:7:22"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "4240:20:22",
																			"nodeType": "YulIdentifier",
																			"src": "4240:20:22"
																		},
																		"nativeSrc": "4240:53:22",
																		"nodeType": "YulFunctionCall",
																		"src": "4240:53:22"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nativeSrc": "4230:6:22",
																			"nodeType": "YulIdentifier",
																			"src": "4230:6:22"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nativeSrc": "3691:619:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3745:9:22",
														"nodeType": "YulTypedName",
														"src": "3745:9:22",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "3756:7:22",
														"nodeType": "YulTypedName",
														"src": "3756:7:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "3768:6:22",
														"nodeType": "YulTypedName",
														"src": "3768:6:22",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "3776:6:22",
														"nodeType": "YulTypedName",
														"src": "3776:6:22",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "3784:6:22",
														"nodeType": "YulTypedName",
														"src": "3784:6:22",
														"type": ""
													}
												],
												"src": "3691:619:22"
											},
											{
												"body": {
													"nativeSrc": "4359:43:22",
													"nodeType": "YulBlock",
													"src": "4359:43:22",
													"statements": [
														{
															"nativeSrc": "4369:27:22",
															"nodeType": "YulAssignment",
															"src": "4369:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "4384:5:22",
																		"nodeType": "YulIdentifier",
																		"src": "4384:5:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4391:4:22",
																		"nodeType": "YulLiteral",
																		"src": "4391:4:22",
																		"type": "",
																		"value": "0xff"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "4380:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "4380:3:22"
																},
																"nativeSrc": "4380:16:22",
																"nodeType": "YulFunctionCall",
																"src": "4380:16:22"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "4369:7:22",
																	"nodeType": "YulIdentifier",
																	"src": "4369:7:22"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint8",
												"nativeSrc": "4316:86:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4341:5:22",
														"nodeType": "YulTypedName",
														"src": "4341:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "4351:7:22",
														"nodeType": "YulTypedName",
														"src": "4351:7:22",
														"type": ""
													}
												],
												"src": "4316:86:22"
											},
											{
												"body": {
													"nativeSrc": "4469:51:22",
													"nodeType": "YulBlock",
													"src": "4469:51:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "4486:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "4486:3:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "4507:5:22",
																				"nodeType": "YulIdentifier",
																				"src": "4507:5:22"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint8",
																			"nativeSrc": "4491:15:22",
																			"nodeType": "YulIdentifier",
																			"src": "4491:15:22"
																		},
																		"nativeSrc": "4491:22:22",
																		"nodeType": "YulFunctionCall",
																		"src": "4491:22:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4479:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "4479:6:22"
																},
																"nativeSrc": "4479:35:22",
																"nodeType": "YulFunctionCall",
																"src": "4479:35:22"
															},
															"nativeSrc": "4479:35:22",
															"nodeType": "YulExpressionStatement",
															"src": "4479:35:22"
														}
													]
												},
												"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
												"nativeSrc": "4408:112:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4457:5:22",
														"nodeType": "YulTypedName",
														"src": "4457:5:22",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "4464:3:22",
														"nodeType": "YulTypedName",
														"src": "4464:3:22",
														"type": ""
													}
												],
												"src": "4408:112:22"
											},
											{
												"body": {
													"nativeSrc": "4620:120:22",
													"nodeType": "YulBlock",
													"src": "4620:120:22",
													"statements": [
														{
															"nativeSrc": "4630:26:22",
															"nodeType": "YulAssignment",
															"src": "4630:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4642:9:22",
																		"nodeType": "YulIdentifier",
																		"src": "4642:9:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4653:2:22",
																		"nodeType": "YulLiteral",
																		"src": "4653:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "4638:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "4638:3:22"
																},
																"nativeSrc": "4638:18:22",
																"nodeType": "YulFunctionCall",
																"src": "4638:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "4630:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "4630:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "4706:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "4706:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4719:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "4719:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4730:1:22",
																				"nodeType": "YulLiteral",
																				"src": "4730:1:22",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4715:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "4715:3:22"
																		},
																		"nativeSrc": "4715:17:22",
																		"nodeType": "YulFunctionCall",
																		"src": "4715:17:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
																	"nativeSrc": "4666:39:22",
																	"nodeType": "YulIdentifier",
																	"src": "4666:39:22"
																},
																"nativeSrc": "4666:67:22",
																"nodeType": "YulFunctionCall",
																"src": "4666:67:22"
															},
															"nativeSrc": "4666:67:22",
															"nodeType": "YulExpressionStatement",
															"src": "4666:67:22"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nativeSrc": "4526:214:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4592:9:22",
														"nodeType": "YulTypedName",
														"src": "4592:9:22",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "4604:6:22",
														"nodeType": "YulTypedName",
														"src": "4604:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "4615:4:22",
														"nodeType": "YulTypedName",
														"src": "4615:4:22",
														"type": ""
													}
												],
												"src": "4526:214:22"
											},
											{
												"body": {
													"nativeSrc": "4791:32:22",
													"nodeType": "YulBlock",
													"src": "4791:32:22",
													"statements": [
														{
															"nativeSrc": "4801:16:22",
															"nodeType": "YulAssignment",
															"src": "4801:16:22",
															"value": {
																"name": "value",
																"nativeSrc": "4812:5:22",
																"nodeType": "YulIdentifier",
																"src": "4812:5:22"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "4801:7:22",
																	"nodeType": "YulIdentifier",
																	"src": "4801:7:22"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes32",
												"nativeSrc": "4746:77:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4773:5:22",
														"nodeType": "YulTypedName",
														"src": "4773:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "4783:7:22",
														"nodeType": "YulTypedName",
														"src": "4783:7:22",
														"type": ""
													}
												],
												"src": "4746:77:22"
											},
											{
												"body": {
													"nativeSrc": "4894:53:22",
													"nodeType": "YulBlock",
													"src": "4894:53:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "4911:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "4911:3:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "4934:5:22",
																				"nodeType": "YulIdentifier",
																				"src": "4934:5:22"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bytes32",
																			"nativeSrc": "4916:17:22",
																			"nodeType": "YulIdentifier",
																			"src": "4916:17:22"
																		},
																		"nativeSrc": "4916:24:22",
																		"nodeType": "YulFunctionCall",
																		"src": "4916:24:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "4904:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "4904:6:22"
																},
																"nativeSrc": "4904:37:22",
																"nodeType": "YulFunctionCall",
																"src": "4904:37:22"
															},
															"nativeSrc": "4904:37:22",
															"nodeType": "YulExpressionStatement",
															"src": "4904:37:22"
														}
													]
												},
												"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
												"nativeSrc": "4829:118:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "4882:5:22",
														"nodeType": "YulTypedName",
														"src": "4882:5:22",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "4889:3:22",
														"nodeType": "YulTypedName",
														"src": "4889:3:22",
														"type": ""
													}
												],
												"src": "4829:118:22"
											},
											{
												"body": {
													"nativeSrc": "5051:124:22",
													"nodeType": "YulBlock",
													"src": "5051:124:22",
													"statements": [
														{
															"nativeSrc": "5061:26:22",
															"nodeType": "YulAssignment",
															"src": "5061:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5073:9:22",
																		"nodeType": "YulIdentifier",
																		"src": "5073:9:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5084:2:22",
																		"nodeType": "YulLiteral",
																		"src": "5084:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5069:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "5069:3:22"
																},
																"nativeSrc": "5069:18:22",
																"nodeType": "YulFunctionCall",
																"src": "5069:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5061:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "5061:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "5141:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "5141:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5154:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "5154:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5165:1:22",
																				"nodeType": "YulLiteral",
																				"src": "5165:1:22",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5150:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "5150:3:22"
																		},
																		"nativeSrc": "5150:17:22",
																		"nodeType": "YulFunctionCall",
																		"src": "5150:17:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nativeSrc": "5097:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "5097:43:22"
																},
																"nativeSrc": "5097:71:22",
																"nodeType": "YulFunctionCall",
																"src": "5097:71:22"
															},
															"nativeSrc": "5097:71:22",
															"nodeType": "YulExpressionStatement",
															"src": "5097:71:22"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nativeSrc": "4953:222:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5023:9:22",
														"nodeType": "YulTypedName",
														"src": "5023:9:22",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "5035:6:22",
														"nodeType": "YulTypedName",
														"src": "5035:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5046:4:22",
														"nodeType": "YulTypedName",
														"src": "5046:4:22",
														"type": ""
													}
												],
												"src": "4953:222:22"
											},
											{
												"body": {
													"nativeSrc": "5247:263:22",
													"nodeType": "YulBlock",
													"src": "5247:263:22",
													"statements": [
														{
															"body": {
																"nativeSrc": "5293:83:22",
																"nodeType": "YulBlock",
																"src": "5293:83:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "5295:77:22",
																				"nodeType": "YulIdentifier",
																				"src": "5295:77:22"
																			},
																			"nativeSrc": "5295:79:22",
																			"nodeType": "YulFunctionCall",
																			"src": "5295:79:22"
																		},
																		"nativeSrc": "5295:79:22",
																		"nodeType": "YulExpressionStatement",
																		"src": "5295:79:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5268:7:22",
																				"nodeType": "YulIdentifier",
																				"src": "5268:7:22"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "5277:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "5277:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5264:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "5264:3:22"
																		},
																		"nativeSrc": "5264:23:22",
																		"nodeType": "YulFunctionCall",
																		"src": "5264:23:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5289:2:22",
																		"nodeType": "YulLiteral",
																		"src": "5289:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "5260:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "5260:3:22"
																},
																"nativeSrc": "5260:32:22",
																"nodeType": "YulFunctionCall",
																"src": "5260:32:22"
															},
															"nativeSrc": "5257:119:22",
															"nodeType": "YulIf",
															"src": "5257:119:22"
														},
														{
															"nativeSrc": "5386:117:22",
															"nodeType": "YulBlock",
															"src": "5386:117:22",
															"statements": [
																{
																	"nativeSrc": "5401:15:22",
																	"nodeType": "YulVariableDeclaration",
																	"src": "5401:15:22",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "5415:1:22",
																		"nodeType": "YulLiteral",
																		"src": "5415:1:22",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "5405:6:22",
																			"nodeType": "YulTypedName",
																			"src": "5405:6:22",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "5430:63:22",
																	"nodeType": "YulAssignment",
																	"src": "5430:63:22",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "5465:9:22",
																						"nodeType": "YulIdentifier",
																						"src": "5465:9:22"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "5476:6:22",
																						"nodeType": "YulIdentifier",
																						"src": "5476:6:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5461:3:22",
																					"nodeType": "YulIdentifier",
																					"src": "5461:3:22"
																				},
																				"nativeSrc": "5461:22:22",
																				"nodeType": "YulFunctionCall",
																				"src": "5461:22:22"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5485:7:22",
																				"nodeType": "YulIdentifier",
																				"src": "5485:7:22"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "5440:20:22",
																			"nodeType": "YulIdentifier",
																			"src": "5440:20:22"
																		},
																		"nativeSrc": "5440:53:22",
																		"nodeType": "YulFunctionCall",
																		"src": "5440:53:22"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "5430:6:22",
																			"nodeType": "YulIdentifier",
																			"src": "5430:6:22"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nativeSrc": "5181:329:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5217:9:22",
														"nodeType": "YulTypedName",
														"src": "5217:9:22",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "5228:7:22",
														"nodeType": "YulTypedName",
														"src": "5228:7:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "5240:6:22",
														"nodeType": "YulTypedName",
														"src": "5240:6:22",
														"type": ""
													}
												],
												"src": "5181:329:22"
											},
											{
												"body": {
													"nativeSrc": "5582:263:22",
													"nodeType": "YulBlock",
													"src": "5582:263:22",
													"statements": [
														{
															"body": {
																"nativeSrc": "5628:83:22",
																"nodeType": "YulBlock",
																"src": "5628:83:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "5630:77:22",
																				"nodeType": "YulIdentifier",
																				"src": "5630:77:22"
																			},
																			"nativeSrc": "5630:79:22",
																			"nodeType": "YulFunctionCall",
																			"src": "5630:79:22"
																		},
																		"nativeSrc": "5630:79:22",
																		"nodeType": "YulExpressionStatement",
																		"src": "5630:79:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5603:7:22",
																				"nodeType": "YulIdentifier",
																				"src": "5603:7:22"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "5612:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "5612:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5599:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "5599:3:22"
																		},
																		"nativeSrc": "5599:23:22",
																		"nodeType": "YulFunctionCall",
																		"src": "5599:23:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5624:2:22",
																		"nodeType": "YulLiteral",
																		"src": "5624:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "5595:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "5595:3:22"
																},
																"nativeSrc": "5595:32:22",
																"nodeType": "YulFunctionCall",
																"src": "5595:32:22"
															},
															"nativeSrc": "5592:119:22",
															"nodeType": "YulIf",
															"src": "5592:119:22"
														},
														{
															"nativeSrc": "5721:117:22",
															"nodeType": "YulBlock",
															"src": "5721:117:22",
															"statements": [
																{
																	"nativeSrc": "5736:15:22",
																	"nodeType": "YulVariableDeclaration",
																	"src": "5736:15:22",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "5750:1:22",
																		"nodeType": "YulLiteral",
																		"src": "5750:1:22",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "5740:6:22",
																			"nodeType": "YulTypedName",
																			"src": "5740:6:22",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "5765:63:22",
																	"nodeType": "YulAssignment",
																	"src": "5765:63:22",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "5800:9:22",
																						"nodeType": "YulIdentifier",
																						"src": "5800:9:22"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "5811:6:22",
																						"nodeType": "YulIdentifier",
																						"src": "5811:6:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5796:3:22",
																					"nodeType": "YulIdentifier",
																					"src": "5796:3:22"
																				},
																				"nativeSrc": "5796:22:22",
																				"nodeType": "YulFunctionCall",
																				"src": "5796:22:22"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5820:7:22",
																				"nodeType": "YulIdentifier",
																				"src": "5820:7:22"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "5775:20:22",
																			"nodeType": "YulIdentifier",
																			"src": "5775:20:22"
																		},
																		"nativeSrc": "5775:53:22",
																		"nodeType": "YulFunctionCall",
																		"src": "5775:53:22"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "5765:6:22",
																			"nodeType": "YulIdentifier",
																			"src": "5765:6:22"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "5516:329:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5552:9:22",
														"nodeType": "YulTypedName",
														"src": "5552:9:22",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "5563:7:22",
														"nodeType": "YulTypedName",
														"src": "5563:7:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "5575:6:22",
														"nodeType": "YulTypedName",
														"src": "5575:6:22",
														"type": ""
													}
												],
												"src": "5516:329:22"
											},
											{
												"body": {
													"nativeSrc": "5895:105:22",
													"nodeType": "YulBlock",
													"src": "5895:105:22",
													"statements": [
														{
															"nativeSrc": "5905:89:22",
															"nodeType": "YulAssignment",
															"src": "5905:89:22",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "5920:5:22",
																		"nodeType": "YulIdentifier",
																		"src": "5920:5:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5927:66:22",
																		"nodeType": "YulLiteral",
																		"src": "5927:66:22",
																		"type": "",
																		"value": "0xff00000000000000000000000000000000000000000000000000000000000000"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "5916:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "5916:3:22"
																},
																"nativeSrc": "5916:78:22",
																"nodeType": "YulFunctionCall",
																"src": "5916:78:22"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nativeSrc": "5905:7:22",
																	"nodeType": "YulIdentifier",
																	"src": "5905:7:22"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bytes1",
												"nativeSrc": "5851:149:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "5877:5:22",
														"nodeType": "YulTypedName",
														"src": "5877:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nativeSrc": "5887:7:22",
														"nodeType": "YulTypedName",
														"src": "5887:7:22",
														"type": ""
													}
												],
												"src": "5851:149:22"
											},
											{
												"body": {
													"nativeSrc": "6069:52:22",
													"nodeType": "YulBlock",
													"src": "6069:52:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "6086:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "6086:3:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "6108:5:22",
																				"nodeType": "YulIdentifier",
																				"src": "6108:5:22"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bytes1",
																			"nativeSrc": "6091:16:22",
																			"nodeType": "YulIdentifier",
																			"src": "6091:16:22"
																		},
																		"nativeSrc": "6091:23:22",
																		"nodeType": "YulFunctionCall",
																		"src": "6091:23:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6079:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "6079:6:22"
																},
																"nativeSrc": "6079:36:22",
																"nodeType": "YulFunctionCall",
																"src": "6079:36:22"
															},
															"nativeSrc": "6079:36:22",
															"nodeType": "YulExpressionStatement",
															"src": "6079:36:22"
														}
													]
												},
												"name": "abi_encode_t_bytes1_to_t_bytes1_fromStack",
												"nativeSrc": "6006:115:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6057:5:22",
														"nodeType": "YulTypedName",
														"src": "6057:5:22",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "6064:3:22",
														"nodeType": "YulTypedName",
														"src": "6064:3:22",
														"type": ""
													}
												],
												"src": "6006:115:22"
											},
											{
												"body": {
													"nativeSrc": "6192:53:22",
													"nodeType": "YulBlock",
													"src": "6192:53:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "6209:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "6209:3:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "6232:5:22",
																				"nodeType": "YulIdentifier",
																				"src": "6232:5:22"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_address",
																			"nativeSrc": "6214:17:22",
																			"nodeType": "YulIdentifier",
																			"src": "6214:17:22"
																		},
																		"nativeSrc": "6214:24:22",
																		"nodeType": "YulFunctionCall",
																		"src": "6214:24:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6202:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "6202:6:22"
																},
																"nativeSrc": "6202:37:22",
																"nodeType": "YulFunctionCall",
																"src": "6202:37:22"
															},
															"nativeSrc": "6202:37:22",
															"nodeType": "YulExpressionStatement",
															"src": "6202:37:22"
														}
													]
												},
												"name": "abi_encode_t_address_to_t_address_fromStack",
												"nativeSrc": "6127:118:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6180:5:22",
														"nodeType": "YulTypedName",
														"src": "6180:5:22",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "6187:3:22",
														"nodeType": "YulTypedName",
														"src": "6187:3:22",
														"type": ""
													}
												],
												"src": "6127:118:22"
											},
											{
												"body": {
													"nativeSrc": "6325:40:22",
													"nodeType": "YulBlock",
													"src": "6325:40:22",
													"statements": [
														{
															"nativeSrc": "6336:22:22",
															"nodeType": "YulAssignment",
															"src": "6336:22:22",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "6352:5:22",
																		"nodeType": "YulIdentifier",
																		"src": "6352:5:22"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "6346:5:22",
																	"nodeType": "YulIdentifier",
																	"src": "6346:5:22"
																},
																"nativeSrc": "6346:12:22",
																"nodeType": "YulFunctionCall",
																"src": "6346:12:22"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "6336:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "6336:6:22"
																}
															]
														}
													]
												},
												"name": "array_length_t_array$_t_uint256_$dyn_memory_ptr",
												"nativeSrc": "6251:114:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6308:5:22",
														"nodeType": "YulTypedName",
														"src": "6308:5:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "6318:6:22",
														"nodeType": "YulTypedName",
														"src": "6318:6:22",
														"type": ""
													}
												],
												"src": "6251:114:22"
											},
											{
												"body": {
													"nativeSrc": "6482:73:22",
													"nodeType": "YulBlock",
													"src": "6482:73:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "6499:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "6499:3:22"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "6504:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "6504:6:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6492:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "6492:6:22"
																},
																"nativeSrc": "6492:19:22",
																"nodeType": "YulFunctionCall",
																"src": "6492:19:22"
															},
															"nativeSrc": "6492:19:22",
															"nodeType": "YulExpressionStatement",
															"src": "6492:19:22"
														},
														{
															"nativeSrc": "6520:29:22",
															"nodeType": "YulAssignment",
															"src": "6520:29:22",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "6539:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "6539:3:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6544:4:22",
																		"nodeType": "YulLiteral",
																		"src": "6544:4:22",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6535:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "6535:3:22"
																},
																"nativeSrc": "6535:14:22",
																"nodeType": "YulFunctionCall",
																"src": "6535:14:22"
															},
															"variableNames": [
																{
																	"name": "updated_pos",
																	"nativeSrc": "6520:11:22",
																	"nodeType": "YulIdentifier",
																	"src": "6520:11:22"
																}
															]
														}
													]
												},
												"name": "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
												"nativeSrc": "6371:184:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nativeSrc": "6454:3:22",
														"nodeType": "YulTypedName",
														"src": "6454:3:22",
														"type": ""
													},
													{
														"name": "length",
														"nativeSrc": "6459:6:22",
														"nodeType": "YulTypedName",
														"src": "6459:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updated_pos",
														"nativeSrc": "6470:11:22",
														"nodeType": "YulTypedName",
														"src": "6470:11:22",
														"type": ""
													}
												],
												"src": "6371:184:22"
											},
											{
												"body": {
													"nativeSrc": "6633:60:22",
													"nodeType": "YulBlock",
													"src": "6633:60:22",
													"statements": [
														{
															"nativeSrc": "6643:11:22",
															"nodeType": "YulAssignment",
															"src": "6643:11:22",
															"value": {
																"name": "ptr",
																"nativeSrc": "6651:3:22",
																"nodeType": "YulIdentifier",
																"src": "6651:3:22"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "6643:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "6643:4:22"
																}
															]
														},
														{
															"nativeSrc": "6664:22:22",
															"nodeType": "YulAssignment",
															"src": "6664:22:22",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "6676:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "6676:3:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6681:4:22",
																		"nodeType": "YulLiteral",
																		"src": "6681:4:22",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6672:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "6672:3:22"
																},
																"nativeSrc": "6672:14:22",
																"nodeType": "YulFunctionCall",
																"src": "6672:14:22"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "6664:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "6664:4:22"
																}
															]
														}
													]
												},
												"name": "array_dataslot_t_array$_t_uint256_$dyn_memory_ptr",
												"nativeSrc": "6561:132:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nativeSrc": "6620:3:22",
														"nodeType": "YulTypedName",
														"src": "6620:3:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nativeSrc": "6628:4:22",
														"nodeType": "YulTypedName",
														"src": "6628:4:22",
														"type": ""
													}
												],
												"src": "6561:132:22"
											},
											{
												"body": {
													"nativeSrc": "6754:53:22",
													"nodeType": "YulBlock",
													"src": "6754:53:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "6771:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "6771:3:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "6794:5:22",
																				"nodeType": "YulIdentifier",
																				"src": "6794:5:22"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_uint256",
																			"nativeSrc": "6776:17:22",
																			"nodeType": "YulIdentifier",
																			"src": "6776:17:22"
																		},
																		"nativeSrc": "6776:24:22",
																		"nodeType": "YulFunctionCall",
																		"src": "6776:24:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6764:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "6764:6:22"
																},
																"nativeSrc": "6764:37:22",
																"nodeType": "YulFunctionCall",
																"src": "6764:37:22"
															},
															"nativeSrc": "6764:37:22",
															"nodeType": "YulExpressionStatement",
															"src": "6764:37:22"
														}
													]
												},
												"name": "abi_encode_t_uint256_to_t_uint256",
												"nativeSrc": "6699:108:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "6742:5:22",
														"nodeType": "YulTypedName",
														"src": "6742:5:22",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "6749:3:22",
														"nodeType": "YulTypedName",
														"src": "6749:3:22",
														"type": ""
													}
												],
												"src": "6699:108:22"
											},
											{
												"body": {
													"nativeSrc": "6893:99:22",
													"nodeType": "YulBlock",
													"src": "6893:99:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "6937:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "6937:6:22"
																	},
																	{
																		"name": "pos",
																		"nativeSrc": "6945:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "6945:3:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256",
																	"nativeSrc": "6903:33:22",
																	"nodeType": "YulIdentifier",
																	"src": "6903:33:22"
																},
																"nativeSrc": "6903:46:22",
																"nodeType": "YulFunctionCall",
																"src": "6903:46:22"
															},
															"nativeSrc": "6903:46:22",
															"nodeType": "YulExpressionStatement",
															"src": "6903:46:22"
														},
														{
															"nativeSrc": "6958:28:22",
															"nodeType": "YulAssignment",
															"src": "6958:28:22",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "6976:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "6976:3:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6981:4:22",
																		"nodeType": "YulLiteral",
																		"src": "6981:4:22",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6972:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "6972:3:22"
																},
																"nativeSrc": "6972:14:22",
																"nodeType": "YulFunctionCall",
																"src": "6972:14:22"
															},
															"variableNames": [
																{
																	"name": "updatedPos",
																	"nativeSrc": "6958:10:22",
																	"nodeType": "YulIdentifier",
																	"src": "6958:10:22"
																}
															]
														}
													]
												},
												"name": "abi_encodeUpdatedPos_t_uint256_to_t_uint256",
												"nativeSrc": "6813:179:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value0",
														"nativeSrc": "6866:6:22",
														"nodeType": "YulTypedName",
														"src": "6866:6:22",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "6874:3:22",
														"nodeType": "YulTypedName",
														"src": "6874:3:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "updatedPos",
														"nativeSrc": "6882:10:22",
														"nodeType": "YulTypedName",
														"src": "6882:10:22",
														"type": ""
													}
												],
												"src": "6813:179:22"
											},
											{
												"body": {
													"nativeSrc": "7073:38:22",
													"nodeType": "YulBlock",
													"src": "7073:38:22",
													"statements": [
														{
															"nativeSrc": "7083:22:22",
															"nodeType": "YulAssignment",
															"src": "7083:22:22",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "7095:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "7095:3:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7100:4:22",
																		"nodeType": "YulLiteral",
																		"src": "7100:4:22",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7091:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "7091:3:22"
																},
																"nativeSrc": "7091:14:22",
																"nodeType": "YulFunctionCall",
																"src": "7091:14:22"
															},
															"variableNames": [
																{
																	"name": "next",
																	"nativeSrc": "7083:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "7083:4:22"
																}
															]
														}
													]
												},
												"name": "array_nextElement_t_array$_t_uint256_$dyn_memory_ptr",
												"nativeSrc": "6998:113:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nativeSrc": "7060:3:22",
														"nodeType": "YulTypedName",
														"src": "7060:3:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "next",
														"nativeSrc": "7068:4:22",
														"nodeType": "YulTypedName",
														"src": "7068:4:22",
														"type": ""
													}
												],
												"src": "6998:113:22"
											},
											{
												"body": {
													"nativeSrc": "7271:608:22",
													"nodeType": "YulBlock",
													"src": "7271:608:22",
													"statements": [
														{
															"nativeSrc": "7281:68:22",
															"nodeType": "YulVariableDeclaration",
															"src": "7281:68:22",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "7343:5:22",
																		"nodeType": "YulIdentifier",
																		"src": "7343:5:22"
																	}
																],
																"functionName": {
																	"name": "array_length_t_array$_t_uint256_$dyn_memory_ptr",
																	"nativeSrc": "7295:47:22",
																	"nodeType": "YulIdentifier",
																	"src": "7295:47:22"
																},
																"nativeSrc": "7295:54:22",
																"nodeType": "YulFunctionCall",
																"src": "7295:54:22"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "7285:6:22",
																	"nodeType": "YulTypedName",
																	"src": "7285:6:22",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "7358:93:22",
															"nodeType": "YulAssignment",
															"src": "7358:93:22",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "7439:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "7439:3:22"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "7444:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "7444:6:22"
																	}
																],
																"functionName": {
																	"name": "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
																	"nativeSrc": "7365:73:22",
																	"nodeType": "YulIdentifier",
																	"src": "7365:73:22"
																},
																"nativeSrc": "7365:86:22",
																"nodeType": "YulFunctionCall",
																"src": "7365:86:22"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "7358:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "7358:3:22"
																}
															]
														},
														{
															"nativeSrc": "7460:71:22",
															"nodeType": "YulVariableDeclaration",
															"src": "7460:71:22",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "7525:5:22",
																		"nodeType": "YulIdentifier",
																		"src": "7525:5:22"
																	}
																],
																"functionName": {
																	"name": "array_dataslot_t_array$_t_uint256_$dyn_memory_ptr",
																	"nativeSrc": "7475:49:22",
																	"nodeType": "YulIdentifier",
																	"src": "7475:49:22"
																},
																"nativeSrc": "7475:56:22",
																"nodeType": "YulFunctionCall",
																"src": "7475:56:22"
															},
															"variables": [
																{
																	"name": "baseRef",
																	"nativeSrc": "7464:7:22",
																	"nodeType": "YulTypedName",
																	"src": "7464:7:22",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "7540:21:22",
															"nodeType": "YulVariableDeclaration",
															"src": "7540:21:22",
															"value": {
																"name": "baseRef",
																"nativeSrc": "7554:7:22",
																"nodeType": "YulIdentifier",
																"src": "7554:7:22"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nativeSrc": "7544:6:22",
																	"nodeType": "YulTypedName",
																	"src": "7544:6:22",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "7630:224:22",
																"nodeType": "YulBlock",
																"src": "7630:224:22",
																"statements": [
																	{
																		"nativeSrc": "7644:34:22",
																		"nodeType": "YulVariableDeclaration",
																		"src": "7644:34:22",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nativeSrc": "7671:6:22",
																					"nodeType": "YulIdentifier",
																					"src": "7671:6:22"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "7665:5:22",
																				"nodeType": "YulIdentifier",
																				"src": "7665:5:22"
																			},
																			"nativeSrc": "7665:13:22",
																			"nodeType": "YulFunctionCall",
																			"src": "7665:13:22"
																		},
																		"variables": [
																			{
																				"name": "elementValue0",
																				"nativeSrc": "7648:13:22",
																				"nodeType": "YulTypedName",
																				"src": "7648:13:22",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "7691:70:22",
																		"nodeType": "YulAssignment",
																		"src": "7691:70:22",
																		"value": {
																			"arguments": [
																				{
																					"name": "elementValue0",
																					"nativeSrc": "7742:13:22",
																					"nodeType": "YulIdentifier",
																					"src": "7742:13:22"
																				},
																				{
																					"name": "pos",
																					"nativeSrc": "7757:3:22",
																					"nodeType": "YulIdentifier",
																					"src": "7757:3:22"
																				}
																			],
																			"functionName": {
																				"name": "abi_encodeUpdatedPos_t_uint256_to_t_uint256",
																				"nativeSrc": "7698:43:22",
																				"nodeType": "YulIdentifier",
																				"src": "7698:43:22"
																			},
																			"nativeSrc": "7698:63:22",
																			"nodeType": "YulFunctionCall",
																			"src": "7698:63:22"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nativeSrc": "7691:3:22",
																				"nodeType": "YulIdentifier",
																				"src": "7691:3:22"
																			}
																		]
																	},
																	{
																		"nativeSrc": "7774:70:22",
																		"nodeType": "YulAssignment",
																		"src": "7774:70:22",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nativeSrc": "7837:6:22",
																					"nodeType": "YulIdentifier",
																					"src": "7837:6:22"
																				}
																			],
																			"functionName": {
																				"name": "array_nextElement_t_array$_t_uint256_$dyn_memory_ptr",
																				"nativeSrc": "7784:52:22",
																				"nodeType": "YulIdentifier",
																				"src": "7784:52:22"
																			},
																			"nativeSrc": "7784:60:22",
																			"nodeType": "YulFunctionCall",
																			"src": "7784:60:22"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nativeSrc": "7774:6:22",
																				"nodeType": "YulIdentifier",
																				"src": "7774:6:22"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nativeSrc": "7592:1:22",
																		"nodeType": "YulIdentifier",
																		"src": "7592:1:22"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "7595:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "7595:6:22"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "7589:2:22",
																	"nodeType": "YulIdentifier",
																	"src": "7589:2:22"
																},
																"nativeSrc": "7589:13:22",
																"nodeType": "YulFunctionCall",
																"src": "7589:13:22"
															},
															"nativeSrc": "7570:284:22",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "7603:18:22",
																"nodeType": "YulBlock",
																"src": "7603:18:22",
																"statements": [
																	{
																		"nativeSrc": "7605:14:22",
																		"nodeType": "YulAssignment",
																		"src": "7605:14:22",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nativeSrc": "7614:1:22",
																					"nodeType": "YulIdentifier",
																					"src": "7614:1:22"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "7617:1:22",
																					"nodeType": "YulLiteral",
																					"src": "7617:1:22",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "7610:3:22",
																				"nodeType": "YulIdentifier",
																				"src": "7610:3:22"
																			},
																			"nativeSrc": "7610:9:22",
																			"nodeType": "YulFunctionCall",
																			"src": "7610:9:22"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nativeSrc": "7605:1:22",
																				"nodeType": "YulIdentifier",
																				"src": "7605:1:22"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "7574:14:22",
																"nodeType": "YulBlock",
																"src": "7574:14:22",
																"statements": [
																	{
																		"nativeSrc": "7576:10:22",
																		"nodeType": "YulVariableDeclaration",
																		"src": "7576:10:22",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "7585:1:22",
																			"nodeType": "YulLiteral",
																			"src": "7585:1:22",
																			"type": "",
																			"value": "0"
																		},
																		"variables": [
																			{
																				"name": "i",
																				"nativeSrc": "7580:1:22",
																				"nodeType": "YulTypedName",
																				"src": "7580:1:22",
																				"type": ""
																			}
																		]
																	}
																]
															},
															"src": "7570:284:22"
														},
														{
															"nativeSrc": "7863:10:22",
															"nodeType": "YulAssignment",
															"src": "7863:10:22",
															"value": {
																"name": "pos",
																"nativeSrc": "7870:3:22",
																"nodeType": "YulIdentifier",
																"src": "7870:3:22"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "7863:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "7863:3:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
												"nativeSrc": "7147:732:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "7250:5:22",
														"nodeType": "YulTypedName",
														"src": "7250:5:22",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "7257:3:22",
														"nodeType": "YulTypedName",
														"src": "7257:3:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "7266:3:22",
														"nodeType": "YulTypedName",
														"src": "7266:3:22",
														"type": ""
													}
												],
												"src": "7147:732:22"
											},
											{
												"body": {
													"nativeSrc": "8239:861:22",
													"nodeType": "YulBlock",
													"src": "8239:861:22",
													"statements": [
														{
															"nativeSrc": "8249:27:22",
															"nodeType": "YulAssignment",
															"src": "8249:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "8261:9:22",
																		"nodeType": "YulIdentifier",
																		"src": "8261:9:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8272:3:22",
																		"nodeType": "YulLiteral",
																		"src": "8272:3:22",
																		"type": "",
																		"value": "224"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "8257:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "8257:3:22"
																},
																"nativeSrc": "8257:19:22",
																"nodeType": "YulFunctionCall",
																"src": "8257:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "8249:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "8249:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "8328:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "8328:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8341:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "8341:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8352:1:22",
																				"nodeType": "YulLiteral",
																				"src": "8352:1:22",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8337:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "8337:3:22"
																		},
																		"nativeSrc": "8337:17:22",
																		"nodeType": "YulFunctionCall",
																		"src": "8337:17:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes1_to_t_bytes1_fromStack",
																	"nativeSrc": "8286:41:22",
																	"nodeType": "YulIdentifier",
																	"src": "8286:41:22"
																},
																"nativeSrc": "8286:69:22",
																"nodeType": "YulFunctionCall",
																"src": "8286:69:22"
															},
															"nativeSrc": "8286:69:22",
															"nodeType": "YulExpressionStatement",
															"src": "8286:69:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8376:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "8376:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8387:2:22",
																				"nodeType": "YulLiteral",
																				"src": "8387:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8372:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "8372:3:22"
																		},
																		"nativeSrc": "8372:18:22",
																		"nodeType": "YulFunctionCall",
																		"src": "8372:18:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "8396:4:22",
																				"nodeType": "YulIdentifier",
																				"src": "8396:4:22"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "8402:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "8402:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "8392:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "8392:3:22"
																		},
																		"nativeSrc": "8392:20:22",
																		"nodeType": "YulFunctionCall",
																		"src": "8392:20:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8365:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "8365:6:22"
																},
																"nativeSrc": "8365:48:22",
																"nodeType": "YulFunctionCall",
																"src": "8365:48:22"
															},
															"nativeSrc": "8365:48:22",
															"nodeType": "YulExpressionStatement",
															"src": "8365:48:22"
														},
														{
															"nativeSrc": "8422:86:22",
															"nodeType": "YulAssignment",
															"src": "8422:86:22",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "8494:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "8494:6:22"
																	},
																	{
																		"name": "tail",
																		"nativeSrc": "8503:4:22",
																		"nodeType": "YulIdentifier",
																		"src": "8503:4:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "8430:63:22",
																	"nodeType": "YulIdentifier",
																	"src": "8430:63:22"
																},
																"nativeSrc": "8430:78:22",
																"nodeType": "YulFunctionCall",
																"src": "8430:78:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "8422:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "8422:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8529:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "8529:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8540:2:22",
																				"nodeType": "YulLiteral",
																				"src": "8540:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8525:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "8525:3:22"
																		},
																		"nativeSrc": "8525:18:22",
																		"nodeType": "YulFunctionCall",
																		"src": "8525:18:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "8549:4:22",
																				"nodeType": "YulIdentifier",
																				"src": "8549:4:22"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "8555:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "8555:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "8545:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "8545:3:22"
																		},
																		"nativeSrc": "8545:20:22",
																		"nodeType": "YulFunctionCall",
																		"src": "8545:20:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8518:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "8518:6:22"
																},
																"nativeSrc": "8518:48:22",
																"nodeType": "YulFunctionCall",
																"src": "8518:48:22"
															},
															"nativeSrc": "8518:48:22",
															"nodeType": "YulExpressionStatement",
															"src": "8518:48:22"
														},
														{
															"nativeSrc": "8575:86:22",
															"nodeType": "YulAssignment",
															"src": "8575:86:22",
															"value": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "8647:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "8647:6:22"
																	},
																	{
																		"name": "tail",
																		"nativeSrc": "8656:4:22",
																		"nodeType": "YulIdentifier",
																		"src": "8656:4:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
																	"nativeSrc": "8583:63:22",
																	"nodeType": "YulIdentifier",
																	"src": "8583:63:22"
																},
																"nativeSrc": "8583:78:22",
																"nodeType": "YulFunctionCall",
																"src": "8583:78:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "8575:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "8575:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value3",
																		"nativeSrc": "8715:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "8715:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8728:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "8728:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8739:2:22",
																				"nodeType": "YulLiteral",
																				"src": "8739:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8724:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "8724:3:22"
																		},
																		"nativeSrc": "8724:18:22",
																		"nodeType": "YulFunctionCall",
																		"src": "8724:18:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "8671:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "8671:43:22"
																},
																"nativeSrc": "8671:72:22",
																"nodeType": "YulFunctionCall",
																"src": "8671:72:22"
															},
															"nativeSrc": "8671:72:22",
															"nodeType": "YulExpressionStatement",
															"src": "8671:72:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value4",
																		"nativeSrc": "8797:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "8797:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8810:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "8810:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8821:3:22",
																				"nodeType": "YulLiteral",
																				"src": "8821:3:22",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8806:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "8806:3:22"
																		},
																		"nativeSrc": "8806:19:22",
																		"nodeType": "YulFunctionCall",
																		"src": "8806:19:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "8753:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "8753:43:22"
																},
																"nativeSrc": "8753:73:22",
																"nodeType": "YulFunctionCall",
																"src": "8753:73:22"
															},
															"nativeSrc": "8753:73:22",
															"nodeType": "YulExpressionStatement",
															"src": "8753:73:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value5",
																		"nativeSrc": "8880:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "8880:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8893:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "8893:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8904:3:22",
																				"nodeType": "YulLiteral",
																				"src": "8904:3:22",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8889:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "8889:3:22"
																		},
																		"nativeSrc": "8889:19:22",
																		"nodeType": "YulFunctionCall",
																		"src": "8889:19:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nativeSrc": "8836:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "8836:43:22"
																},
																"nativeSrc": "8836:73:22",
																"nodeType": "YulFunctionCall",
																"src": "8836:73:22"
															},
															"nativeSrc": "8836:73:22",
															"nodeType": "YulExpressionStatement",
															"src": "8836:73:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8930:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "8930:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8941:3:22",
																				"nodeType": "YulLiteral",
																				"src": "8941:3:22",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8926:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "8926:3:22"
																		},
																		"nativeSrc": "8926:19:22",
																		"nodeType": "YulFunctionCall",
																		"src": "8926:19:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail",
																				"nativeSrc": "8951:4:22",
																				"nodeType": "YulIdentifier",
																				"src": "8951:4:22"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "8957:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "8957:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "8947:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "8947:3:22"
																		},
																		"nativeSrc": "8947:20:22",
																		"nodeType": "YulFunctionCall",
																		"src": "8947:20:22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8919:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "8919:6:22"
																},
																"nativeSrc": "8919:49:22",
																"nodeType": "YulFunctionCall",
																"src": "8919:49:22"
															},
															"nativeSrc": "8919:49:22",
															"nodeType": "YulExpressionStatement",
															"src": "8919:49:22"
														},
														{
															"nativeSrc": "8977:116:22",
															"nodeType": "YulAssignment",
															"src": "8977:116:22",
															"value": {
																"arguments": [
																	{
																		"name": "value6",
																		"nativeSrc": "9079:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "9079:6:22"
																	},
																	{
																		"name": "tail",
																		"nativeSrc": "9088:4:22",
																		"nodeType": "YulIdentifier",
																		"src": "9088:4:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
																	"nativeSrc": "8985:93:22",
																	"nodeType": "YulIdentifier",
																	"src": "8985:93:22"
																},
																"nativeSrc": "8985:108:22",
																"nodeType": "YulFunctionCall",
																"src": "8985:108:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "8977:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "8977:4:22"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
												"nativeSrc": "7885:1215:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "8163:9:22",
														"nodeType": "YulTypedName",
														"src": "8163:9:22",
														"type": ""
													},
													{
														"name": "value6",
														"nativeSrc": "8175:6:22",
														"nodeType": "YulTypedName",
														"src": "8175:6:22",
														"type": ""
													},
													{
														"name": "value5",
														"nativeSrc": "8183:6:22",
														"nodeType": "YulTypedName",
														"src": "8183:6:22",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "8191:6:22",
														"nodeType": "YulTypedName",
														"src": "8191:6:22",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "8199:6:22",
														"nodeType": "YulTypedName",
														"src": "8199:6:22",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "8207:6:22",
														"nodeType": "YulTypedName",
														"src": "8207:6:22",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "8215:6:22",
														"nodeType": "YulTypedName",
														"src": "8215:6:22",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "8223:6:22",
														"nodeType": "YulTypedName",
														"src": "8223:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "8234:4:22",
														"nodeType": "YulTypedName",
														"src": "8234:4:22",
														"type": ""
													}
												],
												"src": "7885:1215:22"
											},
											{
												"body": {
													"nativeSrc": "9204:124:22",
													"nodeType": "YulBlock",
													"src": "9204:124:22",
													"statements": [
														{
															"nativeSrc": "9214:26:22",
															"nodeType": "YulAssignment",
															"src": "9214:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "9226:9:22",
																		"nodeType": "YulIdentifier",
																		"src": "9226:9:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9237:2:22",
																		"nodeType": "YulLiteral",
																		"src": "9237:2:22",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "9222:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "9222:3:22"
																},
																"nativeSrc": "9222:18:22",
																"nodeType": "YulFunctionCall",
																"src": "9222:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "9214:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "9214:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "9294:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "9294:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "9307:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "9307:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9318:1:22",
																				"nodeType": "YulLiteral",
																				"src": "9318:1:22",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9303:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "9303:3:22"
																		},
																		"nativeSrc": "9303:17:22",
																		"nodeType": "YulFunctionCall",
																		"src": "9303:17:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "9250:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "9250:43:22"
																},
																"nativeSrc": "9250:71:22",
																"nodeType": "YulFunctionCall",
																"src": "9250:71:22"
															},
															"nativeSrc": "9250:71:22",
															"nodeType": "YulExpressionStatement",
															"src": "9250:71:22"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "9106:222:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "9176:9:22",
														"nodeType": "YulTypedName",
														"src": "9176:9:22",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "9188:6:22",
														"nodeType": "YulTypedName",
														"src": "9188:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "9199:4:22",
														"nodeType": "YulTypedName",
														"src": "9199:4:22",
														"type": ""
													}
												],
												"src": "9106:222:22"
											},
											{
												"body": {
													"nativeSrc": "9375:77:22",
													"nodeType": "YulBlock",
													"src": "9375:77:22",
													"statements": [
														{
															"body": {
																"nativeSrc": "9430:16:22",
																"nodeType": "YulBlock",
																"src": "9430:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "9439:1:22",
																					"nodeType": "YulLiteral",
																					"src": "9439:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "9442:1:22",
																					"nodeType": "YulLiteral",
																					"src": "9442:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "9432:6:22",
																				"nodeType": "YulIdentifier",
																				"src": "9432:6:22"
																			},
																			"nativeSrc": "9432:12:22",
																			"nodeType": "YulFunctionCall",
																			"src": "9432:12:22"
																		},
																		"nativeSrc": "9432:12:22",
																		"nodeType": "YulExpressionStatement",
																		"src": "9432:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "9398:5:22",
																				"nodeType": "YulIdentifier",
																				"src": "9398:5:22"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "9421:5:22",
																						"nodeType": "YulIdentifier",
																						"src": "9421:5:22"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint8",
																					"nativeSrc": "9405:15:22",
																					"nodeType": "YulIdentifier",
																					"src": "9405:15:22"
																				},
																				"nativeSrc": "9405:22:22",
																				"nodeType": "YulFunctionCall",
																				"src": "9405:22:22"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "9395:2:22",
																			"nodeType": "YulIdentifier",
																			"src": "9395:2:22"
																		},
																		"nativeSrc": "9395:33:22",
																		"nodeType": "YulFunctionCall",
																		"src": "9395:33:22"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "9388:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "9388:6:22"
																},
																"nativeSrc": "9388:41:22",
																"nodeType": "YulFunctionCall",
																"src": "9388:41:22"
															},
															"nativeSrc": "9385:61:22",
															"nodeType": "YulIf",
															"src": "9385:61:22"
														}
													]
												},
												"name": "validator_revert_t_uint8",
												"nativeSrc": "9334:118:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "9368:5:22",
														"nodeType": "YulTypedName",
														"src": "9368:5:22",
														"type": ""
													}
												],
												"src": "9334:118:22"
											},
											{
												"body": {
													"nativeSrc": "9508:85:22",
													"nodeType": "YulBlock",
													"src": "9508:85:22",
													"statements": [
														{
															"nativeSrc": "9518:29:22",
															"nodeType": "YulAssignment",
															"src": "9518:29:22",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "9540:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "9540:6:22"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "9527:12:22",
																	"nodeType": "YulIdentifier",
																	"src": "9527:12:22"
																},
																"nativeSrc": "9527:20:22",
																"nodeType": "YulFunctionCall",
																"src": "9527:20:22"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "9518:5:22",
																	"nodeType": "YulIdentifier",
																	"src": "9518:5:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "9581:5:22",
																		"nodeType": "YulIdentifier",
																		"src": "9581:5:22"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint8",
																	"nativeSrc": "9556:24:22",
																	"nodeType": "YulIdentifier",
																	"src": "9556:24:22"
																},
																"nativeSrc": "9556:31:22",
																"nodeType": "YulFunctionCall",
																"src": "9556:31:22"
															},
															"nativeSrc": "9556:31:22",
															"nodeType": "YulExpressionStatement",
															"src": "9556:31:22"
														}
													]
												},
												"name": "abi_decode_t_uint8",
												"nativeSrc": "9458:135:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "9486:6:22",
														"nodeType": "YulTypedName",
														"src": "9486:6:22",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "9494:3:22",
														"nodeType": "YulTypedName",
														"src": "9494:3:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "9502:5:22",
														"nodeType": "YulTypedName",
														"src": "9502:5:22",
														"type": ""
													}
												],
												"src": "9458:135:22"
											},
											{
												"body": {
													"nativeSrc": "9642:79:22",
													"nodeType": "YulBlock",
													"src": "9642:79:22",
													"statements": [
														{
															"body": {
																"nativeSrc": "9699:16:22",
																"nodeType": "YulBlock",
																"src": "9699:16:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "9708:1:22",
																					"nodeType": "YulLiteral",
																					"src": "9708:1:22",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "9711:1:22",
																					"nodeType": "YulLiteral",
																					"src": "9711:1:22",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "9701:6:22",
																				"nodeType": "YulIdentifier",
																				"src": "9701:6:22"
																			},
																			"nativeSrc": "9701:12:22",
																			"nodeType": "YulFunctionCall",
																			"src": "9701:12:22"
																		},
																		"nativeSrc": "9701:12:22",
																		"nodeType": "YulExpressionStatement",
																		"src": "9701:12:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "9665:5:22",
																				"nodeType": "YulIdentifier",
																				"src": "9665:5:22"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "9690:5:22",
																						"nodeType": "YulIdentifier",
																						"src": "9690:5:22"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_bytes32",
																					"nativeSrc": "9672:17:22",
																					"nodeType": "YulIdentifier",
																					"src": "9672:17:22"
																				},
																				"nativeSrc": "9672:24:22",
																				"nodeType": "YulFunctionCall",
																				"src": "9672:24:22"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "9662:2:22",
																			"nodeType": "YulIdentifier",
																			"src": "9662:2:22"
																		},
																		"nativeSrc": "9662:35:22",
																		"nodeType": "YulFunctionCall",
																		"src": "9662:35:22"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "9655:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "9655:6:22"
																},
																"nativeSrc": "9655:43:22",
																"nodeType": "YulFunctionCall",
																"src": "9655:43:22"
															},
															"nativeSrc": "9652:63:22",
															"nodeType": "YulIf",
															"src": "9652:63:22"
														}
													]
												},
												"name": "validator_revert_t_bytes32",
												"nativeSrc": "9599:122:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "9635:5:22",
														"nodeType": "YulTypedName",
														"src": "9635:5:22",
														"type": ""
													}
												],
												"src": "9599:122:22"
											},
											{
												"body": {
													"nativeSrc": "9779:87:22",
													"nodeType": "YulBlock",
													"src": "9779:87:22",
													"statements": [
														{
															"nativeSrc": "9789:29:22",
															"nodeType": "YulAssignment",
															"src": "9789:29:22",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "9811:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "9811:6:22"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "9798:12:22",
																	"nodeType": "YulIdentifier",
																	"src": "9798:12:22"
																},
																"nativeSrc": "9798:20:22",
																"nodeType": "YulFunctionCall",
																"src": "9798:20:22"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "9789:5:22",
																	"nodeType": "YulIdentifier",
																	"src": "9789:5:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "9854:5:22",
																		"nodeType": "YulIdentifier",
																		"src": "9854:5:22"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bytes32",
																	"nativeSrc": "9827:26:22",
																	"nodeType": "YulIdentifier",
																	"src": "9827:26:22"
																},
																"nativeSrc": "9827:33:22",
																"nodeType": "YulFunctionCall",
																"src": "9827:33:22"
															},
															"nativeSrc": "9827:33:22",
															"nodeType": "YulExpressionStatement",
															"src": "9827:33:22"
														}
													]
												},
												"name": "abi_decode_t_bytes32",
												"nativeSrc": "9727:139:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "9757:6:22",
														"nodeType": "YulTypedName",
														"src": "9757:6:22",
														"type": ""
													},
													{
														"name": "end",
														"nativeSrc": "9765:3:22",
														"nodeType": "YulTypedName",
														"src": "9765:3:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "9773:5:22",
														"nodeType": "YulTypedName",
														"src": "9773:5:22",
														"type": ""
													}
												],
												"src": "9727:139:22"
											},
											{
												"body": {
													"nativeSrc": "10038:1033:22",
													"nodeType": "YulBlock",
													"src": "10038:1033:22",
													"statements": [
														{
															"body": {
																"nativeSrc": "10085:83:22",
																"nodeType": "YulBlock",
																"src": "10085:83:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "10087:77:22",
																				"nodeType": "YulIdentifier",
																				"src": "10087:77:22"
																			},
																			"nativeSrc": "10087:79:22",
																			"nodeType": "YulFunctionCall",
																			"src": "10087:79:22"
																		},
																		"nativeSrc": "10087:79:22",
																		"nodeType": "YulExpressionStatement",
																		"src": "10087:79:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "10059:7:22",
																				"nodeType": "YulIdentifier",
																				"src": "10059:7:22"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "10068:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "10068:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "10055:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "10055:3:22"
																		},
																		"nativeSrc": "10055:23:22",
																		"nodeType": "YulFunctionCall",
																		"src": "10055:23:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "10080:3:22",
																		"nodeType": "YulLiteral",
																		"src": "10080:3:22",
																		"type": "",
																		"value": "224"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "10051:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "10051:3:22"
																},
																"nativeSrc": "10051:33:22",
																"nodeType": "YulFunctionCall",
																"src": "10051:33:22"
															},
															"nativeSrc": "10048:120:22",
															"nodeType": "YulIf",
															"src": "10048:120:22"
														},
														{
															"nativeSrc": "10178:117:22",
															"nodeType": "YulBlock",
															"src": "10178:117:22",
															"statements": [
																{
																	"nativeSrc": "10193:15:22",
																	"nodeType": "YulVariableDeclaration",
																	"src": "10193:15:22",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "10207:1:22",
																		"nodeType": "YulLiteral",
																		"src": "10207:1:22",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "10197:6:22",
																			"nodeType": "YulTypedName",
																			"src": "10197:6:22",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "10222:63:22",
																	"nodeType": "YulAssignment",
																	"src": "10222:63:22",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "10257:9:22",
																						"nodeType": "YulIdentifier",
																						"src": "10257:9:22"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "10268:6:22",
																						"nodeType": "YulIdentifier",
																						"src": "10268:6:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "10253:3:22",
																					"nodeType": "YulIdentifier",
																					"src": "10253:3:22"
																				},
																				"nativeSrc": "10253:22:22",
																				"nodeType": "YulFunctionCall",
																				"src": "10253:22:22"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "10277:7:22",
																				"nodeType": "YulIdentifier",
																				"src": "10277:7:22"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "10232:20:22",
																			"nodeType": "YulIdentifier",
																			"src": "10232:20:22"
																		},
																		"nativeSrc": "10232:53:22",
																		"nodeType": "YulFunctionCall",
																		"src": "10232:53:22"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "10222:6:22",
																			"nodeType": "YulIdentifier",
																			"src": "10222:6:22"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "10305:118:22",
															"nodeType": "YulBlock",
															"src": "10305:118:22",
															"statements": [
																{
																	"nativeSrc": "10320:16:22",
																	"nodeType": "YulVariableDeclaration",
																	"src": "10320:16:22",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "10334:2:22",
																		"nodeType": "YulLiteral",
																		"src": "10334:2:22",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "10324:6:22",
																			"nodeType": "YulTypedName",
																			"src": "10324:6:22",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "10350:63:22",
																	"nodeType": "YulAssignment",
																	"src": "10350:63:22",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "10385:9:22",
																						"nodeType": "YulIdentifier",
																						"src": "10385:9:22"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "10396:6:22",
																						"nodeType": "YulIdentifier",
																						"src": "10396:6:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "10381:3:22",
																					"nodeType": "YulIdentifier",
																					"src": "10381:3:22"
																				},
																				"nativeSrc": "10381:22:22",
																				"nodeType": "YulFunctionCall",
																				"src": "10381:22:22"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "10405:7:22",
																				"nodeType": "YulIdentifier",
																				"src": "10405:7:22"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "10360:20:22",
																			"nodeType": "YulIdentifier",
																			"src": "10360:20:22"
																		},
																		"nativeSrc": "10360:53:22",
																		"nodeType": "YulFunctionCall",
																		"src": "10360:53:22"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "10350:6:22",
																			"nodeType": "YulIdentifier",
																			"src": "10350:6:22"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "10433:118:22",
															"nodeType": "YulBlock",
															"src": "10433:118:22",
															"statements": [
																{
																	"nativeSrc": "10448:16:22",
																	"nodeType": "YulVariableDeclaration",
																	"src": "10448:16:22",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "10462:2:22",
																		"nodeType": "YulLiteral",
																		"src": "10462:2:22",
																		"type": "",
																		"value": "64"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "10452:6:22",
																			"nodeType": "YulTypedName",
																			"src": "10452:6:22",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "10478:63:22",
																	"nodeType": "YulAssignment",
																	"src": "10478:63:22",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "10513:9:22",
																						"nodeType": "YulIdentifier",
																						"src": "10513:9:22"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "10524:6:22",
																						"nodeType": "YulIdentifier",
																						"src": "10524:6:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "10509:3:22",
																					"nodeType": "YulIdentifier",
																					"src": "10509:3:22"
																				},
																				"nativeSrc": "10509:22:22",
																				"nodeType": "YulFunctionCall",
																				"src": "10509:22:22"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "10533:7:22",
																				"nodeType": "YulIdentifier",
																				"src": "10533:7:22"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "10488:20:22",
																			"nodeType": "YulIdentifier",
																			"src": "10488:20:22"
																		},
																		"nativeSrc": "10488:53:22",
																		"nodeType": "YulFunctionCall",
																		"src": "10488:53:22"
																	},
																	"variableNames": [
																		{
																			"name": "value2",
																			"nativeSrc": "10478:6:22",
																			"nodeType": "YulIdentifier",
																			"src": "10478:6:22"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "10561:118:22",
															"nodeType": "YulBlock",
															"src": "10561:118:22",
															"statements": [
																{
																	"nativeSrc": "10576:16:22",
																	"nodeType": "YulVariableDeclaration",
																	"src": "10576:16:22",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "10590:2:22",
																		"nodeType": "YulLiteral",
																		"src": "10590:2:22",
																		"type": "",
																		"value": "96"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "10580:6:22",
																			"nodeType": "YulTypedName",
																			"src": "10580:6:22",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "10606:63:22",
																	"nodeType": "YulAssignment",
																	"src": "10606:63:22",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "10641:9:22",
																						"nodeType": "YulIdentifier",
																						"src": "10641:9:22"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "10652:6:22",
																						"nodeType": "YulIdentifier",
																						"src": "10652:6:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "10637:3:22",
																					"nodeType": "YulIdentifier",
																					"src": "10637:3:22"
																				},
																				"nativeSrc": "10637:22:22",
																				"nodeType": "YulFunctionCall",
																				"src": "10637:22:22"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "10661:7:22",
																				"nodeType": "YulIdentifier",
																				"src": "10661:7:22"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nativeSrc": "10616:20:22",
																			"nodeType": "YulIdentifier",
																			"src": "10616:20:22"
																		},
																		"nativeSrc": "10616:53:22",
																		"nodeType": "YulFunctionCall",
																		"src": "10616:53:22"
																	},
																	"variableNames": [
																		{
																			"name": "value3",
																			"nativeSrc": "10606:6:22",
																			"nodeType": "YulIdentifier",
																			"src": "10606:6:22"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "10689:117:22",
															"nodeType": "YulBlock",
															"src": "10689:117:22",
															"statements": [
																{
																	"nativeSrc": "10704:17:22",
																	"nodeType": "YulVariableDeclaration",
																	"src": "10704:17:22",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "10718:3:22",
																		"nodeType": "YulLiteral",
																		"src": "10718:3:22",
																		"type": "",
																		"value": "128"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "10708:6:22",
																			"nodeType": "YulTypedName",
																			"src": "10708:6:22",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "10735:61:22",
																	"nodeType": "YulAssignment",
																	"src": "10735:61:22",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "10768:9:22",
																						"nodeType": "YulIdentifier",
																						"src": "10768:9:22"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "10779:6:22",
																						"nodeType": "YulIdentifier",
																						"src": "10779:6:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "10764:3:22",
																					"nodeType": "YulIdentifier",
																					"src": "10764:3:22"
																				},
																				"nativeSrc": "10764:22:22",
																				"nodeType": "YulFunctionCall",
																				"src": "10764:22:22"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "10788:7:22",
																				"nodeType": "YulIdentifier",
																				"src": "10788:7:22"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint8",
																			"nativeSrc": "10745:18:22",
																			"nodeType": "YulIdentifier",
																			"src": "10745:18:22"
																		},
																		"nativeSrc": "10745:51:22",
																		"nodeType": "YulFunctionCall",
																		"src": "10745:51:22"
																	},
																	"variableNames": [
																		{
																			"name": "value4",
																			"nativeSrc": "10735:6:22",
																			"nodeType": "YulIdentifier",
																			"src": "10735:6:22"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "10816:119:22",
															"nodeType": "YulBlock",
															"src": "10816:119:22",
															"statements": [
																{
																	"nativeSrc": "10831:17:22",
																	"nodeType": "YulVariableDeclaration",
																	"src": "10831:17:22",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "10845:3:22",
																		"nodeType": "YulLiteral",
																		"src": "10845:3:22",
																		"type": "",
																		"value": "160"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "10835:6:22",
																			"nodeType": "YulTypedName",
																			"src": "10835:6:22",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "10862:63:22",
																	"nodeType": "YulAssignment",
																	"src": "10862:63:22",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "10897:9:22",
																						"nodeType": "YulIdentifier",
																						"src": "10897:9:22"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "10908:6:22",
																						"nodeType": "YulIdentifier",
																						"src": "10908:6:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "10893:3:22",
																					"nodeType": "YulIdentifier",
																					"src": "10893:3:22"
																				},
																				"nativeSrc": "10893:22:22",
																				"nodeType": "YulFunctionCall",
																				"src": "10893:22:22"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "10917:7:22",
																				"nodeType": "YulIdentifier",
																				"src": "10917:7:22"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes32",
																			"nativeSrc": "10872:20:22",
																			"nodeType": "YulIdentifier",
																			"src": "10872:20:22"
																		},
																		"nativeSrc": "10872:53:22",
																		"nodeType": "YulFunctionCall",
																		"src": "10872:53:22"
																	},
																	"variableNames": [
																		{
																			"name": "value5",
																			"nativeSrc": "10862:6:22",
																			"nodeType": "YulIdentifier",
																			"src": "10862:6:22"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "10945:119:22",
															"nodeType": "YulBlock",
															"src": "10945:119:22",
															"statements": [
																{
																	"nativeSrc": "10960:17:22",
																	"nodeType": "YulVariableDeclaration",
																	"src": "10960:17:22",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "10974:3:22",
																		"nodeType": "YulLiteral",
																		"src": "10974:3:22",
																		"type": "",
																		"value": "192"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "10964:6:22",
																			"nodeType": "YulTypedName",
																			"src": "10964:6:22",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "10991:63:22",
																	"nodeType": "YulAssignment",
																	"src": "10991:63:22",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "11026:9:22",
																						"nodeType": "YulIdentifier",
																						"src": "11026:9:22"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "11037:6:22",
																						"nodeType": "YulIdentifier",
																						"src": "11037:6:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "11022:3:22",
																					"nodeType": "YulIdentifier",
																					"src": "11022:3:22"
																				},
																				"nativeSrc": "11022:22:22",
																				"nodeType": "YulFunctionCall",
																				"src": "11022:22:22"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "11046:7:22",
																				"nodeType": "YulIdentifier",
																				"src": "11046:7:22"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_bytes32",
																			"nativeSrc": "11001:20:22",
																			"nodeType": "YulIdentifier",
																			"src": "11001:20:22"
																		},
																		"nativeSrc": "11001:53:22",
																		"nodeType": "YulFunctionCall",
																		"src": "11001:53:22"
																	},
																	"variableNames": [
																		{
																			"name": "value6",
																			"nativeSrc": "10991:6:22",
																			"nodeType": "YulIdentifier",
																			"src": "10991:6:22"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32",
												"nativeSrc": "9872:1199:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "9960:9:22",
														"nodeType": "YulTypedName",
														"src": "9960:9:22",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "9971:7:22",
														"nodeType": "YulTypedName",
														"src": "9971:7:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "9983:6:22",
														"nodeType": "YulTypedName",
														"src": "9983:6:22",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "9991:6:22",
														"nodeType": "YulTypedName",
														"src": "9991:6:22",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "9999:6:22",
														"nodeType": "YulTypedName",
														"src": "9999:6:22",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "10007:6:22",
														"nodeType": "YulTypedName",
														"src": "10007:6:22",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "10015:6:22",
														"nodeType": "YulTypedName",
														"src": "10015:6:22",
														"type": ""
													},
													{
														"name": "value5",
														"nativeSrc": "10023:6:22",
														"nodeType": "YulTypedName",
														"src": "10023:6:22",
														"type": ""
													},
													{
														"name": "value6",
														"nativeSrc": "10031:6:22",
														"nodeType": "YulTypedName",
														"src": "10031:6:22",
														"type": ""
													}
												],
												"src": "9872:1199:22"
											},
											{
												"body": {
													"nativeSrc": "11160:391:22",
													"nodeType": "YulBlock",
													"src": "11160:391:22",
													"statements": [
														{
															"body": {
																"nativeSrc": "11206:83:22",
																"nodeType": "YulBlock",
																"src": "11206:83:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nativeSrc": "11208:77:22",
																				"nodeType": "YulIdentifier",
																				"src": "11208:77:22"
																			},
																			"nativeSrc": "11208:79:22",
																			"nodeType": "YulFunctionCall",
																			"src": "11208:79:22"
																		},
																		"nativeSrc": "11208:79:22",
																		"nodeType": "YulExpressionStatement",
																		"src": "11208:79:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "11181:7:22",
																				"nodeType": "YulIdentifier",
																				"src": "11181:7:22"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "11190:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "11190:9:22"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "11177:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "11177:3:22"
																		},
																		"nativeSrc": "11177:23:22",
																		"nodeType": "YulFunctionCall",
																		"src": "11177:23:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11202:2:22",
																		"nodeType": "YulLiteral",
																		"src": "11202:2:22",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "11173:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "11173:3:22"
																},
																"nativeSrc": "11173:32:22",
																"nodeType": "YulFunctionCall",
																"src": "11173:32:22"
															},
															"nativeSrc": "11170:119:22",
															"nodeType": "YulIf",
															"src": "11170:119:22"
														},
														{
															"nativeSrc": "11299:117:22",
															"nodeType": "YulBlock",
															"src": "11299:117:22",
															"statements": [
																{
																	"nativeSrc": "11314:15:22",
																	"nodeType": "YulVariableDeclaration",
																	"src": "11314:15:22",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "11328:1:22",
																		"nodeType": "YulLiteral",
																		"src": "11328:1:22",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "11318:6:22",
																			"nodeType": "YulTypedName",
																			"src": "11318:6:22",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "11343:63:22",
																	"nodeType": "YulAssignment",
																	"src": "11343:63:22",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "11378:9:22",
																						"nodeType": "YulIdentifier",
																						"src": "11378:9:22"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "11389:6:22",
																						"nodeType": "YulIdentifier",
																						"src": "11389:6:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "11374:3:22",
																					"nodeType": "YulIdentifier",
																					"src": "11374:3:22"
																				},
																				"nativeSrc": "11374:22:22",
																				"nodeType": "YulFunctionCall",
																				"src": "11374:22:22"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "11398:7:22",
																				"nodeType": "YulIdentifier",
																				"src": "11398:7:22"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "11353:20:22",
																			"nodeType": "YulIdentifier",
																			"src": "11353:20:22"
																		},
																		"nativeSrc": "11353:53:22",
																		"nodeType": "YulFunctionCall",
																		"src": "11353:53:22"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nativeSrc": "11343:6:22",
																			"nodeType": "YulIdentifier",
																			"src": "11343:6:22"
																		}
																	]
																}
															]
														},
														{
															"nativeSrc": "11426:118:22",
															"nodeType": "YulBlock",
															"src": "11426:118:22",
															"statements": [
																{
																	"nativeSrc": "11441:16:22",
																	"nodeType": "YulVariableDeclaration",
																	"src": "11441:16:22",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "11455:2:22",
																		"nodeType": "YulLiteral",
																		"src": "11455:2:22",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nativeSrc": "11445:6:22",
																			"nodeType": "YulTypedName",
																			"src": "11445:6:22",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "11471:63:22",
																	"nodeType": "YulAssignment",
																	"src": "11471:63:22",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "11506:9:22",
																						"nodeType": "YulIdentifier",
																						"src": "11506:9:22"
																					},
																					{
																						"name": "offset",
																						"nativeSrc": "11517:6:22",
																						"nodeType": "YulIdentifier",
																						"src": "11517:6:22"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "11502:3:22",
																					"nodeType": "YulIdentifier",
																					"src": "11502:3:22"
																				},
																				"nativeSrc": "11502:22:22",
																				"nodeType": "YulFunctionCall",
																				"src": "11502:22:22"
																			},
																			{
																				"name": "dataEnd",
																				"nativeSrc": "11526:7:22",
																				"nodeType": "YulIdentifier",
																				"src": "11526:7:22"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_address",
																			"nativeSrc": "11481:20:22",
																			"nodeType": "YulIdentifier",
																			"src": "11481:20:22"
																		},
																		"nativeSrc": "11481:53:22",
																		"nodeType": "YulFunctionCall",
																		"src": "11481:53:22"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nativeSrc": "11471:6:22",
																			"nodeType": "YulIdentifier",
																			"src": "11471:6:22"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nativeSrc": "11077:474:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "11122:9:22",
														"nodeType": "YulTypedName",
														"src": "11122:9:22",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "11133:7:22",
														"nodeType": "YulTypedName",
														"src": "11133:7:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "11145:6:22",
														"nodeType": "YulTypedName",
														"src": "11145:6:22",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "11153:6:22",
														"nodeType": "YulTypedName",
														"src": "11153:6:22",
														"type": ""
													}
												],
												"src": "11077:474:22"
											},
											{
												"body": {
													"nativeSrc": "11585:152:22",
													"nodeType": "YulBlock",
													"src": "11585:152:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "11602:1:22",
																		"nodeType": "YulLiteral",
																		"src": "11602:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11605:77:22",
																		"nodeType": "YulLiteral",
																		"src": "11605:77:22",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "11595:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "11595:6:22"
																},
																"nativeSrc": "11595:88:22",
																"nodeType": "YulFunctionCall",
																"src": "11595:88:22"
															},
															"nativeSrc": "11595:88:22",
															"nodeType": "YulExpressionStatement",
															"src": "11595:88:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "11699:1:22",
																		"nodeType": "YulLiteral",
																		"src": "11699:1:22",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11702:4:22",
																		"nodeType": "YulLiteral",
																		"src": "11702:4:22",
																		"type": "",
																		"value": "0x22"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "11692:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "11692:6:22"
																},
																"nativeSrc": "11692:15:22",
																"nodeType": "YulFunctionCall",
																"src": "11692:15:22"
															},
															"nativeSrc": "11692:15:22",
															"nodeType": "YulExpressionStatement",
															"src": "11692:15:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "11723:1:22",
																		"nodeType": "YulLiteral",
																		"src": "11723:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11726:4:22",
																		"nodeType": "YulLiteral",
																		"src": "11726:4:22",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "11716:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "11716:6:22"
																},
																"nativeSrc": "11716:15:22",
																"nodeType": "YulFunctionCall",
																"src": "11716:15:22"
															},
															"nativeSrc": "11716:15:22",
															"nodeType": "YulExpressionStatement",
															"src": "11716:15:22"
														}
													]
												},
												"name": "panic_error_0x22",
												"nativeSrc": "11557:180:22",
												"nodeType": "YulFunctionDefinition",
												"src": "11557:180:22"
											},
											{
												"body": {
													"nativeSrc": "11794:269:22",
													"nodeType": "YulBlock",
													"src": "11794:269:22",
													"statements": [
														{
															"nativeSrc": "11804:22:22",
															"nodeType": "YulAssignment",
															"src": "11804:22:22",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "11818:4:22",
																		"nodeType": "YulIdentifier",
																		"src": "11818:4:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11824:1:22",
																		"nodeType": "YulLiteral",
																		"src": "11824:1:22",
																		"type": "",
																		"value": "2"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "11814:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "11814:3:22"
																},
																"nativeSrc": "11814:12:22",
																"nodeType": "YulFunctionCall",
																"src": "11814:12:22"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "11804:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "11804:6:22"
																}
															]
														},
														{
															"nativeSrc": "11835:38:22",
															"nodeType": "YulVariableDeclaration",
															"src": "11835:38:22",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "11865:4:22",
																		"nodeType": "YulIdentifier",
																		"src": "11865:4:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "11871:1:22",
																		"nodeType": "YulLiteral",
																		"src": "11871:1:22",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "11861:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "11861:3:22"
																},
																"nativeSrc": "11861:12:22",
																"nodeType": "YulFunctionCall",
																"src": "11861:12:22"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "11839:18:22",
																	"nodeType": "YulTypedName",
																	"src": "11839:18:22",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "11912:51:22",
																"nodeType": "YulBlock",
																"src": "11912:51:22",
																"statements": [
																	{
																		"nativeSrc": "11926:27:22",
																		"nodeType": "YulAssignment",
																		"src": "11926:27:22",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "11940:6:22",
																					"nodeType": "YulIdentifier",
																					"src": "11940:6:22"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "11948:4:22",
																					"nodeType": "YulLiteral",
																					"src": "11948:4:22",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "11936:3:22",
																				"nodeType": "YulIdentifier",
																				"src": "11936:3:22"
																			},
																			"nativeSrc": "11936:17:22",
																			"nodeType": "YulFunctionCall",
																			"src": "11936:17:22"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "11926:6:22",
																				"nodeType": "YulIdentifier",
																				"src": "11926:6:22"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "11892:18:22",
																		"nodeType": "YulIdentifier",
																		"src": "11892:18:22"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "11885:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "11885:6:22"
																},
																"nativeSrc": "11885:26:22",
																"nodeType": "YulFunctionCall",
																"src": "11885:26:22"
															},
															"nativeSrc": "11882:81:22",
															"nodeType": "YulIf",
															"src": "11882:81:22"
														},
														{
															"body": {
																"nativeSrc": "12015:42:22",
																"nodeType": "YulBlock",
																"src": "12015:42:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x22",
																				"nativeSrc": "12029:16:22",
																				"nodeType": "YulIdentifier",
																				"src": "12029:16:22"
																			},
																			"nativeSrc": "12029:18:22",
																			"nodeType": "YulFunctionCall",
																			"src": "12029:18:22"
																		},
																		"nativeSrc": "12029:18:22",
																		"nodeType": "YulExpressionStatement",
																		"src": "12029:18:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "11979:18:22",
																		"nodeType": "YulIdentifier",
																		"src": "11979:18:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "12002:6:22",
																				"nodeType": "YulIdentifier",
																				"src": "12002:6:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "12010:2:22",
																				"nodeType": "YulLiteral",
																				"src": "12010:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "11999:2:22",
																			"nodeType": "YulIdentifier",
																			"src": "11999:2:22"
																		},
																		"nativeSrc": "11999:14:22",
																		"nodeType": "YulFunctionCall",
																		"src": "11999:14:22"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "11976:2:22",
																	"nodeType": "YulIdentifier",
																	"src": "11976:2:22"
																},
																"nativeSrc": "11976:38:22",
																"nodeType": "YulFunctionCall",
																"src": "11976:38:22"
															},
															"nativeSrc": "11973:84:22",
															"nodeType": "YulIf",
															"src": "11973:84:22"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "11743:320:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "11778:4:22",
														"nodeType": "YulTypedName",
														"src": "11778:4:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "11787:6:22",
														"nodeType": "YulTypedName",
														"src": "11787:6:22",
														"type": ""
													}
												],
												"src": "11743:320:22"
											},
											{
												"body": {
													"nativeSrc": "12097:152:22",
													"nodeType": "YulBlock",
													"src": "12097:152:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "12114:1:22",
																		"nodeType": "YulLiteral",
																		"src": "12114:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "12117:77:22",
																		"nodeType": "YulLiteral",
																		"src": "12117:77:22",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "12107:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "12107:6:22"
																},
																"nativeSrc": "12107:88:22",
																"nodeType": "YulFunctionCall",
																"src": "12107:88:22"
															},
															"nativeSrc": "12107:88:22",
															"nodeType": "YulExpressionStatement",
															"src": "12107:88:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "12211:1:22",
																		"nodeType": "YulLiteral",
																		"src": "12211:1:22",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "12214:4:22",
																		"nodeType": "YulLiteral",
																		"src": "12214:4:22",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "12204:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "12204:6:22"
																},
																"nativeSrc": "12204:15:22",
																"nodeType": "YulFunctionCall",
																"src": "12204:15:22"
															},
															"nativeSrc": "12204:15:22",
															"nodeType": "YulExpressionStatement",
															"src": "12204:15:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "12235:1:22",
																		"nodeType": "YulLiteral",
																		"src": "12235:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "12238:4:22",
																		"nodeType": "YulLiteral",
																		"src": "12238:4:22",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "12228:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "12228:6:22"
																},
																"nativeSrc": "12228:15:22",
																"nodeType": "YulFunctionCall",
																"src": "12228:15:22"
															},
															"nativeSrc": "12228:15:22",
															"nodeType": "YulExpressionStatement",
															"src": "12228:15:22"
														}
													]
												},
												"name": "panic_error_0x41",
												"nativeSrc": "12069:180:22",
												"nodeType": "YulFunctionDefinition",
												"src": "12069:180:22"
											},
											{
												"body": {
													"nativeSrc": "12493:537:22",
													"nodeType": "YulBlock",
													"src": "12493:537:22",
													"statements": [
														{
															"nativeSrc": "12503:27:22",
															"nodeType": "YulAssignment",
															"src": "12503:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "12515:9:22",
																		"nodeType": "YulIdentifier",
																		"src": "12515:9:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "12526:3:22",
																		"nodeType": "YulLiteral",
																		"src": "12526:3:22",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "12511:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "12511:3:22"
																},
																"nativeSrc": "12511:19:22",
																"nodeType": "YulFunctionCall",
																"src": "12511:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "12503:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "12503:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "12584:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "12584:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "12597:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "12597:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "12608:1:22",
																				"nodeType": "YulLiteral",
																				"src": "12608:1:22",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "12593:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "12593:3:22"
																		},
																		"nativeSrc": "12593:17:22",
																		"nodeType": "YulFunctionCall",
																		"src": "12593:17:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nativeSrc": "12540:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "12540:43:22"
																},
																"nativeSrc": "12540:71:22",
																"nodeType": "YulFunctionCall",
																"src": "12540:71:22"
															},
															"nativeSrc": "12540:71:22",
															"nodeType": "YulExpressionStatement",
															"src": "12540:71:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "12665:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "12665:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "12678:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "12678:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "12689:2:22",
																				"nodeType": "YulLiteral",
																				"src": "12689:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "12674:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "12674:3:22"
																		},
																		"nativeSrc": "12674:18:22",
																		"nodeType": "YulFunctionCall",
																		"src": "12674:18:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "12621:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "12621:43:22"
																},
																"nativeSrc": "12621:72:22",
																"nodeType": "YulFunctionCall",
																"src": "12621:72:22"
															},
															"nativeSrc": "12621:72:22",
															"nodeType": "YulExpressionStatement",
															"src": "12621:72:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "12747:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "12747:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "12760:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "12760:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "12771:2:22",
																				"nodeType": "YulLiteral",
																				"src": "12771:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "12756:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "12756:3:22"
																		},
																		"nativeSrc": "12756:18:22",
																		"nodeType": "YulFunctionCall",
																		"src": "12756:18:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "12703:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "12703:43:22"
																},
																"nativeSrc": "12703:72:22",
																"nodeType": "YulFunctionCall",
																"src": "12703:72:22"
															},
															"nativeSrc": "12703:72:22",
															"nodeType": "YulExpressionStatement",
															"src": "12703:72:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value3",
																		"nativeSrc": "12829:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "12829:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "12842:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "12842:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "12853:2:22",
																				"nodeType": "YulLiteral",
																				"src": "12853:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "12838:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "12838:3:22"
																		},
																		"nativeSrc": "12838:18:22",
																		"nodeType": "YulFunctionCall",
																		"src": "12838:18:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "12785:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "12785:43:22"
																},
																"nativeSrc": "12785:72:22",
																"nodeType": "YulFunctionCall",
																"src": "12785:72:22"
															},
															"nativeSrc": "12785:72:22",
															"nodeType": "YulExpressionStatement",
															"src": "12785:72:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value4",
																		"nativeSrc": "12911:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "12911:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "12924:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "12924:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "12935:3:22",
																				"nodeType": "YulLiteral",
																				"src": "12935:3:22",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "12920:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "12920:3:22"
																		},
																		"nativeSrc": "12920:19:22",
																		"nodeType": "YulFunctionCall",
																		"src": "12920:19:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "12867:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "12867:43:22"
																},
																"nativeSrc": "12867:73:22",
																"nodeType": "YulFunctionCall",
																"src": "12867:73:22"
															},
															"nativeSrc": "12867:73:22",
															"nodeType": "YulExpressionStatement",
															"src": "12867:73:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value5",
																		"nativeSrc": "12994:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "12994:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "13007:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "13007:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "13018:3:22",
																				"nodeType": "YulLiteral",
																				"src": "13018:3:22",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "13003:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "13003:3:22"
																		},
																		"nativeSrc": "13003:19:22",
																		"nodeType": "YulFunctionCall",
																		"src": "13003:19:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "12950:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "12950:43:22"
																},
																"nativeSrc": "12950:73:22",
																"nodeType": "YulFunctionCall",
																"src": "12950:73:22"
															},
															"nativeSrc": "12950:73:22",
															"nodeType": "YulExpressionStatement",
															"src": "12950:73:22"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "12255:775:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "12425:9:22",
														"nodeType": "YulTypedName",
														"src": "12425:9:22",
														"type": ""
													},
													{
														"name": "value5",
														"nativeSrc": "12437:6:22",
														"nodeType": "YulTypedName",
														"src": "12437:6:22",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "12445:6:22",
														"nodeType": "YulTypedName",
														"src": "12445:6:22",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "12453:6:22",
														"nodeType": "YulTypedName",
														"src": "12453:6:22",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "12461:6:22",
														"nodeType": "YulTypedName",
														"src": "12461:6:22",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "12469:6:22",
														"nodeType": "YulTypedName",
														"src": "12469:6:22",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "12477:6:22",
														"nodeType": "YulTypedName",
														"src": "12477:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "12488:4:22",
														"nodeType": "YulTypedName",
														"src": "12488:4:22",
														"type": ""
													}
												],
												"src": "12255:775:22"
											},
											{
												"body": {
													"nativeSrc": "13162:206:22",
													"nodeType": "YulBlock",
													"src": "13162:206:22",
													"statements": [
														{
															"nativeSrc": "13172:26:22",
															"nodeType": "YulAssignment",
															"src": "13172:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "13184:9:22",
																		"nodeType": "YulIdentifier",
																		"src": "13184:9:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "13195:2:22",
																		"nodeType": "YulLiteral",
																		"src": "13195:2:22",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "13180:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "13180:3:22"
																},
																"nativeSrc": "13180:18:22",
																"nodeType": "YulFunctionCall",
																"src": "13180:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "13172:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "13172:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "13252:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "13252:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "13265:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "13265:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "13276:1:22",
																				"nodeType": "YulLiteral",
																				"src": "13276:1:22",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "13261:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "13261:3:22"
																		},
																		"nativeSrc": "13261:17:22",
																		"nodeType": "YulFunctionCall",
																		"src": "13261:17:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "13208:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "13208:43:22"
																},
																"nativeSrc": "13208:71:22",
																"nodeType": "YulFunctionCall",
																"src": "13208:71:22"
															},
															"nativeSrc": "13208:71:22",
															"nodeType": "YulExpressionStatement",
															"src": "13208:71:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "13333:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "13333:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "13346:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "13346:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "13357:2:22",
																				"nodeType": "YulLiteral",
																				"src": "13357:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "13342:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "13342:3:22"
																		},
																		"nativeSrc": "13342:18:22",
																		"nodeType": "YulFunctionCall",
																		"src": "13342:18:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "13289:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "13289:43:22"
																},
																"nativeSrc": "13289:72:22",
																"nodeType": "YulFunctionCall",
																"src": "13289:72:22"
															},
															"nativeSrc": "13289:72:22",
															"nodeType": "YulExpressionStatement",
															"src": "13289:72:22"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
												"nativeSrc": "13036:332:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "13126:9:22",
														"nodeType": "YulTypedName",
														"src": "13126:9:22",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "13138:6:22",
														"nodeType": "YulTypedName",
														"src": "13138:6:22",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "13146:6:22",
														"nodeType": "YulTypedName",
														"src": "13146:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "13157:4:22",
														"nodeType": "YulTypedName",
														"src": "13157:4:22",
														"type": ""
													}
												],
												"src": "13036:332:22"
											},
											{
												"body": {
													"nativeSrc": "13528:288:22",
													"nodeType": "YulBlock",
													"src": "13528:288:22",
													"statements": [
														{
															"nativeSrc": "13538:26:22",
															"nodeType": "YulAssignment",
															"src": "13538:26:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "13550:9:22",
																		"nodeType": "YulIdentifier",
																		"src": "13550:9:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "13561:2:22",
																		"nodeType": "YulLiteral",
																		"src": "13561:2:22",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "13546:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "13546:3:22"
																},
																"nativeSrc": "13546:18:22",
																"nodeType": "YulFunctionCall",
																"src": "13546:18:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "13538:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "13538:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "13618:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "13618:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "13631:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "13631:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "13642:1:22",
																				"nodeType": "YulLiteral",
																				"src": "13642:1:22",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "13627:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "13627:3:22"
																		},
																		"nativeSrc": "13627:17:22",
																		"nodeType": "YulFunctionCall",
																		"src": "13627:17:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "13574:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "13574:43:22"
																},
																"nativeSrc": "13574:71:22",
																"nodeType": "YulFunctionCall",
																"src": "13574:71:22"
															},
															"nativeSrc": "13574:71:22",
															"nodeType": "YulExpressionStatement",
															"src": "13574:71:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "13699:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "13699:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "13712:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "13712:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "13723:2:22",
																				"nodeType": "YulLiteral",
																				"src": "13723:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "13708:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "13708:3:22"
																		},
																		"nativeSrc": "13708:18:22",
																		"nodeType": "YulFunctionCall",
																		"src": "13708:18:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "13655:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "13655:43:22"
																},
																"nativeSrc": "13655:72:22",
																"nodeType": "YulFunctionCall",
																"src": "13655:72:22"
															},
															"nativeSrc": "13655:72:22",
															"nodeType": "YulExpressionStatement",
															"src": "13655:72:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "13781:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "13781:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "13794:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "13794:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "13805:2:22",
																				"nodeType": "YulLiteral",
																				"src": "13805:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "13790:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "13790:3:22"
																		},
																		"nativeSrc": "13790:18:22",
																		"nodeType": "YulFunctionCall",
																		"src": "13790:18:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "13737:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "13737:43:22"
																},
																"nativeSrc": "13737:72:22",
																"nodeType": "YulFunctionCall",
																"src": "13737:72:22"
															},
															"nativeSrc": "13737:72:22",
															"nodeType": "YulExpressionStatement",
															"src": "13737:72:22"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "13374:442:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "13484:9:22",
														"nodeType": "YulTypedName",
														"src": "13484:9:22",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "13496:6:22",
														"nodeType": "YulTypedName",
														"src": "13496:6:22",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "13504:6:22",
														"nodeType": "YulTypedName",
														"src": "13504:6:22",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "13512:6:22",
														"nodeType": "YulTypedName",
														"src": "13512:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "13523:4:22",
														"nodeType": "YulTypedName",
														"src": "13523:4:22",
														"type": ""
													}
												],
												"src": "13374:442:22"
											},
											{
												"body": {
													"nativeSrc": "14032:454:22",
													"nodeType": "YulBlock",
													"src": "14032:454:22",
													"statements": [
														{
															"nativeSrc": "14042:27:22",
															"nodeType": "YulAssignment",
															"src": "14042:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "14054:9:22",
																		"nodeType": "YulIdentifier",
																		"src": "14054:9:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "14065:3:22",
																		"nodeType": "YulLiteral",
																		"src": "14065:3:22",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "14050:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "14050:3:22"
																},
																"nativeSrc": "14050:19:22",
																"nodeType": "YulFunctionCall",
																"src": "14050:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "14042:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "14042:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "14123:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "14123:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "14136:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "14136:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "14147:1:22",
																				"nodeType": "YulLiteral",
																				"src": "14147:1:22",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "14132:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "14132:3:22"
																		},
																		"nativeSrc": "14132:17:22",
																		"nodeType": "YulFunctionCall",
																		"src": "14132:17:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nativeSrc": "14079:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "14079:43:22"
																},
																"nativeSrc": "14079:71:22",
																"nodeType": "YulFunctionCall",
																"src": "14079:71:22"
															},
															"nativeSrc": "14079:71:22",
															"nodeType": "YulExpressionStatement",
															"src": "14079:71:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "14204:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "14204:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "14217:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "14217:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "14228:2:22",
																				"nodeType": "YulLiteral",
																				"src": "14228:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "14213:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "14213:3:22"
																		},
																		"nativeSrc": "14213:18:22",
																		"nodeType": "YulFunctionCall",
																		"src": "14213:18:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nativeSrc": "14160:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "14160:43:22"
																},
																"nativeSrc": "14160:72:22",
																"nodeType": "YulFunctionCall",
																"src": "14160:72:22"
															},
															"nativeSrc": "14160:72:22",
															"nodeType": "YulExpressionStatement",
															"src": "14160:72:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "14286:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "14286:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "14299:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "14299:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "14310:2:22",
																				"nodeType": "YulLiteral",
																				"src": "14310:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "14295:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "14295:3:22"
																		},
																		"nativeSrc": "14295:18:22",
																		"nodeType": "YulFunctionCall",
																		"src": "14295:18:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nativeSrc": "14242:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "14242:43:22"
																},
																"nativeSrc": "14242:72:22",
																"nodeType": "YulFunctionCall",
																"src": "14242:72:22"
															},
															"nativeSrc": "14242:72:22",
															"nodeType": "YulExpressionStatement",
															"src": "14242:72:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value3",
																		"nativeSrc": "14368:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "14368:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "14381:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "14381:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "14392:2:22",
																				"nodeType": "YulLiteral",
																				"src": "14392:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "14377:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "14377:3:22"
																		},
																		"nativeSrc": "14377:18:22",
																		"nodeType": "YulFunctionCall",
																		"src": "14377:18:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint256_to_t_uint256_fromStack",
																	"nativeSrc": "14324:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "14324:43:22"
																},
																"nativeSrc": "14324:72:22",
																"nodeType": "YulFunctionCall",
																"src": "14324:72:22"
															},
															"nativeSrc": "14324:72:22",
															"nodeType": "YulExpressionStatement",
															"src": "14324:72:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value4",
																		"nativeSrc": "14450:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "14450:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "14463:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "14463:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "14474:3:22",
																				"nodeType": "YulLiteral",
																				"src": "14474:3:22",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "14459:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "14459:3:22"
																		},
																		"nativeSrc": "14459:19:22",
																		"nodeType": "YulFunctionCall",
																		"src": "14459:19:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_address_to_t_address_fromStack",
																	"nativeSrc": "14406:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "14406:43:22"
																},
																"nativeSrc": "14406:73:22",
																"nodeType": "YulFunctionCall",
																"src": "14406:73:22"
															},
															"nativeSrc": "14406:73:22",
															"nodeType": "YulExpressionStatement",
															"src": "14406:73:22"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
												"nativeSrc": "13822:664:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "13972:9:22",
														"nodeType": "YulTypedName",
														"src": "13972:9:22",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "13984:6:22",
														"nodeType": "YulTypedName",
														"src": "13984:6:22",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "13992:6:22",
														"nodeType": "YulTypedName",
														"src": "13992:6:22",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "14000:6:22",
														"nodeType": "YulTypedName",
														"src": "14000:6:22",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "14008:6:22",
														"nodeType": "YulTypedName",
														"src": "14008:6:22",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "14016:6:22",
														"nodeType": "YulTypedName",
														"src": "14016:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "14027:4:22",
														"nodeType": "YulTypedName",
														"src": "14027:4:22",
														"type": ""
													}
												],
												"src": "13822:664:22"
											},
											{
												"body": {
													"nativeSrc": "14670:367:22",
													"nodeType": "YulBlock",
													"src": "14670:367:22",
													"statements": [
														{
															"nativeSrc": "14680:27:22",
															"nodeType": "YulAssignment",
															"src": "14680:27:22",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "14692:9:22",
																		"nodeType": "YulIdentifier",
																		"src": "14692:9:22"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "14703:3:22",
																		"nodeType": "YulLiteral",
																		"src": "14703:3:22",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "14688:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "14688:3:22"
																},
																"nativeSrc": "14688:19:22",
																"nodeType": "YulFunctionCall",
																"src": "14688:19:22"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "14680:4:22",
																	"nodeType": "YulIdentifier",
																	"src": "14680:4:22"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "14761:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "14761:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "14774:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "14774:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "14785:1:22",
																				"nodeType": "YulLiteral",
																				"src": "14785:1:22",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "14770:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "14770:3:22"
																		},
																		"nativeSrc": "14770:17:22",
																		"nodeType": "YulFunctionCall",
																		"src": "14770:17:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nativeSrc": "14717:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "14717:43:22"
																},
																"nativeSrc": "14717:71:22",
																"nodeType": "YulFunctionCall",
																"src": "14717:71:22"
															},
															"nativeSrc": "14717:71:22",
															"nodeType": "YulExpressionStatement",
															"src": "14717:71:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "14838:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "14838:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "14851:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "14851:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "14862:2:22",
																				"nodeType": "YulLiteral",
																				"src": "14862:2:22",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "14847:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "14847:3:22"
																		},
																		"nativeSrc": "14847:18:22",
																		"nodeType": "YulFunctionCall",
																		"src": "14847:18:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_uint8_to_t_uint8_fromStack",
																	"nativeSrc": "14798:39:22",
																	"nodeType": "YulIdentifier",
																	"src": "14798:39:22"
																},
																"nativeSrc": "14798:68:22",
																"nodeType": "YulFunctionCall",
																"src": "14798:68:22"
															},
															"nativeSrc": "14798:68:22",
															"nodeType": "YulExpressionStatement",
															"src": "14798:68:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "14920:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "14920:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "14933:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "14933:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "14944:2:22",
																				"nodeType": "YulLiteral",
																				"src": "14944:2:22",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "14929:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "14929:3:22"
																		},
																		"nativeSrc": "14929:18:22",
																		"nodeType": "YulFunctionCall",
																		"src": "14929:18:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nativeSrc": "14876:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "14876:43:22"
																},
																"nativeSrc": "14876:72:22",
																"nodeType": "YulFunctionCall",
																"src": "14876:72:22"
															},
															"nativeSrc": "14876:72:22",
															"nodeType": "YulExpressionStatement",
															"src": "14876:72:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value3",
																		"nativeSrc": "15002:6:22",
																		"nodeType": "YulIdentifier",
																		"src": "15002:6:22"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "15015:9:22",
																				"nodeType": "YulIdentifier",
																				"src": "15015:9:22"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "15026:2:22",
																				"nodeType": "YulLiteral",
																				"src": "15026:2:22",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "15011:3:22",
																			"nodeType": "YulIdentifier",
																			"src": "15011:3:22"
																		},
																		"nativeSrc": "15011:18:22",
																		"nodeType": "YulFunctionCall",
																		"src": "15011:18:22"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
																	"nativeSrc": "14958:43:22",
																	"nodeType": "YulIdentifier",
																	"src": "14958:43:22"
																},
																"nativeSrc": "14958:72:22",
																"nodeType": "YulFunctionCall",
																"src": "14958:72:22"
															},
															"nativeSrc": "14958:72:22",
															"nodeType": "YulExpressionStatement",
															"src": "14958:72:22"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
												"nativeSrc": "14492:545:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "14618:9:22",
														"nodeType": "YulTypedName",
														"src": "14618:9:22",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "14630:6:22",
														"nodeType": "YulTypedName",
														"src": "14630:6:22",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "14638:6:22",
														"nodeType": "YulTypedName",
														"src": "14638:6:22",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "14646:6:22",
														"nodeType": "YulTypedName",
														"src": "14646:6:22",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "14654:6:22",
														"nodeType": "YulTypedName",
														"src": "14654:6:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "14665:4:22",
														"nodeType": "YulTypedName",
														"src": "14665:4:22",
														"type": ""
													}
												],
												"src": "14492:545:22"
											},
											{
												"body": {
													"nativeSrc": "15071:152:22",
													"nodeType": "YulBlock",
													"src": "15071:152:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "15088:1:22",
																		"nodeType": "YulLiteral",
																		"src": "15088:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "15091:77:22",
																		"nodeType": "YulLiteral",
																		"src": "15091:77:22",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "15081:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "15081:6:22"
																},
																"nativeSrc": "15081:88:22",
																"nodeType": "YulFunctionCall",
																"src": "15081:88:22"
															},
															"nativeSrc": "15081:88:22",
															"nodeType": "YulExpressionStatement",
															"src": "15081:88:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "15185:1:22",
																		"nodeType": "YulLiteral",
																		"src": "15185:1:22",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "15188:4:22",
																		"nodeType": "YulLiteral",
																		"src": "15188:4:22",
																		"type": "",
																		"value": "0x21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "15178:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "15178:6:22"
																},
																"nativeSrc": "15178:15:22",
																"nodeType": "YulFunctionCall",
																"src": "15178:15:22"
															},
															"nativeSrc": "15178:15:22",
															"nodeType": "YulExpressionStatement",
															"src": "15178:15:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "15209:1:22",
																		"nodeType": "YulLiteral",
																		"src": "15209:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "15212:4:22",
																		"nodeType": "YulLiteral",
																		"src": "15212:4:22",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "15202:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "15202:6:22"
																},
																"nativeSrc": "15202:15:22",
																"nodeType": "YulFunctionCall",
																"src": "15202:15:22"
															},
															"nativeSrc": "15202:15:22",
															"nodeType": "YulExpressionStatement",
															"src": "15202:15:22"
														}
													]
												},
												"name": "panic_error_0x21",
												"nativeSrc": "15043:180:22",
												"nodeType": "YulFunctionDefinition",
												"src": "15043:180:22"
											},
											{
												"body": {
													"nativeSrc": "15257:152:22",
													"nodeType": "YulBlock",
													"src": "15257:152:22",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "15274:1:22",
																		"nodeType": "YulLiteral",
																		"src": "15274:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "15277:77:22",
																		"nodeType": "YulLiteral",
																		"src": "15277:77:22",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "15267:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "15267:6:22"
																},
																"nativeSrc": "15267:88:22",
																"nodeType": "YulFunctionCall",
																"src": "15267:88:22"
															},
															"nativeSrc": "15267:88:22",
															"nodeType": "YulExpressionStatement",
															"src": "15267:88:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "15371:1:22",
																		"nodeType": "YulLiteral",
																		"src": "15371:1:22",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "15374:4:22",
																		"nodeType": "YulLiteral",
																		"src": "15374:4:22",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "15364:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "15364:6:22"
																},
																"nativeSrc": "15364:15:22",
																"nodeType": "YulFunctionCall",
																"src": "15364:15:22"
															},
															"nativeSrc": "15364:15:22",
															"nodeType": "YulExpressionStatement",
															"src": "15364:15:22"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "15395:1:22",
																		"nodeType": "YulLiteral",
																		"src": "15395:1:22",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "15398:4:22",
																		"nodeType": "YulLiteral",
																		"src": "15398:4:22",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "15388:6:22",
																	"nodeType": "YulIdentifier",
																	"src": "15388:6:22"
																},
																"nativeSrc": "15388:15:22",
																"nodeType": "YulFunctionCall",
																"src": "15388:15:22"
															},
															"nativeSrc": "15388:15:22",
															"nodeType": "YulExpressionStatement",
															"src": "15388:15:22"
														}
													]
												},
												"name": "panic_error_0x11",
												"nativeSrc": "15229:180:22",
												"nodeType": "YulFunctionDefinition",
												"src": "15229:180:22"
											},
											{
												"body": {
													"nativeSrc": "15459:147:22",
													"nodeType": "YulBlock",
													"src": "15459:147:22",
													"statements": [
														{
															"nativeSrc": "15469:25:22",
															"nodeType": "YulAssignment",
															"src": "15469:25:22",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "15492:1:22",
																		"nodeType": "YulIdentifier",
																		"src": "15492:1:22"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "15474:17:22",
																	"nodeType": "YulIdentifier",
																	"src": "15474:17:22"
																},
																"nativeSrc": "15474:20:22",
																"nodeType": "YulFunctionCall",
																"src": "15474:20:22"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nativeSrc": "15469:1:22",
																	"nodeType": "YulIdentifier",
																	"src": "15469:1:22"
																}
															]
														},
														{
															"nativeSrc": "15503:25:22",
															"nodeType": "YulAssignment",
															"src": "15503:25:22",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nativeSrc": "15526:1:22",
																		"nodeType": "YulIdentifier",
																		"src": "15526:1:22"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nativeSrc": "15508:17:22",
																	"nodeType": "YulIdentifier",
																	"src": "15508:17:22"
																},
																"nativeSrc": "15508:20:22",
																"nodeType": "YulFunctionCall",
																"src": "15508:20:22"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nativeSrc": "15503:1:22",
																	"nodeType": "YulIdentifier",
																	"src": "15503:1:22"
																}
															]
														},
														{
															"nativeSrc": "15537:16:22",
															"nodeType": "YulAssignment",
															"src": "15537:16:22",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "15548:1:22",
																		"nodeType": "YulIdentifier",
																		"src": "15548:1:22"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "15551:1:22",
																		"nodeType": "YulIdentifier",
																		"src": "15551:1:22"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "15544:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "15544:3:22"
																},
																"nativeSrc": "15544:9:22",
																"nodeType": "YulFunctionCall",
																"src": "15544:9:22"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "15537:3:22",
																	"nodeType": "YulIdentifier",
																	"src": "15537:3:22"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "15577:22:22",
																"nodeType": "YulBlock",
																"src": "15577:22:22",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "15579:16:22",
																				"nodeType": "YulIdentifier",
																				"src": "15579:16:22"
																			},
																			"nativeSrc": "15579:18:22",
																			"nodeType": "YulFunctionCall",
																			"src": "15579:18:22"
																		},
																		"nativeSrc": "15579:18:22",
																		"nodeType": "YulExpressionStatement",
																		"src": "15579:18:22"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "15569:1:22",
																		"nodeType": "YulIdentifier",
																		"src": "15569:1:22"
																	},
																	{
																		"name": "sum",
																		"nativeSrc": "15572:3:22",
																		"nodeType": "YulIdentifier",
																		"src": "15572:3:22"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "15566:2:22",
																	"nodeType": "YulIdentifier",
																	"src": "15566:2:22"
																},
																"nativeSrc": "15566:10:22",
																"nodeType": "YulFunctionCall",
																"src": "15566:10:22"
															},
															"nativeSrc": "15563:36:22",
															"nodeType": "YulIf",
															"src": "15563:36:22"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nativeSrc": "15415:191:22",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "15446:1:22",
														"nodeType": "YulTypedName",
														"src": "15446:1:22",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "15449:1:22",
														"nodeType": "YulTypedName",
														"src": "15449:1:22",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "15455:3:22",
														"nodeType": "YulTypedName",
														"src": "15455:3:22",
														"type": ""
													}
												],
												"src": "15415:191:22"
											}
										]
									},
									"contents": "{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        mcopy(dst, src, length)\n        mstore(add(dst, length), 0)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bytes1(value) -> cleaned {\n        cleaned := and(value, 0xff00000000000000000000000000000000000000000000000000000000000000)\n    }\n\n    function abi_encode_t_bytes1_to_t_bytes1_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes1(value))\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function array_length_t_array$_t_uint256_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // uint256[] -> uint256[]\n    function abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_uint256_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart , value6, value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 224)\n\n        abi_encode_t_bytes1_to_t_bytes1_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value1,  tail)\n\n        mstore(add(headStart, 64), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value2,  tail)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value5,  add(headStart, 160))\n\n        mstore(add(headStart, 192), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value6,  tail)\n\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_uint8(value) {\n        if iszero(eq(value, cleanup_t_uint8(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint8(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint8(value)\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6 {\n        if slt(sub(dataEnd, headStart), 224) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint8(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 192\n\n            value6 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 192)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value5,  add(headStart, 160))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        sum := add(x, y)\n\n        if gt(x, sum) { panic_error_0x11() }\n\n    }\n\n}\n",
									"id": 22,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"2364": [
									{
										"length": 32,
										"start": 3031
									}
								],
								"2366": [
									{
										"length": 32,
										"start": 2990
									}
								],
								"2368": [
									{
										"length": 32,
										"start": 2904
									}
								],
								"2370": [
									{
										"length": 32,
										"start": 4721
									}
								],
								"2372": [
									{
										"length": 32,
										"start": 4754
									}
								],
								"2375": [
									{
										"length": 32,
										"start": 3943
									}
								],
								"2378": [
									{
										"length": 32,
										"start": 4002
									}
								]
							},
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b5060043610610140575f3560e01c8063715018a6116100b65780638da5cb5b1161007a5780638da5cb5b1461033057806395d89b411461034e578063a9059cbb1461036c578063d505accf1461039c578063dd62ed3e146103b8578063f2fde38b146103e857610140565b8063715018a6146102ac57806379cc6790146102b65780637ecebe00146102d25780638456cb591461030257806384b0196e1461030c57610140565b80633644e515116101085780633644e515146101fe5780633f4ba83a1461021c57806340c10f191461022657806342966c68146102425780635c975abb1461025e57806370a082311461027c57610140565b806306fdde0314610144578063095ea7b31461016257806318160ddd1461019257806323b872dd146101b0578063313ce567146101e0575b5f80fd5b61014c610404565b60405161015991906119fa565b60405180910390f35b61017c60048036038101906101779190611aab565b610494565b6040516101899190611b03565b60405180910390f35b61019a6104b6565b6040516101a79190611b2b565b60405180910390f35b6101ca60048036038101906101c59190611b44565b6104bf565b6040516101d79190611b03565b60405180910390f35b6101e86104ed565b6040516101f59190611baf565b60405180910390f35b6102066104f5565b6040516102139190611be0565b60405180910390f35b610224610503565b005b610240600480360381019061023b9190611aab565b610515565b005b61025c60048036038101906102579190611bf9565b61052b565b005b61026661053f565b6040516102739190611b03565b60405180910390f35b61029660048036038101906102919190611c24565b610554565b6040516102a39190611b2b565b60405180910390f35b6102b4610599565b005b6102d060048036038101906102cb9190611aab565b6105ac565b005b6102ec60048036038101906102e79190611c24565b6105cc565b6040516102f99190611b2b565b60405180910390f35b61030a6105dd565b005b6103146105ef565b6040516103279796959493929190611d4f565b60405180910390f35b610338610694565b6040516103459190611dd1565b60405180910390f35b6103566106bd565b60405161036391906119fa565b60405180910390f35b61038660048036038101906103819190611aab565b61074d565b6040516103939190611b03565b60405180910390f35b6103b660048036038101906103b19190611e3e565b61076f565b005b6103d260048036038101906103cd9190611edb565b6108b4565b6040516103df9190611b2b565b60405180910390f35b61040260048036038101906103fd9190611c24565b610936565b005b60606003805461041390611f46565b80601f016020809104026020016040519081016040528092919081815260200182805461043f90611f46565b801561048a5780601f106104615761010080835404028352916020019161048a565b820191905f5260205f20905b81548152906001019060200180831161046d57829003601f168201915b5050505050905090565b5f8061049e6109ba565b90506104ab8185856109c1565b600191505092915050565b5f600254905090565b5f806104c96109ba565b90506104d68582856109d3565b6104e1858585610a65565b60019150509392505050565b5f6012905090565b5f6104fe610b55565b905090565b61050b610c0b565b610513610c92565b565b61051d610c0b565b6105278282610cf3565b5050565b61053c6105366109ba565b82610d72565b50565b5f60055f9054906101000a900460ff16905090565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b6105a1610c0b565b6105aa5f610df1565b565b6105be826105b86109ba565b836109d3565b6105c88282610d72565b5050565b5f6105d682610eb6565b9050919050565b6105e5610c0b565b6105ed610efc565b565b5f6060805f805f6060610600610f5e565b610608610f99565b46305f801b5f67ffffffffffffffff81111561062757610626611f76565b5b6040519080825280602002602001820160405280156106555781602001602082028036833780820191505090505b507f0f00000000000000000000000000000000000000000000000000000000000000959493929190965096509650965096509650965090919293949596565b5f600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600480546106cc90611f46565b80601f01602080910402602001604051908101604052809291908181526020018280546106f890611f46565b80156107435780601f1061071a57610100808354040283529160200191610743565b820191905f5260205f20905b81548152906001019060200180831161072657829003601f168201915b5050505050905090565b5f806107576109ba565b9050610764818585610a65565b600191505092915050565b834211156107b457836040517f627913020000000000000000000000000000000000000000000000000000000081526004016107ab9190611b2b565b60405180910390fd5b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886107e28c610fd4565b896040516020016107f896959493929190611fa3565b6040516020818303038152906040528051906020012090505f61081a82611027565b90505f61082982878787611040565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461089d57808a6040517f4b800e46000000000000000000000000000000000000000000000000000000008152600401610894929190612002565b60405180910390fd5b6108a88a8a8a6109c1565b50505050505050505050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b61093e610c0b565b5f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109ae575f6040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016109a59190611dd1565b60405180910390fd5b6109b781610df1565b50565b5f33905090565b6109ce838383600161106e565b505050565b5f6109de84846108b4565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610a5f5781811015610a50578281836040517ffb8f41b2000000000000000000000000000000000000000000000000000000008152600401610a4793929190612029565b60405180910390fd5b610a5e84848484035f61106e565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610ad5575f6040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610acc9190611dd1565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b45575f6040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610b3c9190611dd1565b60405180910390fd5b610b5083838361123d565b505050565b5f7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16148015610bd057507f000000000000000000000000000000000000000000000000000000000000000046145b15610bfd577f00000000000000000000000000000000000000000000000000000000000000009050610c08565b610c0561124d565b90505b90565b610c136109ba565b73ffffffffffffffffffffffffffffffffffffffff16610c31610694565b73ffffffffffffffffffffffffffffffffffffffff1614610c9057610c546109ba565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610c879190611dd1565b60405180910390fd5b565b610c9a6112e2565b5f60055f6101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa610cdc6109ba565b604051610ce99190611dd1565b60405180910390a1565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d63575f6040517fec442f05000000000000000000000000000000000000000000000000000000008152600401610d5a9190611dd1565b60405180910390fd5b610d6e5f838361123d565b5050565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610de2575f6040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401610dd99190611dd1565b60405180910390fd5b610ded825f8361123d565b5050565b5f600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5f60085f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b610f04611322565b600160055f6101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610f476109ba565b604051610f549190611dd1565b60405180910390a1565b6060610f9460067f000000000000000000000000000000000000000000000000000000000000000061136390919063ffffffff16565b905090565b6060610fcf60077f000000000000000000000000000000000000000000000000000000000000000061136390919063ffffffff16565b905090565b5f60085f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f815480929190600101919050559050919050565b5f611039611033610b55565b83611410565b9050919050565b5f805f8061105088888888611450565b9250925092506110608282611537565b829350505050949350505050565b5f73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036110de575f6040517fe602df050000000000000000000000000000000000000000000000000000000081526004016110d59190611dd1565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361114e575f6040517f94280d620000000000000000000000000000000000000000000000000000000081526004016111459190611dd1565b60405180910390fd5b8160015f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508015611237578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161122e9190611b2b565b60405180910390a35b50505050565b611248838383611699565b505050565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000046306040516020016112c795949392919061205e565b60405160208183030381529060405280519060200120905090565b6112ea61053f565b611320576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b61132a61053f565b15611361576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b606060ff5f1b831461137f57611378836116b1565b905061140a565b81805461138b90611f46565b80601f01602080910402602001604051908101604052809291908181526020018280546113b790611f46565b80156114025780601f106113d957610100808354040283529160200191611402565b820191905f5260205f20905b8154815290600101906020018083116113e557829003601f168201915b505050505090505b92915050565b5f6040517f190100000000000000000000000000000000000000000000000000000000000081528360028201528260228201526042812091505092915050565b5f805f7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0845f1c111561148c575f60038592509250925061152d565b5f6001888888886040515f81526020016040526040516114af94939291906120af565b6020604051602081039080840390855afa1580156114cf573d5f803e3d5ffd5b5050506020604051035190505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611520575f60015f801b9350935093505061152d565b805f805f1b935093509350505b9450945094915050565b5f600381111561154a576115496120f2565b5b82600381111561155d5761155c6120f2565b5b03156116955760016003811115611577576115766120f2565b5b82600381111561158a576115896120f2565b5b036115c1576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260038111156115d5576115d46120f2565b5b8260038111156115e8576115e76120f2565b5b0361162c57805f1c6040517ffce698f70000000000000000000000000000000000000000000000000000000081526004016116239190611b2b565b60405180910390fd5b60038081111561163f5761163e6120f2565b5b826003811115611652576116516120f2565b5b0361169457806040517fd78bce0c00000000000000000000000000000000000000000000000000000000815260040161168b9190611be0565b60405180910390fd5b5b5050565b6116a1611322565b6116ac838383611723565b505050565b60605f6116bd8361193c565b90505f602067ffffffffffffffff8111156116db576116da611f76565b5b6040519080825280601f01601f19166020018201604052801561170d5781602001600182028036833780820191505090505b5090508181528360208201528092505050919050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611773578060025f828254611767919061214c565b92505081905550611841565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050818110156117fc578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016117f393929190612029565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550505b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611888578060025f82825403925050819055506118d2565b805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161192f9190611b2b565b60405180910390a3505050565b5f8060ff835f1c169050601f811115611981576040517fb3512b0c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80915050919050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6119cc8261198a565b6119d68185611994565b93506119e68185602086016119a4565b6119ef816119b2565b840191505092915050565b5f6020820190508181035f830152611a1281846119c2565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f611a4782611a1e565b9050919050565b611a5781611a3d565b8114611a61575f80fd5b50565b5f81359050611a7281611a4e565b92915050565b5f819050919050565b611a8a81611a78565b8114611a94575f80fd5b50565b5f81359050611aa581611a81565b92915050565b5f8060408385031215611ac157611ac0611a1a565b5b5f611ace85828601611a64565b9250506020611adf85828601611a97565b9150509250929050565b5f8115159050919050565b611afd81611ae9565b82525050565b5f602082019050611b165f830184611af4565b92915050565b611b2581611a78565b82525050565b5f602082019050611b3e5f830184611b1c565b92915050565b5f805f60608486031215611b5b57611b5a611a1a565b5b5f611b6886828701611a64565b9350506020611b7986828701611a64565b9250506040611b8a86828701611a97565b9150509250925092565b5f60ff82169050919050565b611ba981611b94565b82525050565b5f602082019050611bc25f830184611ba0565b92915050565b5f819050919050565b611bda81611bc8565b82525050565b5f602082019050611bf35f830184611bd1565b92915050565b5f60208284031215611c0e57611c0d611a1a565b5b5f611c1b84828501611a97565b91505092915050565b5f60208284031215611c3957611c38611a1a565b5b5f611c4684828501611a64565b91505092915050565b5f7fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b611c8381611c4f565b82525050565b611c9281611a3d565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b611cca81611a78565b82525050565b5f611cdb8383611cc1565b60208301905092915050565b5f602082019050919050565b5f611cfd82611c98565b611d078185611ca2565b9350611d1283611cb2565b805f5b83811015611d42578151611d298882611cd0565b9750611d3483611ce7565b925050600181019050611d15565b5085935050505092915050565b5f60e082019050611d625f83018a611c7a565b8181036020830152611d7481896119c2565b90508181036040830152611d8881886119c2565b9050611d976060830187611b1c565b611da46080830186611c89565b611db160a0830185611bd1565b81810360c0830152611dc38184611cf3565b905098975050505050505050565b5f602082019050611de45f830184611c89565b92915050565b611df381611b94565b8114611dfd575f80fd5b50565b5f81359050611e0e81611dea565b92915050565b611e1d81611bc8565b8114611e27575f80fd5b50565b5f81359050611e3881611e14565b92915050565b5f805f805f805f60e0888a031215611e5957611e58611a1a565b5b5f611e668a828b01611a64565b9750506020611e778a828b01611a64565b9650506040611e888a828b01611a97565b9550506060611e998a828b01611a97565b9450506080611eaa8a828b01611e00565b93505060a0611ebb8a828b01611e2a565b92505060c0611ecc8a828b01611e2a565b91505092959891949750929550565b5f8060408385031215611ef157611ef0611a1a565b5b5f611efe85828601611a64565b9250506020611f0f85828601611a64565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680611f5d57607f821691505b602082108103611f7057611f6f611f19565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f60c082019050611fb65f830189611bd1565b611fc36020830188611c89565b611fd06040830187611c89565b611fdd6060830186611b1c565b611fea6080830185611b1c565b611ff760a0830184611b1c565b979650505050505050565b5f6040820190506120155f830185611c89565b6120226020830184611c89565b9392505050565b5f60608201905061203c5f830186611c89565b6120496020830185611b1c565b6120566040830184611b1c565b949350505050565b5f60a0820190506120715f830188611bd1565b61207e6020830187611bd1565b61208b6040830186611bd1565b6120986060830185611b1c565b6120a56080830184611c89565b9695505050505050565b5f6080820190506120c25f830187611bd1565b6120cf6020830186611ba0565b6120dc6040830185611bd1565b6120e96060830184611bd1565b95945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61215682611a78565b915061216183611a78565b92508282019050808211156121795761217861211f565b5b9291505056fea2646970667358221220ff9e023953b20e928a81c3df5312e9e96fbddfb24a474c672d6ee9dfe43b5dbc64736f6c634300081a0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x140 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xB6 JUMPI DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x7A JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x330 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x34E JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x36C JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x39C JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x3B8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3E8 JUMPI PUSH2 0x140 JUMP JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2AC JUMPI DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x2B6 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x2D2 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x302 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x30C JUMPI PUSH2 0x140 JUMP JUMPDEST DUP1 PUSH4 0x3644E515 GT PUSH2 0x108 JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x1FE JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x21C JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x226 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x242 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x27C JUMPI PUSH2 0x140 JUMP JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x144 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x162 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1B0 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x1E0 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x14C PUSH2 0x404 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x159 SWAP2 SWAP1 PUSH2 0x19FA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x177 SWAP2 SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH2 0x494 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x189 SWAP2 SWAP1 PUSH2 0x1B03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x19A PUSH2 0x4B6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1A7 SWAP2 SWAP1 PUSH2 0x1B2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CA PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1C5 SWAP2 SWAP1 PUSH2 0x1B44 JUMP JUMPDEST PUSH2 0x4BF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D7 SWAP2 SWAP1 PUSH2 0x1B03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E8 PUSH2 0x4ED JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F5 SWAP2 SWAP1 PUSH2 0x1BAF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x206 PUSH2 0x4F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x213 SWAP2 SWAP1 PUSH2 0x1BE0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x224 PUSH2 0x503 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x240 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x23B SWAP2 SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH2 0x515 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x257 SWAP2 SWAP1 PUSH2 0x1BF9 JUMP JUMPDEST PUSH2 0x52B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x266 PUSH2 0x53F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x273 SWAP2 SWAP1 PUSH2 0x1B03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x296 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x291 SWAP2 SWAP1 PUSH2 0x1C24 JUMP JUMPDEST PUSH2 0x554 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A3 SWAP2 SWAP1 PUSH2 0x1B2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B4 PUSH2 0x599 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2D0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2CB SWAP2 SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH2 0x5AC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2EC PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E7 SWAP2 SWAP1 PUSH2 0x1C24 JUMP JUMPDEST PUSH2 0x5CC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F9 SWAP2 SWAP1 PUSH2 0x1B2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x30A PUSH2 0x5DD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x314 PUSH2 0x5EF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x327 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D4F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x338 PUSH2 0x694 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x345 SWAP2 SWAP1 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x356 PUSH2 0x6BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x363 SWAP2 SWAP1 PUSH2 0x19FA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x386 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x381 SWAP2 SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH2 0x74D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x393 SWAP2 SWAP1 PUSH2 0x1B03 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3B6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3B1 SWAP2 SWAP1 PUSH2 0x1E3E JUMP JUMPDEST PUSH2 0x76F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3D2 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3CD SWAP2 SWAP1 PUSH2 0x1EDB JUMP JUMPDEST PUSH2 0x8B4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x3DF SWAP2 SWAP1 PUSH2 0x1B2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x402 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3FD SWAP2 SWAP1 PUSH2 0x1C24 JUMP JUMPDEST PUSH2 0x936 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x413 SWAP1 PUSH2 0x1F46 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x43F SWAP1 PUSH2 0x1F46 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x48A JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x461 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x48A JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x46D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x49E PUSH2 0x9BA JUMP JUMPDEST SWAP1 POP PUSH2 0x4AB DUP2 DUP6 DUP6 PUSH2 0x9C1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x4C9 PUSH2 0x9BA JUMP JUMPDEST SWAP1 POP PUSH2 0x4D6 DUP6 DUP3 DUP6 PUSH2 0x9D3 JUMP JUMPDEST PUSH2 0x4E1 DUP6 DUP6 DUP6 PUSH2 0xA65 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x4FE PUSH2 0xB55 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x50B PUSH2 0xC0B JUMP JUMPDEST PUSH2 0x513 PUSH2 0xC92 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x51D PUSH2 0xC0B JUMP JUMPDEST PUSH2 0x527 DUP3 DUP3 PUSH2 0xCF3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x53C PUSH2 0x536 PUSH2 0x9BA JUMP JUMPDEST DUP3 PUSH2 0xD72 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5A1 PUSH2 0xC0B JUMP JUMPDEST PUSH2 0x5AA PUSH0 PUSH2 0xDF1 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x5BE DUP3 PUSH2 0x5B8 PUSH2 0x9BA JUMP JUMPDEST DUP4 PUSH2 0x9D3 JUMP JUMPDEST PUSH2 0x5C8 DUP3 DUP3 PUSH2 0xD72 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH2 0x5D6 DUP3 PUSH2 0xEB6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5E5 PUSH2 0xC0B JUMP JUMPDEST PUSH2 0x5ED PUSH2 0xEFC JUMP JUMPDEST JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x60 PUSH2 0x600 PUSH2 0xF5E JUMP JUMPDEST PUSH2 0x608 PUSH2 0xF99 JUMP JUMPDEST CHAINID ADDRESS PUSH0 DUP1 SHL PUSH0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x627 JUMPI PUSH2 0x626 PUSH2 0x1F76 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x655 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH32 0xF00000000000000000000000000000000000000000000000000000000000000 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP7 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x6CC SWAP1 PUSH2 0x1F46 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x6F8 SWAP1 PUSH2 0x1F46 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x743 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x71A JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x743 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x726 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x757 PUSH2 0x9BA JUMP JUMPDEST SWAP1 POP PUSH2 0x764 DUP2 DUP6 DUP6 PUSH2 0xA65 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x7B4 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x6279130200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7AB SWAP2 SWAP1 PUSH2 0x1B2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x7E2 DUP13 PUSH2 0xFD4 JUMP JUMPDEST DUP10 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x7F8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1FA3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH0 PUSH2 0x81A DUP3 PUSH2 0x1027 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x829 DUP3 DUP8 DUP8 DUP8 PUSH2 0x1040 JUMP JUMPDEST SWAP1 POP DUP10 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x89D JUMPI DUP1 DUP11 PUSH1 0x40 MLOAD PUSH32 0x4B800E4600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x894 SWAP3 SWAP2 SWAP1 PUSH2 0x2002 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x8A8 DUP11 DUP11 DUP11 PUSH2 0x9C1 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x93E PUSH2 0xC0B JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x9AE JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9A5 SWAP2 SWAP1 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x9B7 DUP2 PUSH2 0xDF1 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x9CE DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x106E JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x9DE DUP5 DUP5 PUSH2 0x8B4 JUMP JUMPDEST SWAP1 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 EQ PUSH2 0xA5F JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xA50 JUMPI DUP3 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xFB8F41B200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xA47 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2029 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA5E DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x106E JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xAD5 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xACC SWAP2 SWAP1 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xB45 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xB3C SWAP2 SWAP1 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB50 DUP4 DUP4 DUP4 PUSH2 0x123D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ADDRESS PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 ISZERO PUSH2 0xBD0 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0xBFD JUMPI PUSH32 0x0 SWAP1 POP PUSH2 0xC08 JUMP JUMPDEST PUSH2 0xC05 PUSH2 0x124D JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xC13 PUSH2 0x9BA JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC31 PUSH2 0x694 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC90 JUMPI PUSH2 0xC54 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC87 SWAP2 SWAP1 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0xC9A PUSH2 0x12E2 JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH2 0xCDC PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCE9 SWAP2 SWAP1 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD63 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xEC442F0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD5A SWAP2 SWAP1 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD6E PUSH0 DUP4 DUP4 PUSH2 0x123D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xDE2 JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x96C6FD1E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDD9 SWAP2 SWAP1 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDED DUP3 PUSH0 DUP4 PUSH2 0x123D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH1 0x5 PUSH1 0x1 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0x5 PUSH1 0x1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x8 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xF04 PUSH2 0x1322 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x5 PUSH0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0xF47 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF54 SWAP2 SWAP1 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF94 PUSH1 0x6 PUSH32 0x0 PUSH2 0x1363 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xFCF PUSH1 0x7 PUSH32 0x0 PUSH2 0x1363 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x8 PUSH0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 0x1 ADD SWAP2 SWAP1 POP SSTORE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1039 PUSH2 0x1033 PUSH2 0xB55 JUMP JUMPDEST DUP4 PUSH2 0x1410 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH2 0x1050 DUP9 DUP9 DUP9 DUP9 PUSH2 0x1450 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x1060 DUP3 DUP3 PUSH2 0x1537 JUMP JUMPDEST DUP3 SWAP4 POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x10DE JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0xE602DF0500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10D5 SWAP2 SWAP1 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x114E JUMPI PUSH0 PUSH1 0x40 MLOAD PUSH32 0x94280D6200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1145 SWAP2 SWAP1 PUSH2 0x1DD1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x1 PUSH0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 ISZERO PUSH2 0x1237 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x122E SWAP2 SWAP1 PUSH2 0x1B2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1248 DUP4 DUP4 DUP4 PUSH2 0x1699 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH32 0x0 PUSH32 0x0 CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x12C7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x205E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x12EA PUSH2 0x53F JUMP JUMPDEST PUSH2 0x1320 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8DFC202B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 0x132A PUSH2 0x53F JUMP JUMPDEST ISZERO PUSH2 0x1361 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD93C066500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF PUSH0 SHL DUP4 EQ PUSH2 0x137F JUMPI PUSH2 0x1378 DUP4 PUSH2 0x16B1 JUMP JUMPDEST SWAP1 POP PUSH2 0x140A JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0x138B SWAP1 PUSH2 0x1F46 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x13B7 SWAP1 PUSH2 0x1F46 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1402 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x13D9 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1402 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x13E5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE DUP4 PUSH1 0x2 DUP3 ADD MSTORE DUP3 PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 DUP2 KECCAK256 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 PUSH0 SHR GT ISZERO PUSH2 0x148C JUMPI PUSH0 PUSH1 0x3 DUP6 SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x152D JUMP JUMPDEST PUSH0 PUSH1 0x1 DUP9 DUP9 DUP9 DUP9 PUSH1 0x40 MLOAD PUSH0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x14AF SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x20AF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x14CF JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD SWAP1 POP PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1520 JUMPI PUSH0 PUSH1 0x1 PUSH0 DUP1 SHL SWAP4 POP SWAP4 POP SWAP4 POP POP PUSH2 0x152D JUMP JUMPDEST DUP1 PUSH0 DUP1 PUSH0 SHL SWAP4 POP SWAP4 POP SWAP4 POP POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x154A JUMPI PUSH2 0x1549 PUSH2 0x20F2 JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x155D JUMPI PUSH2 0x155C PUSH2 0x20F2 JUMP JUMPDEST JUMPDEST SUB ISZERO PUSH2 0x1695 JUMPI PUSH1 0x1 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1577 JUMPI PUSH2 0x1576 PUSH2 0x20F2 JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x158A JUMPI PUSH2 0x1589 PUSH2 0x20F2 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x15C1 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF645EEDF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x15D5 JUMPI PUSH2 0x15D4 PUSH2 0x20F2 JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x15E8 JUMPI PUSH2 0x15E7 PUSH2 0x20F2 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x162C JUMPI DUP1 PUSH0 SHR PUSH1 0x40 MLOAD PUSH32 0xFCE698F700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1623 SWAP2 SWAP1 PUSH2 0x1B2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 DUP1 DUP2 GT ISZERO PUSH2 0x163F JUMPI PUSH2 0x163E PUSH2 0x20F2 JUMP JUMPDEST JUMPDEST DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1652 JUMPI PUSH2 0x1651 PUSH2 0x20F2 JUMP JUMPDEST JUMPDEST SUB PUSH2 0x1694 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0xD78BCE0C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x168B SWAP2 SWAP1 PUSH2 0x1BE0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x16A1 PUSH2 0x1322 JUMP JUMPDEST PUSH2 0x16AC DUP4 DUP4 DUP4 PUSH2 0x1723 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0x16BD DUP4 PUSH2 0x193C JUMP JUMPDEST SWAP1 POP PUSH0 PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x16DB JUMPI PUSH2 0x16DA PUSH2 0x1F76 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x170D JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 MSTORE DUP4 PUSH1 0x20 DUP3 ADD MSTORE DUP1 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1773 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x1767 SWAP2 SWAP1 PUSH2 0x214C JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x1841 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 0x17FC JUMPI DUP4 DUP2 DUP4 PUSH1 0x40 MLOAD PUSH32 0xE450D38C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17F3 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2029 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1888 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 0x18D2 JUMP JUMPDEST DUP1 PUSH0 DUP1 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 KECCAK256 PUSH0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x192F SWAP2 SWAP1 PUSH2 0x1B2B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0xFF DUP4 PUSH0 SHR AND SWAP1 POP PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x1981 JUMPI PUSH1 0x40 MLOAD PUSH32 0xB3512B0C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 MCOPY PUSH0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x19CC DUP3 PUSH2 0x198A JUMP JUMPDEST PUSH2 0x19D6 DUP2 DUP6 PUSH2 0x1994 JUMP JUMPDEST SWAP4 POP PUSH2 0x19E6 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x19A4 JUMP JUMPDEST PUSH2 0x19EF DUP2 PUSH2 0x19B2 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH0 DUP4 ADD MSTORE PUSH2 0x1A12 DUP2 DUP5 PUSH2 0x19C2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1A47 DUP3 PUSH2 0x1A1E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A57 DUP2 PUSH2 0x1A3D JUMP JUMPDEST DUP2 EQ PUSH2 0x1A61 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1A72 DUP2 PUSH2 0x1A4E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A8A DUP2 PUSH2 0x1A78 JUMP JUMPDEST DUP2 EQ PUSH2 0x1A94 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1AA5 DUP2 PUSH2 0x1A81 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1AC1 JUMPI PUSH2 0x1AC0 PUSH2 0x1A1A JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1ACE DUP6 DUP3 DUP7 ADD PUSH2 0x1A64 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1ADF DUP6 DUP3 DUP7 ADD PUSH2 0x1A97 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AFD DUP2 PUSH2 0x1AE9 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B16 PUSH0 DUP4 ADD DUP5 PUSH2 0x1AF4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1B25 DUP2 PUSH2 0x1A78 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1B3E PUSH0 DUP4 ADD DUP5 PUSH2 0x1B1C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1B5B JUMPI PUSH2 0x1B5A PUSH2 0x1A1A JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1B68 DUP7 DUP3 DUP8 ADD PUSH2 0x1A64 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1B79 DUP7 DUP3 DUP8 ADD PUSH2 0x1A64 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1B8A DUP7 DUP3 DUP8 ADD PUSH2 0x1A97 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1BA9 DUP2 PUSH2 0x1B94 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1BC2 PUSH0 DUP4 ADD DUP5 PUSH2 0x1BA0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1BDA DUP2 PUSH2 0x1BC8 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1BF3 PUSH0 DUP4 ADD DUP5 PUSH2 0x1BD1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C0E JUMPI PUSH2 0x1C0D PUSH2 0x1A1A JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1C1B DUP5 DUP3 DUP6 ADD PUSH2 0x1A97 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C39 JUMPI PUSH2 0x1C38 PUSH2 0x1A1A JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1C46 DUP5 DUP3 DUP6 ADD PUSH2 0x1A64 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH32 0xFF00000000000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1C83 DUP2 PUSH2 0x1C4F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x1C92 DUP2 PUSH2 0x1A3D JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1CCA DUP2 PUSH2 0x1A78 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1CDB DUP4 DUP4 PUSH2 0x1CC1 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH2 0x1CFD DUP3 PUSH2 0x1C98 JUMP JUMPDEST PUSH2 0x1D07 DUP2 DUP6 PUSH2 0x1CA2 JUMP JUMPDEST SWAP4 POP PUSH2 0x1D12 DUP4 PUSH2 0x1CB2 JUMP JUMPDEST DUP1 PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1D42 JUMPI DUP2 MLOAD PUSH2 0x1D29 DUP9 DUP3 PUSH2 0x1CD0 JUMP JUMPDEST SWAP8 POP PUSH2 0x1D34 DUP4 PUSH2 0x1CE7 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x1D15 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0xE0 DUP3 ADD SWAP1 POP PUSH2 0x1D62 PUSH0 DUP4 ADD DUP11 PUSH2 0x1C7A JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1D74 DUP2 DUP10 PUSH2 0x19C2 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x1D88 DUP2 DUP9 PUSH2 0x19C2 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D97 PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x1B1C JUMP JUMPDEST PUSH2 0x1DA4 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x1C89 JUMP JUMPDEST PUSH2 0x1DB1 PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x1BD1 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x1DC3 DUP2 DUP5 PUSH2 0x1CF3 JUMP JUMPDEST SWAP1 POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1DE4 PUSH0 DUP4 ADD DUP5 PUSH2 0x1C89 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1DF3 DUP2 PUSH2 0x1B94 JUMP JUMPDEST DUP2 EQ PUSH2 0x1DFD JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1E0E DUP2 PUSH2 0x1DEA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1E1D DUP2 PUSH2 0x1BC8 JUMP JUMPDEST DUP2 EQ PUSH2 0x1E27 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1E38 DUP2 PUSH2 0x1E14 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x1E59 JUMPI PUSH2 0x1E58 PUSH2 0x1A1A JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1E66 DUP11 DUP3 DUP12 ADD PUSH2 0x1A64 JUMP JUMPDEST SWAP8 POP POP PUSH1 0x20 PUSH2 0x1E77 DUP11 DUP3 DUP12 ADD PUSH2 0x1A64 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x40 PUSH2 0x1E88 DUP11 DUP3 DUP12 ADD PUSH2 0x1A97 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x60 PUSH2 0x1E99 DUP11 DUP3 DUP12 ADD PUSH2 0x1A97 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x80 PUSH2 0x1EAA DUP11 DUP3 DUP12 ADD PUSH2 0x1E00 JUMP JUMPDEST SWAP4 POP POP PUSH1 0xA0 PUSH2 0x1EBB DUP11 DUP3 DUP12 ADD PUSH2 0x1E2A JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 PUSH2 0x1ECC DUP11 DUP3 DUP12 ADD PUSH2 0x1E2A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1EF1 JUMPI PUSH2 0x1EF0 PUSH2 0x1A1A JUMP JUMPDEST JUMPDEST PUSH0 PUSH2 0x1EFE DUP6 DUP3 DUP7 ADD PUSH2 0x1A64 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1F0F DUP6 DUP3 DUP7 ADD PUSH2 0x1A64 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1F5D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1F70 JUMPI PUSH2 0x1F6F PUSH2 0x1F19 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0xC0 DUP3 ADD SWAP1 POP PUSH2 0x1FB6 PUSH0 DUP4 ADD DUP10 PUSH2 0x1BD1 JUMP JUMPDEST PUSH2 0x1FC3 PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x1C89 JUMP JUMPDEST PUSH2 0x1FD0 PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x1C89 JUMP JUMPDEST PUSH2 0x1FDD PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x1B1C JUMP JUMPDEST PUSH2 0x1FEA PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x1B1C JUMP JUMPDEST PUSH2 0x1FF7 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x1B1C JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2015 PUSH0 DUP4 ADD DUP6 PUSH2 0x1C89 JUMP JUMPDEST PUSH2 0x2022 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1C89 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x203C PUSH0 DUP4 ADD DUP7 PUSH2 0x1C89 JUMP JUMPDEST PUSH2 0x2049 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x1B1C JUMP JUMPDEST PUSH2 0x2056 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1B1C JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0x2071 PUSH0 DUP4 ADD DUP9 PUSH2 0x1BD1 JUMP JUMPDEST PUSH2 0x207E PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x1BD1 JUMP JUMPDEST PUSH2 0x208B PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x1BD1 JUMP JUMPDEST PUSH2 0x2098 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x1B1C JUMP JUMPDEST PUSH2 0x20A5 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x1C89 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x20C2 PUSH0 DUP4 ADD DUP8 PUSH2 0x1BD1 JUMP JUMPDEST PUSH2 0x20CF PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1BA0 JUMP JUMPDEST PUSH2 0x20DC PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1BD1 JUMP JUMPDEST PUSH2 0x20E9 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x1BD1 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH2 0x2156 DUP3 PUSH2 0x1A78 JUMP JUMPDEST SWAP2 POP PUSH2 0x2161 DUP4 PUSH2 0x1A78 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 0x2179 JUMPI PUSH2 0x2178 PUSH2 0x211F JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SELFDESTRUCT SWAP15 MUL CODECOPY MSTORE8 0xB2 0xE SWAP3 DUP11 DUP2 0xC3 0xDF MSTORE8 SLT 0xE9 0xE9 PUSH16 0xBDDFB24A474C672D6EE9DFE43B5DBC64 PUSH20 0x6F6C634300081A00330000000000000000000000 ",
							"sourceMap": "450:820:21:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89:3;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4293:186;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3144:97;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5039:244;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3002:82;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2656:112:7;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;851:65:21;;;:::i;:::-;;924:95;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;618:87:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1850:84:12;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3299:116:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2293:101:0;;;:::i;:::-;;1021:158:5;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2406:143:7;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;782:61:21;;;:::i;:::-;;5144:557:17;;;:::i;:::-;;;;;;;;;;;;;:::i;:::-;;;;;;;;1638:85:0;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2276:93:3;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3610:178;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1680:672:7;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3846:140:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2543:215:0;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2074:89:3;2119:13;2151:5;2144:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89;:::o;4293:186::-;4366:4;4382:13;4398:12;:10;:12::i;:::-;4382:28;;4420:31;4429:5;4436:7;4445:5;4420:8;:31::i;:::-;4468:4;4461:11;;;4293:186;;;;:::o;3144:97::-;3196:7;3222:12;;3215:19;;3144:97;:::o;5039:244::-;5126:4;5142:15;5160:12;:10;:12::i;:::-;5142:30;;5182:37;5198:4;5204:7;5213:5;5182:15;:37::i;:::-;5229:26;5239:4;5245:2;5249:5;5229:9;:26::i;:::-;5272:4;5265:11;;;5039:244;;;;;:::o;3002:82::-;3051:5;3075:2;3068:9;;3002:82;:::o;2656:112:7:-;2715:7;2741:20;:18;:20::i;:::-;2734:27;;2656:112;:::o;851:65:21:-;1531:13:0;:11;:13::i;:::-;898:10:21::1;:8;:10::i;:::-;851:65::o:0;924:95::-;1531:13:0;:11;:13::i;:::-;994:17:21::1;1000:2;1004:6;994:5;:17::i;:::-;924:95:::0;;:::o;618:87:5:-;672:26;678:12;:10;:12::i;:::-;692:5;672;:26::i;:::-;618:87;:::o;1850:84:12:-;1897:4;1920:7;;;;;;;;;;;1913:14;;1850:84;:::o;3299:116:3:-;3364:7;3390:9;:18;3400:7;3390:18;;;;;;;;;;;;;;;;3383:25;;3299:116;;;:::o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;1021:158:5:-;1096:45;1112:7;1121:12;:10;:12::i;:::-;1135:5;1096:15;:45::i;:::-;1151:21;1157:7;1166:5;1151;:21::i;:::-;1021:158;;:::o;2406:143:7:-;2497:7;2523:19;2536:5;2523:12;:19::i;:::-;2516:26;;2406:143;;;:::o;782:61:21:-;1531:13:0;:11;:13::i;:::-;827:8:21::1;:6;:8::i;:::-;782:61::o:0;5144:557:17:-;5242:13;5269:18;5301:21;5336:15;5365:25;5404:12;5430:27;5533:13;:11;:13::i;:::-;5560:16;:14;:16::i;:::-;5590:13;5625:4;5652:1;5644:10;;5682:1;5668:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5482:212;;;;;;;;;;;;;;;;;;;;;5144:557;;;;;;;:::o;1638:85:0:-;1684:7;1710:6;;;;;;;;;;;1703:13;;1638:85;:::o;2276:93:3:-;2323:13;2355:7;2348:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2276:93;:::o;3610:178::-;3679:4;3695:13;3711:12;:10;:12::i;:::-;3695:28;;3733:27;3743:5;3750:2;3754:5;3733:9;:27::i;:::-;3777:4;3770:11;;;3610:178;;;;:::o;1680:672:7:-;1901:8;1883:15;:26;1879:97;;;1956:8;1932:33;;;;;;;;;;;:::i;:::-;;;;;;;;1879:97;1986:18;1022:95;2045:5;2052:7;2061:5;2068:16;2078:5;2068:9;:16::i;:::-;2086:8;2017:78;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2007:89;;;;;;1986:110;;2107:12;2122:28;2139:10;2122:16;:28::i;:::-;2107:43;;2161:14;2178:28;2192:4;2198:1;2201;2204;2178:13;:28::i;:::-;2161:45;;2230:5;2220:15;;:6;:15;;;2216:88;;2279:6;2287:5;2258:35;;;;;;;;;;;;:::i;:::-;;;;;;;;2216:88;2314:31;2323:5;2330:7;2339:5;2314:8;:31::i;:::-;1869:483;;;1680:672;;;;;;;:::o;3846:140:3:-;3926:7;3952:11;:18;3964:5;3952:18;;;;;;;;;;;;;;;:27;3971:7;3952:27;;;;;;;;;;;;;;;;3945:34;;3846:140;;;;:::o;2543:215:0:-;1531:13;:11;:13::i;:::-;2647:1:::1;2627:22;;:8;:22;;::::0;2623:91:::1;;2700:1;2672:31;;;;;;;;;;;:::i;:::-;;;;;;;;2623:91;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;656:96:10:-;709:7;735:10;728:17;;656:96;:::o;8989:128:3:-;9073:37;9082:5;9089:7;9098:5;9105:4;9073:8;:37::i;:::-;8989:128;;;:::o;10663:477::-;10762:24;10789:25;10799:5;10806:7;10789:9;:25::i;:::-;10762:52;;10848:17;10828:16;:37;10824:310;;10904:5;10885:16;:24;10881:130;;;10963:7;10972:16;10990:5;10936:60;;;;;;;;;;;;;:::i;:::-;;;;;;;;10881:130;11052:57;11061:5;11068:7;11096:5;11077:16;:24;11103:5;11052:8;:57::i;:::-;10824:310;10752:388;10663:477;;;:::o;5656:300::-;5755:1;5739:18;;:4;:18;;;5735:86;;5807:1;5780:30;;;;;;;;;;;:::i;:::-;;;;;;;;5735:86;5848:1;5834:16;;:2;:16;;;5830:86;;5902:1;5873:32;;;;;;;;;;;:::i;:::-;;;;;;;;5830:86;5925:24;5933:4;5939:2;5943:5;5925:7;:24::i;:::-;5656:300;;;:::o;3845:262:17:-;3898:7;3938:11;3921:28;;3929:4;3921:28;;;:63;;;;;3970:14;3953:13;:31;3921:63;3917:184;;;4007:22;4000:29;;;;3917:184;4067:23;:21;:23::i;:::-;4060:30;;3845:262;;:::o;1796:162:0:-;1866:12;:10;:12::i;:::-;1855:23;;:7;:5;:7::i;:::-;:23;;;1851:101;;1928:12;:10;:12::i;:::-;1901:40;;;;;;;;;;;:::i;:::-;;;;;;;;1851:101;1796:162::o;2710:117:12:-;1721:16;:14;:16::i;:::-;2778:5:::1;2768:7;;:15;;;;;;;;;;;;;;;;;;2798:22;2807:12;:10;:12::i;:::-;2798:22;;;;;;:::i;:::-;;;;;;;;2710:117::o:0;7721:208:3:-;7810:1;7791:21;;:7;:21;;;7787:91;;7864:1;7835:32;;;;;;;;;;;:::i;:::-;;;;;;;;7787:91;7887:35;7903:1;7907:7;7916:5;7887:7;:35::i;:::-;7721:208;;:::o;8247:206::-;8336:1;8317:21;;:7;:21;;;8313:89;;8388:1;8361:30;;;;;;;;;;;:::i;:::-;;;;;;;;8313:89;8411:35;8419:7;8436:1;8440:5;8411:7;:35::i;:::-;8247:206;;:::o;2912:187:0:-;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;538:107:11:-;598:7;624;:14;632:5;624:14;;;;;;;;;;;;;;;;617:21;;538:107;;;:::o;2463:115:12:-;1474:19;:17;:19::i;:::-;2532:4:::1;2522:7;;:14;;;;;;;;;;;;;;;;;;2551:20;2558:12;:10;:12::i;:::-;2551:20;;;;;;:::i;:::-;;;;;;;;2463:115::o:0;6021:126:17:-;6067:13;6099:41;6126:13;6099:5;:26;;:41;;;;:::i;:::-;6092:48;;6021:126;:::o;6473:135::-;6522:13;6554:47;6584:16;6554:8;:29;;:47;;;;:::i;:::-;6547:54;;6473:135;:::o;759:395:11:-;819:7;1121;:14;1129:5;1121:14;;;;;;;;;;;;;;;;:16;;;;;;;;;;;;1114:23;;759:395;;;:::o;4917:176:17:-;4994:7;5020:66;5053:20;:18;:20::i;:::-;5075:10;5020:32;:66::i;:::-;5013:73;;4917:176;;;:::o;6803:260:16:-;6888:7;6908:17;6927:18;6947:16;6967:25;6978:4;6984:1;6987;6990;6967:10;:25::i;:::-;6907:85;;;;;;7002:28;7014:5;7021:8;7002:11;:28::i;:::-;7047:9;7040:16;;;;;6803:260;;;;;;:::o;9949:432:3:-;10078:1;10061:19;;:5;:19;;;10057:89;;10132:1;10103:32;;;;;;;;;;;:::i;:::-;;;;;;;;10057:89;10178:1;10159:21;;:7;:21;;;10155:90;;10231:1;10203:31;;;;;;;;;;;:::i;:::-;;;;;;;;10155:90;10284:5;10254:11;:18;10266:5;10254:18;;;;;;;;;;;;;;;:27;10273:7;10254:27;;;;;;;;;;;;;;;:35;;;;10303:9;10299:76;;;10349:7;10333:31;;10342:5;10333:31;;;10358:5;10333:31;;;;;;:::i;:::-;;;;;;;;10299:76;9949:432;;;;:::o;1097:170:21:-;1229:30;1243:4;1249:2;1253:5;1229:13;:30::i;:::-;1097:170;;;:::o;4113:179:17:-;4168:7;2079:95;4226:11;4239:14;4255:13;4278:4;4204:80;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4194:91;;;;;;4187:98;;4113:179;:::o;2202:126:12:-;2265:8;:6;:8::i;:::-;2260:62;;2296:15;;;;;;;;;;;;;;2260:62;2202:126::o;2002:128::-;2067:8;:6;:8::i;:::-;2063:61;;;2098:15;;;;;;;;;;;;;;2063:61;2002:128::o;3385:267:13:-;3479:13;1390:66;3537:17;;3527:5;3508:46;3504:142;;3577:15;3586:5;3577:8;:15::i;:::-;3570:22;;;;3504:142;3630:5;3623:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3385:267;;;;;:::o;3353:401:18:-;3446:14;3555:4;3549:11;3585:10;3580:3;3573:23;3632:15;3625:4;3620:3;3616:14;3609:39;3684:10;3677:4;3672:3;3668:14;3661:34;3733:4;3728:3;3718:20;3708:30;;3524:224;3353:401;;;;:::o;5140:1530:16:-;5266:7;5275:12;5289:7;6199:66;6194:1;6186:10;;:79;6182:164;;;6297:1;6301:30;6333:1;6281:54;;;;;;;;6182:164;6440:14;6457:24;6467:4;6473:1;6476;6479;6457:24;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6440:41;;6513:1;6495:20;;:6;:20;;;6491:113;;6547:1;6551:29;6590:1;6582:10;;6531:62;;;;;;;;;6491:113;6622:6;6630:20;6660:1;6652:10;;6614:49;;;;;;;5140:1530;;;;;;;;;:::o;7196:532::-;7291:20;7282:29;;;;;;;;:::i;:::-;;:5;:29;;;;;;;;:::i;:::-;;;7278:444;7327:7;7278:444;7387:29;7378:38;;;;;;;;:::i;:::-;;:5;:38;;;;;;;;:::i;:::-;;;7374:348;;7439:23;;;;;;;;;;;;;;7374:348;7492:35;7483:44;;;;;;;;:::i;:::-;;:5;:44;;;;;;;;:::i;:::-;;;7479:243;;7586:8;7578:17;;7550:46;;;;;;;;;;;:::i;:::-;;;;;;;;7479:243;7626:30;7617:39;;;;;;;;:::i;:::-;;:5;:39;;;;;;;;:::i;:::-;;;7613:109;;7702:8;7679:32;;;;;;;;;;;:::i;:::-;;;;;;;;7613:109;7196:532;;;:::o;1112:145:6:-;1474:19:12;:17;:19::i;:::-;1220:30:6::1;1234:4;1240:2;1244:5;1220:13;:30::i;:::-;1112:145:::0;;;:::o;2078:405:13:-;2137:13;2162:11;2176:16;2187:4;2176:10;:16::i;:::-;2162:30;;2280:17;2311:2;2300:14;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2280:34;;2402:3;2397;2390:16;2442:4;2435;2430:3;2426:14;2419:28;2473:3;2466:10;;;;2078:405;;;:::o;6271:1107:3:-;6376:1;6360:18;;:4;:18;;;6356:540;;6512:5;6496:12;;:21;;;;;;;:::i;:::-;;;;;;;;6356:540;;;6548:19;6570:9;:15;6580:4;6570:15;;;;;;;;;;;;;;;;6548:37;;6617:5;6603:11;:19;6599:115;;;6674:4;6680:11;6693:5;6649:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;6599:115;6866:5;6852:11;:19;6834:9;:15;6844:4;6834:15;;;;;;;;;;;;;;;:37;;;;6534:362;6356:540;6924:1;6910:16;;:2;:16;;;6906:425;;7089:5;7073:12;;:21;;;;;;;;;;;6906:425;;;7301:5;7284:9;:13;7294:2;7284:13;;;;;;;;;;;;;;;;:22;;;;;;;;;;;6906:425;7361:2;7346:25;;7355:4;7346:25;;;7365:5;7346:25;;;;;;:::i;:::-;;;;;;;;6271:1107;;;:::o;2555:245:13:-;2616:7;2635:14;2688:4;2679;2652:33;;:40;2635:57;;2715:2;2706:6;:11;2702:69;;;2740:20;;;;;;;;;;;;;;2702:69;2787:6;2780:13;;;2555:245;;;:::o;7:99:22:-;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:169::-;196:11;230:6;225:3;218:19;270:4;265:3;261:14;246:29;;112:169;;;;:::o;287:139::-;376:6;371:3;366;360:23;417:1;408:6;403:3;399:16;392:27;287:139;;;:::o;432:102::-;473:6;524:2;520:7;515:2;508:5;504:14;500:28;490:38;;432:102;;;:::o;540:377::-;628:3;656:39;689:5;656:39;:::i;:::-;711:71;775:6;770:3;711:71;:::i;:::-;704:78;;791:65;849:6;844:3;837:4;830:5;826:16;791:65;:::i;:::-;881:29;903:6;881:29;:::i;:::-;876:3;872:39;865:46;;632:285;540:377;;;;:::o;923:313::-;1036:4;1074:2;1063:9;1059:18;1051:26;;1123:9;1117:4;1113:20;1109:1;1098:9;1094:17;1087:47;1151:78;1224:4;1215:6;1151:78;:::i;:::-;1143:86;;923:313;;;;:::o;1323:117::-;1432:1;1429;1422:12;1569:126;1606:7;1646:42;1639:5;1635:54;1624:65;;1569:126;;;:::o;1701:96::-;1738:7;1767:24;1785:5;1767:24;:::i;:::-;1756:35;;1701:96;;;:::o;1803:122::-;1876:24;1894:5;1876:24;:::i;:::-;1869:5;1866:35;1856:63;;1915:1;1912;1905:12;1856:63;1803:122;:::o;1931:139::-;1977:5;2015:6;2002:20;1993:29;;2031:33;2058:5;2031:33;:::i;:::-;1931:139;;;;:::o;2076:77::-;2113:7;2142:5;2131:16;;2076:77;;;:::o;2159:122::-;2232:24;2250:5;2232:24;:::i;:::-;2225:5;2222:35;2212:63;;2271:1;2268;2261:12;2212:63;2159:122;:::o;2287:139::-;2333:5;2371:6;2358:20;2349:29;;2387:33;2414:5;2387:33;:::i;:::-;2287:139;;;;:::o;2432:474::-;2500:6;2508;2557:2;2545:9;2536:7;2532:23;2528:32;2525:119;;;2563:79;;:::i;:::-;2525:119;2683:1;2708:53;2753:7;2744:6;2733:9;2729:22;2708:53;:::i;:::-;2698:63;;2654:117;2810:2;2836:53;2881:7;2872:6;2861:9;2857:22;2836:53;:::i;:::-;2826:63;;2781:118;2432:474;;;;;:::o;2912:90::-;2946:7;2989:5;2982:13;2975:21;2964:32;;2912:90;;;:::o;3008:109::-;3089:21;3104:5;3089:21;:::i;:::-;3084:3;3077:34;3008:109;;:::o;3123:210::-;3210:4;3248:2;3237:9;3233:18;3225:26;;3261:65;3323:1;3312:9;3308:17;3299:6;3261:65;:::i;:::-;3123:210;;;;:::o;3339:118::-;3426:24;3444:5;3426:24;:::i;:::-;3421:3;3414:37;3339:118;;:::o;3463:222::-;3556:4;3594:2;3583:9;3579:18;3571:26;;3607:71;3675:1;3664:9;3660:17;3651:6;3607:71;:::i;:::-;3463:222;;;;:::o;3691:619::-;3768:6;3776;3784;3833:2;3821:9;3812:7;3808:23;3804:32;3801:119;;;3839:79;;:::i;:::-;3801:119;3959:1;3984:53;4029:7;4020:6;4009:9;4005:22;3984:53;:::i;:::-;3974:63;;3930:117;4086:2;4112:53;4157:7;4148:6;4137:9;4133:22;4112:53;:::i;:::-;4102:63;;4057:118;4214:2;4240:53;4285:7;4276:6;4265:9;4261:22;4240:53;:::i;:::-;4230:63;;4185:118;3691:619;;;;;:::o;4316:86::-;4351:7;4391:4;4384:5;4380:16;4369:27;;4316:86;;;:::o;4408:112::-;4491:22;4507:5;4491:22;:::i;:::-;4486:3;4479:35;4408:112;;:::o;4526:214::-;4615:4;4653:2;4642:9;4638:18;4630:26;;4666:67;4730:1;4719:9;4715:17;4706:6;4666:67;:::i;:::-;4526:214;;;;:::o;4746:77::-;4783:7;4812:5;4801:16;;4746:77;;;:::o;4829:118::-;4916:24;4934:5;4916:24;:::i;:::-;4911:3;4904:37;4829:118;;:::o;4953:222::-;5046:4;5084:2;5073:9;5069:18;5061:26;;5097:71;5165:1;5154:9;5150:17;5141:6;5097:71;:::i;:::-;4953:222;;;;:::o;5181:329::-;5240:6;5289:2;5277:9;5268:7;5264:23;5260:32;5257:119;;;5295:79;;:::i;:::-;5257:119;5415:1;5440:53;5485:7;5476:6;5465:9;5461:22;5440:53;:::i;:::-;5430:63;;5386:117;5181:329;;;;:::o;5516:::-;5575:6;5624:2;5612:9;5603:7;5599:23;5595:32;5592:119;;;5630:79;;:::i;:::-;5592:119;5750:1;5775:53;5820:7;5811:6;5800:9;5796:22;5775:53;:::i;:::-;5765:63;;5721:117;5516:329;;;;:::o;5851:149::-;5887:7;5927:66;5920:5;5916:78;5905:89;;5851:149;;;:::o;6006:115::-;6091:23;6108:5;6091:23;:::i;:::-;6086:3;6079:36;6006:115;;:::o;6127:118::-;6214:24;6232:5;6214:24;:::i;:::-;6209:3;6202:37;6127:118;;:::o;6251:114::-;6318:6;6352:5;6346:12;6336:22;;6251:114;;;:::o;6371:184::-;6470:11;6504:6;6499:3;6492:19;6544:4;6539:3;6535:14;6520:29;;6371:184;;;;:::o;6561:132::-;6628:4;6651:3;6643:11;;6681:4;6676:3;6672:14;6664:22;;6561:132;;;:::o;6699:108::-;6776:24;6794:5;6776:24;:::i;:::-;6771:3;6764:37;6699:108;;:::o;6813:179::-;6882:10;6903:46;6945:3;6937:6;6903:46;:::i;:::-;6981:4;6976:3;6972:14;6958:28;;6813:179;;;;:::o;6998:113::-;7068:4;7100;7095:3;7091:14;7083:22;;6998:113;;;:::o;7147:732::-;7266:3;7295:54;7343:5;7295:54;:::i;:::-;7365:86;7444:6;7439:3;7365:86;:::i;:::-;7358:93;;7475:56;7525:5;7475:56;:::i;:::-;7554:7;7585:1;7570:284;7595:6;7592:1;7589:13;7570:284;;;7671:6;7665:13;7698:63;7757:3;7742:13;7698:63;:::i;:::-;7691:70;;7784:60;7837:6;7784:60;:::i;:::-;7774:70;;7630:224;7617:1;7614;7610:9;7605:14;;7570:284;;;7574:14;7870:3;7863:10;;7271:608;;;7147:732;;;;:::o;7885:1215::-;8234:4;8272:3;8261:9;8257:19;8249:27;;8286:69;8352:1;8341:9;8337:17;8328:6;8286:69;:::i;:::-;8402:9;8396:4;8392:20;8387:2;8376:9;8372:18;8365:48;8430:78;8503:4;8494:6;8430:78;:::i;:::-;8422:86;;8555:9;8549:4;8545:20;8540:2;8529:9;8525:18;8518:48;8583:78;8656:4;8647:6;8583:78;:::i;:::-;8575:86;;8671:72;8739:2;8728:9;8724:18;8715:6;8671:72;:::i;:::-;8753:73;8821:3;8810:9;8806:19;8797:6;8753:73;:::i;:::-;8836;8904:3;8893:9;8889:19;8880:6;8836:73;:::i;:::-;8957:9;8951:4;8947:20;8941:3;8930:9;8926:19;8919:49;8985:108;9088:4;9079:6;8985:108;:::i;:::-;8977:116;;7885:1215;;;;;;;;;;:::o;9106:222::-;9199:4;9237:2;9226:9;9222:18;9214:26;;9250:71;9318:1;9307:9;9303:17;9294:6;9250:71;:::i;:::-;9106:222;;;;:::o;9334:118::-;9405:22;9421:5;9405:22;:::i;:::-;9398:5;9395:33;9385:61;;9442:1;9439;9432:12;9385:61;9334:118;:::o;9458:135::-;9502:5;9540:6;9527:20;9518:29;;9556:31;9581:5;9556:31;:::i;:::-;9458:135;;;;:::o;9599:122::-;9672:24;9690:5;9672:24;:::i;:::-;9665:5;9662:35;9652:63;;9711:1;9708;9701:12;9652:63;9599:122;:::o;9727:139::-;9773:5;9811:6;9798:20;9789:29;;9827:33;9854:5;9827:33;:::i;:::-;9727:139;;;;:::o;9872:1199::-;9983:6;9991;9999;10007;10015;10023;10031;10080:3;10068:9;10059:7;10055:23;10051:33;10048:120;;;10087:79;;:::i;:::-;10048:120;10207:1;10232:53;10277:7;10268:6;10257:9;10253:22;10232:53;:::i;:::-;10222:63;;10178:117;10334:2;10360:53;10405:7;10396:6;10385:9;10381:22;10360:53;:::i;:::-;10350:63;;10305:118;10462:2;10488:53;10533:7;10524:6;10513:9;10509:22;10488:53;:::i;:::-;10478:63;;10433:118;10590:2;10616:53;10661:7;10652:6;10641:9;10637:22;10616:53;:::i;:::-;10606:63;;10561:118;10718:3;10745:51;10788:7;10779:6;10768:9;10764:22;10745:51;:::i;:::-;10735:61;;10689:117;10845:3;10872:53;10917:7;10908:6;10897:9;10893:22;10872:53;:::i;:::-;10862:63;;10816:119;10974:3;11001:53;11046:7;11037:6;11026:9;11022:22;11001:53;:::i;:::-;10991:63;;10945:119;9872:1199;;;;;;;;;;:::o;11077:474::-;11145:6;11153;11202:2;11190:9;11181:7;11177:23;11173:32;11170:119;;;11208:79;;:::i;:::-;11170:119;11328:1;11353:53;11398:7;11389:6;11378:9;11374:22;11353:53;:::i;:::-;11343:63;;11299:117;11455:2;11481:53;11526:7;11517:6;11506:9;11502:22;11481:53;:::i;:::-;11471:63;;11426:118;11077:474;;;;;:::o;11557:180::-;11605:77;11602:1;11595:88;11702:4;11699:1;11692:15;11726:4;11723:1;11716:15;11743:320;11787:6;11824:1;11818:4;11814:12;11804:22;;11871:1;11865:4;11861:12;11892:18;11882:81;;11948:4;11940:6;11936:17;11926:27;;11882:81;12010:2;12002:6;11999:14;11979:18;11976:38;11973:84;;12029:18;;:::i;:::-;11973:84;11794:269;11743:320;;;:::o;12069:180::-;12117:77;12114:1;12107:88;12214:4;12211:1;12204:15;12238:4;12235:1;12228:15;12255:775;12488:4;12526:3;12515:9;12511:19;12503:27;;12540:71;12608:1;12597:9;12593:17;12584:6;12540:71;:::i;:::-;12621:72;12689:2;12678:9;12674:18;12665:6;12621:72;:::i;:::-;12703;12771:2;12760:9;12756:18;12747:6;12703:72;:::i;:::-;12785;12853:2;12842:9;12838:18;12829:6;12785:72;:::i;:::-;12867:73;12935:3;12924:9;12920:19;12911:6;12867:73;:::i;:::-;12950;13018:3;13007:9;13003:19;12994:6;12950:73;:::i;:::-;12255:775;;;;;;;;;:::o;13036:332::-;13157:4;13195:2;13184:9;13180:18;13172:26;;13208:71;13276:1;13265:9;13261:17;13252:6;13208:71;:::i;:::-;13289:72;13357:2;13346:9;13342:18;13333:6;13289:72;:::i;:::-;13036:332;;;;;:::o;13374:442::-;13523:4;13561:2;13550:9;13546:18;13538:26;;13574:71;13642:1;13631:9;13627:17;13618:6;13574:71;:::i;:::-;13655:72;13723:2;13712:9;13708:18;13699:6;13655:72;:::i;:::-;13737;13805:2;13794:9;13790:18;13781:6;13737:72;:::i;:::-;13374:442;;;;;;:::o;13822:664::-;14027:4;14065:3;14054:9;14050:19;14042:27;;14079:71;14147:1;14136:9;14132:17;14123:6;14079:71;:::i;:::-;14160:72;14228:2;14217:9;14213:18;14204:6;14160:72;:::i;:::-;14242;14310:2;14299:9;14295:18;14286:6;14242:72;:::i;:::-;14324;14392:2;14381:9;14377:18;14368:6;14324:72;:::i;:::-;14406:73;14474:3;14463:9;14459:19;14450:6;14406:73;:::i;:::-;13822:664;;;;;;;;:::o;14492:545::-;14665:4;14703:3;14692:9;14688:19;14680:27;;14717:71;14785:1;14774:9;14770:17;14761:6;14717:71;:::i;:::-;14798:68;14862:2;14851:9;14847:18;14838:6;14798:68;:::i;:::-;14876:72;14944:2;14933:9;14929:18;14920:6;14876:72;:::i;:::-;14958;15026:2;15015:9;15011:18;15002:6;14958:72;:::i;:::-;14492:545;;;;;;;:::o;15043:180::-;15091:77;15088:1;15081:88;15188:4;15185:1;15178:15;15212:4;15209:1;15202:15;15229:180;15277:77;15274:1;15267:88;15374:4;15371:1;15364:15;15398:4;15395:1;15388:15;15415:191;15455:3;15474:20;15492:1;15474:20;:::i;:::-;15469:25;;15508:20;15526:1;15508:20;:::i;:::-;15503:25;;15551:1;15548;15544:9;15537:16;;15572:3;15569:1;15566:10;15563:36;;;15579:18;;:::i;:::-;15563:36;15415:191;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "1725800",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"DOMAIN_SEPARATOR()": "infinite",
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "infinite",
								"balanceOf(address)": "2962",
								"burn(uint256)": "infinite",
								"burnFrom(address,uint256)": "infinite",
								"decimals()": "450",
								"eip712Domain()": "infinite",
								"mint(address,uint256)": "infinite",
								"name()": "infinite",
								"nonces(address)": "2938",
								"owner()": "2588",
								"pause()": "infinite",
								"paused()": "2584",
								"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"renounceOwnership()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2500",
								"transfer(address,uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite",
								"transferOwnership(address)": "infinite",
								"unpause()": "infinite"
							},
							"internal": {
								"_update(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 450,
									"end": 1270,
									"name": "PUSH",
									"source": 21,
									"value": "160"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "PUSH",
									"source": 21,
									"value": "40"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "MSTORE",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "CALLVALUE",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "DUP1",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "ISZERO",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "PUSH [tag]",
									"source": 21,
									"value": "1"
								},
								{
									"begin": 566,
									"end": 774,
									"name": "JUMPI",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 566,
									"end": 774,
									"name": "DUP1",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "REVERT",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "tag",
									"source": 21,
									"value": "1"
								},
								{
									"begin": 566,
									"end": 774,
									"name": "JUMPDEST",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "POP",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "PUSH",
									"source": 21,
									"value": "40"
								},
								{
									"begin": 566,
									"end": 774,
									"name": "MLOAD",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "PUSHSIZE",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "CODESIZE",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "SUB",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "DUP1",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "PUSHSIZE",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "DUP4",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "CODECOPY",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "DUP2",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "DUP2",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "ADD",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "PUSH",
									"source": 21,
									"value": "40"
								},
								{
									"begin": 566,
									"end": 774,
									"name": "MSTORE",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "DUP2",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "ADD",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "SWAP1",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "PUSH [tag]",
									"source": 21,
									"value": "2"
								},
								{
									"begin": 566,
									"end": 774,
									"name": "SWAP2",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "SWAP1",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "PUSH [tag]",
									"source": 21,
									"value": "3"
								},
								{
									"begin": 566,
									"end": 774,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 21
								},
								{
									"begin": 566,
									"end": 774,
									"name": "tag",
									"source": 21,
									"value": "2"
								},
								{
									"begin": 566,
									"end": 774,
									"name": "JUMPDEST",
									"source": 21
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "MLOAD",
									"source": 7
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "PUSH",
									"source": 7,
									"value": "60"
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "PUSH",
									"source": 7,
									"value": "2A"
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "PUSH",
									"source": 7,
									"value": "20"
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "ADD",
									"source": 7
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "PUSH data",
									"source": 7,
									"value": "D9FEC584A25F4929244DC338DCB423F6E6B1B07580AB8FBD5DD5174210DA996"
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "PUSH",
									"source": 7,
									"value": "2A"
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "SWAP2",
									"source": 7
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 1613,
									"end": 1617,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "PUSH",
									"source": 17,
									"value": "40"
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "PUSH",
									"source": 17,
									"value": "40"
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "PUSH",
									"source": 17,
									"value": "40"
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "PUSH",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "PUSH",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "PUSH",
									"source": 17,
									"value": "3100000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 686,
									"end": 698,
									"name": "DUP4",
									"source": 21
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "60"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "2A"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH data",
									"source": 3,
									"value": "D9FEC584A25F4929244DC338DCB423F6E6B1B07580AB8FBD5DD5174210DA996"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "2A"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "4743545500000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1970,
									"end": 1975,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1967,
									"name": "PUSH",
									"source": 3,
									"value": "3"
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "11"
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "12"
								},
								{
									"begin": 1962,
									"end": 1975,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "tag",
									"source": 3,
									"value": "11"
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1995,
									"end": 2002,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 1992,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "13"
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "12"
								},
								{
									"begin": 1985,
									"end": 2002,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "tag",
									"source": 3,
									"value": "13"
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1241,
									"end": 1246,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1231,
									"end": 1238,
									"name": "PUSH",
									"source": 12,
									"value": "5"
								},
								{
									"begin": 1231,
									"end": 1238,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1231,
									"end": 1246,
									"name": "PUSH",
									"source": 12,
									"value": "100"
								},
								{
									"begin": 1231,
									"end": 1246,
									"name": "EXP",
									"source": 12
								},
								{
									"begin": 1231,
									"end": 1246,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1231,
									"end": 1246,
									"name": "SLOAD",
									"source": 12
								},
								{
									"begin": 1231,
									"end": 1246,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1231,
									"end": 1246,
									"name": "PUSH",
									"source": 12,
									"value": "FF"
								},
								{
									"begin": 1231,
									"end": 1246,
									"name": "MUL",
									"source": 12
								},
								{
									"begin": 1231,
									"end": 1246,
									"name": "NOT",
									"source": 12
								},
								{
									"begin": 1231,
									"end": 1246,
									"name": "AND",
									"source": 12
								},
								{
									"begin": 1231,
									"end": 1246,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1231,
									"end": 1246,
									"name": "DUP4",
									"source": 12
								},
								{
									"begin": 1231,
									"end": 1246,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 1231,
									"end": 1246,
									"name": "ISZERO",
									"source": 12
								},
								{
									"begin": 1231,
									"end": 1246,
									"name": "MUL",
									"source": 12
								},
								{
									"begin": 1231,
									"end": 1246,
									"name": "OR",
									"source": 12
								},
								{
									"begin": 1231,
									"end": 1246,
									"name": "SWAP1",
									"source": 12
								},
								{
									"begin": 1231,
									"end": 1246,
									"name": "SSTORE",
									"source": 12
								},
								{
									"begin": 1231,
									"end": 1246,
									"name": "POP",
									"source": 12
								},
								{
									"begin": 1297,
									"end": 1298,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 1273,
									"end": 1285,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1350,
									"end": 1351,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "1E4FBDF700000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "18"
								},
								{
									"begin": 1322,
									"end": 1353,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "tag",
									"source": 0,
									"value": "17"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "tag",
									"source": 0,
									"value": "16"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "19"
								},
								{
									"begin": 1392,
									"end": 1404,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1391,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 1373,
									"end": 1391,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 1373,
									"end": 1391,
									"name": "SHL",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "PUSH",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "SHR",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1405,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "tag",
									"source": 0,
									"value": "19"
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1225,
									"end": 1412,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "22"
								},
								{
									"begin": 3432,
									"end": 3445,
									"name": "PUSH",
									"source": 17,
									"value": "6"
								},
								{
									"begin": 3401,
									"end": 3405,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 3401,
									"end": 3431,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "23"
								},
								{
									"begin": 3401,
									"end": 3431,
									"name": "PUSH",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 3401,
									"end": 3431,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": 3401,
									"end": 3431,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "PUSH",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "SHR",
									"source": 17
								},
								{
									"begin": 3401,
									"end": 3446,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "tag",
									"source": 17,
									"value": "22"
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 3393,
									"end": 3446,
									"name": "PUSH",
									"source": 17,
									"value": "120"
								},
								{
									"begin": 3393,
									"end": 3446,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 3393,
									"end": 3446,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 3393,
									"end": 3446,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 3393,
									"end": 3446,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 3393,
									"end": 3446,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "24"
								},
								{
									"begin": 3501,
									"end": 3517,
									"name": "PUSH",
									"source": 17,
									"value": "7"
								},
								{
									"begin": 3467,
									"end": 3474,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 3467,
									"end": 3500,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "23"
								},
								{
									"begin": 3467,
									"end": 3500,
									"name": "PUSH",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 3467,
									"end": 3500,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": 3467,
									"end": 3500,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "PUSH",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "SHR",
									"source": 17
								},
								{
									"begin": 3467,
									"end": 3518,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "tag",
									"source": 17,
									"value": "24"
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 3456,
									"end": 3518,
									"name": "PUSH",
									"source": 17,
									"value": "140"
								},
								{
									"begin": 3456,
									"end": 3518,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 3456,
									"end": 3518,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 3456,
									"end": 3518,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 3456,
									"end": 3518,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 3456,
									"end": 3518,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 3558,
									"end": 3562,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "PUSH",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "KECCAK256",
									"source": 17
								},
								{
									"begin": 3528,
									"end": 3564,
									"name": "PUSH",
									"source": 17,
									"value": "E0"
								},
								{
									"begin": 3528,
									"end": 3564,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 3528,
									"end": 3564,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 3528,
									"end": 3564,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 3528,
									"end": 3564,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 3528,
									"end": 3564,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 3607,
									"end": 3614,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "PUSH",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "KECCAK256",
									"source": 17
								},
								{
									"begin": 3574,
									"end": 3616,
									"name": "PUSH",
									"source": 17,
									"value": "100"
								},
								{
									"begin": 3574,
									"end": 3616,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 3574,
									"end": 3616,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 3574,
									"end": 3616,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 3574,
									"end": 3616,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 3574,
									"end": 3616,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 3644,
									"end": 3657,
									"name": "CHAINID",
									"source": 17
								},
								{
									"begin": 3627,
									"end": 3657,
									"name": "PUSH",
									"source": 17,
									"value": "A0"
								},
								{
									"begin": 3627,
									"end": 3657,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 3627,
									"end": 3657,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 3627,
									"end": 3657,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 3627,
									"end": 3657,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 3627,
									"end": 3657,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 3692,
									"end": 3715,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "25"
								},
								{
									"begin": 3692,
									"end": 3713,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "26"
								},
								{
									"begin": 3692,
									"end": 3713,
									"name": "PUSH",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 3692,
									"end": 3713,
									"name": "SHL",
									"source": 17
								},
								{
									"begin": 3692,
									"end": 3715,
									"name": "PUSH",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 3692,
									"end": 3715,
									"name": "SHR",
									"source": 17
								},
								{
									"begin": 3692,
									"end": 3715,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 3692,
									"end": 3715,
									"name": "tag",
									"source": 17,
									"value": "25"
								},
								{
									"begin": 3692,
									"end": 3715,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 3667,
									"end": 3715,
									"name": "PUSH",
									"source": 17,
									"value": "80"
								},
								{
									"begin": 3667,
									"end": 3715,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 3667,
									"end": 3715,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 3667,
									"end": 3715,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 3667,
									"end": 3715,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 3667,
									"end": 3715,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 3747,
									"end": 3751,
									"name": "ADDRESS",
									"source": 17
								},
								{
									"begin": 3725,
									"end": 3752,
									"name": "PUSH",
									"source": 17,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3725,
									"end": 3752,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 3725,
									"end": 3752,
									"name": "PUSH",
									"source": 17,
									"value": "C0"
								},
								{
									"begin": 3725,
									"end": 3752,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 3725,
									"end": 3752,
									"name": "PUSH",
									"source": 17,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3725,
									"end": 3752,
									"name": "AND",
									"source": 17
								},
								{
									"begin": 3725,
									"end": 3752,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 3725,
									"end": 3752,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 3725,
									"end": 3752,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 3725,
									"end": 3752,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 566,
									"end": 774,
									"name": "POP",
									"source": 21
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "PUSH [tag]",
									"source": 21,
									"value": "29"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "JUMP",
									"source": 21
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "tag",
									"source": 0,
									"value": "20"
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 2985,
									"end": 3001,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "PUSH",
									"source": 0,
									"value": "5"
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "DIV",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 2985,
									"end": 3010,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2985,
									"end": 3010,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 3029,
									"end": 3037,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3026,
									"name": "PUSH",
									"source": 0,
									"value": "5"
								},
								{
									"begin": 3020,
									"end": 3026,
									"name": "PUSH",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 3083,
									"end": 3091,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3073,
									"end": 3081,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2975,
									"end": 3099,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2912,
									"end": 3099,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "tag",
									"source": 13,
									"value": "23"
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3010,
									"end": 3021,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 3059,
									"end": 3061,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 3043,
									"end": 3048,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 3037,
									"end": 3056,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 3037,
									"end": 3061,
									"name": "LT",
									"source": 13
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "32"
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 3084,
									"end": 3104,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "33"
								},
								{
									"begin": 3098,
									"end": 3103,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 3084,
									"end": 3097,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "34"
								},
								{
									"begin": 3084,
									"end": 3097,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 3084,
									"end": 3097,
									"name": "SHL",
									"source": 13
								},
								{
									"begin": 3084,
									"end": 3104,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 3084,
									"end": 3104,
									"name": "SHR",
									"source": 13
								},
								{
									"begin": 3084,
									"end": 3104,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3084,
									"end": 3104,
									"name": "tag",
									"source": 13,
									"value": "33"
								},
								{
									"begin": 3084,
									"end": 3104,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3077,
									"end": 3104,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3077,
									"end": 3104,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3077,
									"end": 3104,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "31"
								},
								{
									"begin": 3077,
									"end": 3104,
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "tag",
									"source": 13,
									"value": "32"
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3176,
									"end": 3181,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 3135,
									"end": 3167,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "36"
								},
								{
									"begin": 3161,
									"end": 3166,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 3135,
									"end": 3160,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "37"
								},
								{
									"begin": 3135,
									"end": 3160,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 3135,
									"end": 3160,
									"name": "SHL",
									"source": 13
								},
								{
									"begin": 3135,
									"end": 3167,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 3135,
									"end": 3167,
									"name": "SHR",
									"source": 13
								},
								{
									"begin": 3135,
									"end": 3167,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3135,
									"end": 3167,
									"name": "tag",
									"source": 13,
									"value": "36"
								},
								{
									"begin": 3135,
									"end": 3167,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3135,
									"end": 3173,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 3135,
									"end": 3173,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 3135,
									"end": 3181,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3135,
									"end": 3181,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 3135,
									"end": 3181,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "38"
								},
								{
									"begin": 3135,
									"end": 3181,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 3135,
									"end": 3181,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3135,
									"end": 3181,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "12"
								},
								{
									"begin": 3135,
									"end": 3181,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3135,
									"end": 3181,
									"name": "tag",
									"source": 13,
									"value": "38"
								},
								{
									"begin": 3135,
									"end": 3181,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3135,
									"end": 3181,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1390,
									"end": 1456,
									"name": "PUSH",
									"source": 13,
									"value": "FF"
								},
								{
									"begin": 3219,
									"end": 3236,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 3219,
									"end": 3236,
									"name": "SHL",
									"source": 13
								},
								{
									"begin": 3195,
									"end": 3237,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3195,
									"end": 3237,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "tag",
									"source": 13,
									"value": "31"
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2914,
									"end": 3254,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 4113,
									"end": 4292,
									"name": "tag",
									"source": 17,
									"value": "26"
								},
								{
									"begin": 4113,
									"end": 4292,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 4168,
									"end": 4175,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "PUSH",
									"source": 17,
									"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
								},
								{
									"begin": 4226,
									"end": 4237,
									"name": "PUSH",
									"source": 17,
									"value": "E0"
								},
								{
									"begin": 4226,
									"end": 4237,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 4239,
									"end": 4253,
									"name": "PUSH",
									"source": 17,
									"value": "100"
								},
								{
									"begin": 4239,
									"end": 4253,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 4255,
									"end": 4268,
									"name": "CHAINID",
									"source": 17
								},
								{
									"begin": 4278,
									"end": 4282,
									"name": "ADDRESS",
									"source": 17
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH",
									"source": 17,
									"value": "40"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "40"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "SWAP6",
									"source": 17
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "SWAP5",
									"source": 17
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "SWAP4",
									"source": 17
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "SWAP3",
									"source": 17
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "SWAP2",
									"source": 17
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "41"
								},
								{
									"begin": 4204,
									"end": 4284,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "tag",
									"source": 17,
									"value": "40"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH",
									"source": 17,
									"value": "40"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP4",
									"source": 17
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "SUB",
									"source": 17
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "SUB",
									"source": 17
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH",
									"source": 17,
									"value": "40"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "PUSH",
									"source": 17,
									"value": "20"
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "ADD",
									"source": 17
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "KECCAK256",
									"source": 17
								},
								{
									"begin": 4187,
									"end": 4285,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 4187,
									"end": 4285,
									"name": "POP",
									"source": 17
								},
								{
									"begin": 4113,
									"end": 4292,
									"name": "SWAP1",
									"source": 17
								},
								{
									"begin": 4113,
									"end": 4292,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 17
								},
								{
									"begin": 1708,
									"end": 1994,
									"name": "tag",
									"source": 13,
									"value": "34"
								},
								{
									"begin": 1708,
									"end": 1994,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1773,
									"end": 1784,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1796,
									"end": 1813,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1822,
									"end": 1825,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1796,
									"end": 1826,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1796,
									"end": 1826,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1854,
									"end": 1856,
									"name": "PUSH",
									"source": 13,
									"value": "1F"
								},
								{
									"begin": 1840,
									"end": 1844,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1840,
									"end": 1851,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 1840,
									"end": 1856,
									"name": "GT",
									"source": 13
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "43"
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 1893,
									"end": 1896,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH",
									"source": 13,
									"value": "305A27A900000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH",
									"source": 13,
									"value": "4"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "44"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "45"
								},
								{
									"begin": 1879,
									"end": 1897,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "tag",
									"source": 13,
									"value": "44"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SUB",
									"source": 13
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "tag",
									"source": 13,
									"value": "43"
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1974,
									"end": 1978,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1974,
									"end": 1985,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 1965,
									"end": 1969,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1957,
									"end": 1970,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "46"
								},
								{
									"begin": 1957,
									"end": 1970,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1957,
									"end": 1970,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "47"
								},
								{
									"begin": 1957,
									"end": 1970,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 1957,
									"end": 1970,
									"name": "tag",
									"source": 13,
									"value": "46"
								},
								{
									"begin": 1957,
									"end": 1970,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1949,
									"end": 1971,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1949,
									"end": 1971,
									"name": "SHR",
									"source": 13
								},
								{
									"begin": 1949,
									"end": 1985,
									"name": "OR",
									"source": 13
								},
								{
									"begin": 1941,
									"end": 1986,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1941,
									"end": 1986,
									"name": "SHL",
									"source": 13
								},
								{
									"begin": 1917,
									"end": 1987,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1917,
									"end": 1987,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1917,
									"end": 1987,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1708,
									"end": 1994,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1708,
									"end": 1994,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1708,
									"end": 1994,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1708,
									"end": 1994,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3135,
									"end": 3337,
									"name": "tag",
									"source": 14,
									"value": "37"
								},
								{
									"begin": 3135,
									"end": 3337,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 3203,
									"end": 3223,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 3311,
									"end": 3321,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 3301,
									"end": 3321,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 3301,
									"end": 3321,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 3135,
									"end": 3337,
									"name": "SWAP2",
									"source": 14
								},
								{
									"begin": 3135,
									"end": 3337,
									"name": "SWAP1",
									"source": 14
								},
								{
									"begin": 3135,
									"end": 3337,
									"name": "POP",
									"source": 14
								},
								{
									"begin": 3135,
									"end": 3337,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 14
								},
								{
									"begin": 88,
									"end": 205,
									"name": "tag",
									"source": 22,
									"value": "50"
								},
								{
									"begin": 88,
									"end": 205,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 197,
									"end": 198,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 194,
									"end": 195,
									"name": "DUP1",
									"source": 22
								},
								{
									"begin": 187,
									"end": 199,
									"name": "REVERT",
									"source": 22
								},
								{
									"begin": 334,
									"end": 460,
									"name": "tag",
									"source": 22,
									"value": "52"
								},
								{
									"begin": 334,
									"end": 460,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 371,
									"end": 378,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 411,
									"end": 453,
									"name": "PUSH",
									"source": 22,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 404,
									"end": 409,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 400,
									"end": 454,
									"name": "AND",
									"source": 22
								},
								{
									"begin": 389,
									"end": 454,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 389,
									"end": 454,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 334,
									"end": 460,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 334,
									"end": 460,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 334,
									"end": 460,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 466,
									"end": 562,
									"name": "tag",
									"source": 22,
									"value": "53"
								},
								{
									"begin": 466,
									"end": 562,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 503,
									"end": 510,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "93"
								},
								{
									"begin": 550,
									"end": 555,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 532,
									"end": 556,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "52"
								},
								{
									"begin": 532,
									"end": 556,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 532,
									"end": 556,
									"name": "tag",
									"source": 22,
									"value": "93"
								},
								{
									"begin": 532,
									"end": 556,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 521,
									"end": 556,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 521,
									"end": 556,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 466,
									"end": 562,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 466,
									"end": 562,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 466,
									"end": 562,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 568,
									"end": 690,
									"name": "tag",
									"source": 22,
									"value": "54"
								},
								{
									"begin": 568,
									"end": 690,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "95"
								},
								{
									"begin": 659,
									"end": 664,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 641,
									"end": 665,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "53"
								},
								{
									"begin": 641,
									"end": 665,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 641,
									"end": 665,
									"name": "tag",
									"source": 22,
									"value": "95"
								},
								{
									"begin": 641,
									"end": 665,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 634,
									"end": 639,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 631,
									"end": 666,
									"name": "EQ",
									"source": 22
								},
								{
									"begin": 621,
									"end": 684,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "96"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPI",
									"source": 22
								},
								{
									"begin": 680,
									"end": 681,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 677,
									"end": 678,
									"name": "DUP1",
									"source": 22
								},
								{
									"begin": 670,
									"end": 682,
									"name": "REVERT",
									"source": 22
								},
								{
									"begin": 621,
									"end": 684,
									"name": "tag",
									"source": 22,
									"value": "96"
								},
								{
									"begin": 621,
									"end": 684,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 568,
									"end": 690,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 568,
									"end": 690,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 696,
									"end": 839,
									"name": "tag",
									"source": 22,
									"value": "55"
								},
								{
									"begin": 696,
									"end": 839,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 753,
									"end": 758,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 784,
									"end": 790,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 778,
									"end": 791,
									"name": "MLOAD",
									"source": 22
								},
								{
									"begin": 769,
									"end": 791,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 769,
									"end": 791,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "98"
								},
								{
									"begin": 827,
									"end": 832,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 800,
									"end": 833,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "54"
								},
								{
									"begin": 800,
									"end": 833,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 800,
									"end": 833,
									"name": "tag",
									"source": 22,
									"value": "98"
								},
								{
									"begin": 800,
									"end": 833,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP3",
									"source": 22
								},
								{
									"begin": 696,
									"end": 839,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 696,
									"end": 839,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 696,
									"end": 839,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "tag",
									"source": 22,
									"value": "3"
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 915,
									"end": 921,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 964,
									"end": 966,
									"name": "PUSH",
									"source": 22,
									"value": "20"
								},
								{
									"begin": 952,
									"end": 961,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 943,
									"end": 950,
									"name": "DUP5",
									"source": 22
								},
								{
									"begin": 939,
									"end": 962,
									"name": "SUB",
									"source": 22
								},
								{
									"begin": 935,
									"end": 967,
									"name": "SLT",
									"source": 22
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "ISZERO",
									"source": 22
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "100"
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "JUMPI",
									"source": 22
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "101"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "50"
								},
								{
									"begin": 970,
									"end": 1049,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "tag",
									"source": 22,
									"value": "101"
								},
								{
									"begin": 970,
									"end": 1049,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "tag",
									"source": 22,
									"value": "100"
								},
								{
									"begin": 932,
									"end": 1051,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 1090,
									"end": 1091,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "102"
								},
								{
									"begin": 1171,
									"end": 1178,
									"name": "DUP5",
									"source": 22
								},
								{
									"begin": 1162,
									"end": 1168,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 1151,
									"end": 1160,
									"name": "DUP6",
									"source": 22
								},
								{
									"begin": 1147,
									"end": 1169,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "55"
								},
								{
									"begin": 1115,
									"end": 1179,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "tag",
									"source": 22,
									"value": "102"
								},
								{
									"begin": 1115,
									"end": 1179,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 1105,
									"end": 1179,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 1105,
									"end": 1179,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 1061,
									"end": 1189,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "SWAP3",
									"source": 22
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 845,
									"end": 1196,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 845,
									"end": 1196,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 1202,
									"end": 1301,
									"name": "tag",
									"source": 22,
									"value": "56"
								},
								{
									"begin": 1202,
									"end": 1301,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 1254,
									"end": 1260,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 1288,
									"end": 1293,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 1282,
									"end": 1294,
									"name": "MLOAD",
									"source": 22
								},
								{
									"begin": 1272,
									"end": 1294,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 1272,
									"end": 1294,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 1202,
									"end": 1301,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 1202,
									"end": 1301,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 1202,
									"end": 1301,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 1202,
									"end": 1301,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 1307,
									"end": 1487,
									"name": "tag",
									"source": 22,
									"value": "57"
								},
								{
									"begin": 1307,
									"end": 1487,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 1355,
									"end": 1432,
									"name": "PUSH",
									"source": 22,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1352,
									"end": 1353,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 1345,
									"end": 1433,
									"name": "MSTORE",
									"source": 22
								},
								{
									"begin": 1452,
									"end": 1456,
									"name": "PUSH",
									"source": 22,
									"value": "41"
								},
								{
									"begin": 1449,
									"end": 1450,
									"name": "PUSH",
									"source": 22,
									"value": "4"
								},
								{
									"begin": 1442,
									"end": 1457,
									"name": "MSTORE",
									"source": 22
								},
								{
									"begin": 1476,
									"end": 1480,
									"name": "PUSH",
									"source": 22,
									"value": "24"
								},
								{
									"begin": 1473,
									"end": 1474,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 1466,
									"end": 1481,
									"name": "REVERT",
									"source": 22
								},
								{
									"begin": 1493,
									"end": 1673,
									"name": "tag",
									"source": 22,
									"value": "58"
								},
								{
									"begin": 1493,
									"end": 1673,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 1541,
									"end": 1618,
									"name": "PUSH",
									"source": 22,
									"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1538,
									"end": 1539,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 1531,
									"end": 1619,
									"name": "MSTORE",
									"source": 22
								},
								{
									"begin": 1638,
									"end": 1642,
									"name": "PUSH",
									"source": 22,
									"value": "22"
								},
								{
									"begin": 1635,
									"end": 1636,
									"name": "PUSH",
									"source": 22,
									"value": "4"
								},
								{
									"begin": 1628,
									"end": 1643,
									"name": "MSTORE",
									"source": 22
								},
								{
									"begin": 1662,
									"end": 1666,
									"name": "PUSH",
									"source": 22,
									"value": "24"
								},
								{
									"begin": 1659,
									"end": 1660,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 1652,
									"end": 1667,
									"name": "REVERT",
									"source": 22
								},
								{
									"begin": 1679,
									"end": 1999,
									"name": "tag",
									"source": 22,
									"value": "59"
								},
								{
									"begin": 1679,
									"end": 1999,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 1723,
									"end": 1729,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 1760,
									"end": 1761,
									"name": "PUSH",
									"source": 22,
									"value": "2"
								},
								{
									"begin": 1754,
									"end": 1758,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 1750,
									"end": 1762,
									"name": "DIV",
									"source": 22
								},
								{
									"begin": 1740,
									"end": 1762,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 1740,
									"end": 1762,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 1807,
									"end": 1808,
									"name": "PUSH",
									"source": 22,
									"value": "1"
								},
								{
									"begin": 1801,
									"end": 1805,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 1797,
									"end": 1809,
									"name": "AND",
									"source": 22
								},
								{
									"begin": 1828,
									"end": 1846,
									"name": "DUP1",
									"source": 22
								},
								{
									"begin": 1818,
									"end": 1899,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "107"
								},
								{
									"begin": 1818,
									"end": 1899,
									"name": "JUMPI",
									"source": 22
								},
								{
									"begin": 1884,
									"end": 1888,
									"name": "PUSH",
									"source": 22,
									"value": "7F"
								},
								{
									"begin": 1876,
									"end": 1882,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 1872,
									"end": 1889,
									"name": "AND",
									"source": 22
								},
								{
									"begin": 1862,
									"end": 1889,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 1862,
									"end": 1889,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 1818,
									"end": 1899,
									"name": "tag",
									"source": 22,
									"value": "107"
								},
								{
									"begin": 1818,
									"end": 1899,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 1946,
									"end": 1948,
									"name": "PUSH",
									"source": 22,
									"value": "20"
								},
								{
									"begin": 1938,
									"end": 1944,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 1935,
									"end": 1949,
									"name": "LT",
									"source": 22
								},
								{
									"begin": 1915,
									"end": 1933,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 1912,
									"end": 1950,
									"name": "SUB",
									"source": 22
								},
								{
									"begin": 1909,
									"end": 1993,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "108"
								},
								{
									"begin": 1909,
									"end": 1993,
									"name": "JUMPI",
									"source": 22
								},
								{
									"begin": 1965,
									"end": 1983,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "109"
								},
								{
									"begin": 1965,
									"end": 1983,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "58"
								},
								{
									"begin": 1965,
									"end": 1983,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 1965,
									"end": 1983,
									"name": "tag",
									"source": 22,
									"value": "109"
								},
								{
									"begin": 1965,
									"end": 1983,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 1909,
									"end": 1993,
									"name": "tag",
									"source": 22,
									"value": "108"
								},
								{
									"begin": 1909,
									"end": 1993,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 1730,
									"end": 1999,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 1679,
									"end": 1999,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 1679,
									"end": 1999,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 1679,
									"end": 1999,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 1679,
									"end": 1999,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 2005,
									"end": 2146,
									"name": "tag",
									"source": 22,
									"value": "60"
								},
								{
									"begin": 2005,
									"end": 2146,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 2054,
									"end": 2058,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 2077,
									"end": 2080,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 2069,
									"end": 2080,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 2069,
									"end": 2080,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 2100,
									"end": 2103,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 2097,
									"end": 2098,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 2090,
									"end": 2104,
									"name": "MSTORE",
									"source": 22
								},
								{
									"begin": 2134,
									"end": 2138,
									"name": "PUSH",
									"source": 22,
									"value": "20"
								},
								{
									"begin": 2131,
									"end": 2132,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 2121,
									"end": 2139,
									"name": "KECCAK256",
									"source": 22
								},
								{
									"begin": 2113,
									"end": 2139,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 2113,
									"end": 2139,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 2005,
									"end": 2146,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 2005,
									"end": 2146,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 2005,
									"end": 2146,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 2005,
									"end": 2146,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 2152,
									"end": 2245,
									"name": "tag",
									"source": 22,
									"value": "61"
								},
								{
									"begin": 2152,
									"end": 2245,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 2189,
									"end": 2195,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 2236,
									"end": 2238,
									"name": "PUSH",
									"source": 22,
									"value": "20"
								},
								{
									"begin": 2231,
									"end": 2233,
									"name": "PUSH",
									"source": 22,
									"value": "1F"
								},
								{
									"begin": 2224,
									"end": 2229,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 2220,
									"end": 2234,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 2216,
									"end": 2239,
									"name": "DIV",
									"source": 22
								},
								{
									"begin": 2206,
									"end": 2239,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 2206,
									"end": 2239,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 2152,
									"end": 2245,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 2152,
									"end": 2245,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 2152,
									"end": 2245,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 2152,
									"end": 2245,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 2251,
									"end": 2358,
									"name": "tag",
									"source": 22,
									"value": "62"
								},
								{
									"begin": 2251,
									"end": 2358,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 2295,
									"end": 2303,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 2345,
									"end": 2350,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 2339,
									"end": 2343,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 2335,
									"end": 2351,
									"name": "SHL",
									"source": 22
								},
								{
									"begin": 2314,
									"end": 2351,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 2314,
									"end": 2351,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 2251,
									"end": 2358,
									"name": "SWAP3",
									"source": 22
								},
								{
									"begin": 2251,
									"end": 2358,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 2251,
									"end": 2358,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 2251,
									"end": 2358,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 2251,
									"end": 2358,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "tag",
									"source": 22,
									"value": "63"
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 2433,
									"end": 2439,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 2483,
									"end": 2484,
									"name": "PUSH",
									"source": 22,
									"value": "8"
								},
								{
									"begin": 2471,
									"end": 2481,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 2467,
									"end": 2485,
									"name": "MUL",
									"source": 22
								},
								{
									"begin": 2506,
									"end": 2603,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "114"
								},
								{
									"begin": 2536,
									"end": 2602,
									"name": "PUSH",
									"source": 22,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 2525,
									"end": 2534,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 2506,
									"end": 2603,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "62"
								},
								{
									"begin": 2506,
									"end": 2603,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 2506,
									"end": 2603,
									"name": "tag",
									"source": 22,
									"value": "114"
								},
								{
									"begin": 2506,
									"end": 2603,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 2624,
									"end": 2663,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "115"
								},
								{
									"begin": 2654,
									"end": 2662,
									"name": "DUP7",
									"source": 22
								},
								{
									"begin": 2643,
									"end": 2652,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 2624,
									"end": 2663,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "62"
								},
								{
									"begin": 2624,
									"end": 2663,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 2624,
									"end": 2663,
									"name": "tag",
									"source": 22,
									"value": "115"
								},
								{
									"begin": 2624,
									"end": 2663,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 2612,
									"end": 2663,
									"name": "SWAP6",
									"source": 22
								},
								{
									"begin": 2612,
									"end": 2663,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 2696,
									"end": 2700,
									"name": "DUP1",
									"source": 22
								},
								{
									"begin": 2692,
									"end": 2701,
									"name": "NOT",
									"source": 22
								},
								{
									"begin": 2685,
									"end": 2690,
									"name": "DUP5",
									"source": 22
								},
								{
									"begin": 2681,
									"end": 2702,
									"name": "AND",
									"source": 22
								},
								{
									"begin": 2672,
									"end": 2702,
									"name": "SWAP4",
									"source": 22
								},
								{
									"begin": 2672,
									"end": 2702,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 2745,
									"end": 2749,
									"name": "DUP1",
									"source": 22
								},
								{
									"begin": 2735,
									"end": 2743,
									"name": "DUP7",
									"source": 22
								},
								{
									"begin": 2731,
									"end": 2750,
									"name": "AND",
									"source": 22
								},
								{
									"begin": 2724,
									"end": 2729,
									"name": "DUP5",
									"source": 22
								},
								{
									"begin": 2721,
									"end": 2751,
									"name": "OR",
									"source": 22
								},
								{
									"begin": 2711,
									"end": 2751,
									"name": "SWAP3",
									"source": 22
								},
								{
									"begin": 2711,
									"end": 2751,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 2440,
									"end": 2757,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 2440,
									"end": 2757,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "SWAP4",
									"source": 22
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "SWAP3",
									"source": 22
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 2364,
									"end": 2757,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 2364,
									"end": 2757,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 2763,
									"end": 2840,
									"name": "tag",
									"source": 22,
									"value": "64"
								},
								{
									"begin": 2763,
									"end": 2840,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 2800,
									"end": 2807,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 2829,
									"end": 2834,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 2818,
									"end": 2834,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 2818,
									"end": 2834,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 2763,
									"end": 2840,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 2763,
									"end": 2840,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 2763,
									"end": 2840,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 2763,
									"end": 2840,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 2846,
									"end": 2906,
									"name": "tag",
									"source": 22,
									"value": "65"
								},
								{
									"begin": 2846,
									"end": 2906,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 2874,
									"end": 2877,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 2895,
									"end": 2900,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 2888,
									"end": 2900,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 2888,
									"end": 2900,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 2846,
									"end": 2906,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 2846,
									"end": 2906,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 2846,
									"end": 2906,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 2846,
									"end": 2906,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 2912,
									"end": 3054,
									"name": "tag",
									"source": 22,
									"value": "66"
								},
								{
									"begin": 2912,
									"end": 3054,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 2962,
									"end": 2971,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 2995,
									"end": 3048,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "119"
								},
								{
									"begin": 3013,
									"end": 3047,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "120"
								},
								{
									"begin": 3022,
									"end": 3046,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "121"
								},
								{
									"begin": 3040,
									"end": 3045,
									"name": "DUP5",
									"source": 22
								},
								{
									"begin": 3022,
									"end": 3046,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "64"
								},
								{
									"begin": 3022,
									"end": 3046,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 3022,
									"end": 3046,
									"name": "tag",
									"source": 22,
									"value": "121"
								},
								{
									"begin": 3022,
									"end": 3046,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 3013,
									"end": 3047,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "65"
								},
								{
									"begin": 3013,
									"end": 3047,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 3013,
									"end": 3047,
									"name": "tag",
									"source": 22,
									"value": "120"
								},
								{
									"begin": 3013,
									"end": 3047,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 2995,
									"end": 3048,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "64"
								},
								{
									"begin": 2995,
									"end": 3048,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 2995,
									"end": 3048,
									"name": "tag",
									"source": 22,
									"value": "119"
								},
								{
									"begin": 2995,
									"end": 3048,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 2982,
									"end": 3048,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 2982,
									"end": 3048,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 2912,
									"end": 3054,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 2912,
									"end": 3054,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 2912,
									"end": 3054,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 2912,
									"end": 3054,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 3060,
									"end": 3135,
									"name": "tag",
									"source": 22,
									"value": "67"
								},
								{
									"begin": 3060,
									"end": 3135,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 3103,
									"end": 3106,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 3124,
									"end": 3129,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 3117,
									"end": 3129,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 3117,
									"end": 3129,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 3060,
									"end": 3135,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 3060,
									"end": 3135,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 3060,
									"end": 3135,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 3060,
									"end": 3135,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 3141,
									"end": 3410,
									"name": "tag",
									"source": 22,
									"value": "68"
								},
								{
									"begin": 3141,
									"end": 3410,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 3251,
									"end": 3290,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "124"
								},
								{
									"begin": 3282,
									"end": 3289,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 3251,
									"end": 3290,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "66"
								},
								{
									"begin": 3251,
									"end": 3290,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 3251,
									"end": 3290,
									"name": "tag",
									"source": 22,
									"value": "124"
								},
								{
									"begin": 3251,
									"end": 3290,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 3312,
									"end": 3403,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "125"
								},
								{
									"begin": 3361,
									"end": 3402,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "126"
								},
								{
									"begin": 3385,
									"end": 3401,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 3361,
									"end": 3402,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "67"
								},
								{
									"begin": 3361,
									"end": 3402,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 3361,
									"end": 3402,
									"name": "tag",
									"source": 22,
									"value": "126"
								},
								{
									"begin": 3361,
									"end": 3402,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 3353,
									"end": 3359,
									"name": "DUP5",
									"source": 22
								},
								{
									"begin": 3346,
									"end": 3350,
									"name": "DUP5",
									"source": 22
								},
								{
									"begin": 3340,
									"end": 3351,
									"name": "SLOAD",
									"source": 22
								},
								{
									"begin": 3312,
									"end": 3403,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "63"
								},
								{
									"begin": 3312,
									"end": 3403,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 3312,
									"end": 3403,
									"name": "tag",
									"source": 22,
									"value": "125"
								},
								{
									"begin": 3312,
									"end": 3403,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 3306,
									"end": 3310,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 3299,
									"end": 3404,
									"name": "SSTORE",
									"source": 22
								},
								{
									"begin": 3217,
									"end": 3410,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 3141,
									"end": 3410,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 3141,
									"end": 3410,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 3141,
									"end": 3410,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 3141,
									"end": 3410,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 3416,
									"end": 3489,
									"name": "tag",
									"source": 22,
									"value": "69"
								},
								{
									"begin": 3416,
									"end": 3489,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 3461,
									"end": 3464,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 3416,
									"end": 3489,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 3416,
									"end": 3489,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 3495,
									"end": 3684,
									"name": "tag",
									"source": 22,
									"value": "70"
								},
								{
									"begin": 3495,
									"end": 3684,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 3572,
									"end": 3604,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "129"
								},
								{
									"begin": 3572,
									"end": 3604,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "69"
								},
								{
									"begin": 3572,
									"end": 3604,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 3572,
									"end": 3604,
									"name": "tag",
									"source": 22,
									"value": "129"
								},
								{
									"begin": 3572,
									"end": 3604,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 3613,
									"end": 3678,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "130"
								},
								{
									"begin": 3671,
									"end": 3677,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 3663,
									"end": 3669,
									"name": "DUP5",
									"source": 22
								},
								{
									"begin": 3657,
									"end": 3661,
									"name": "DUP5",
									"source": 22
								},
								{
									"begin": 3613,
									"end": 3678,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "68"
								},
								{
									"begin": 3613,
									"end": 3678,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 3613,
									"end": 3678,
									"name": "tag",
									"source": 22,
									"value": "130"
								},
								{
									"begin": 3613,
									"end": 3678,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 3548,
									"end": 3684,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 3495,
									"end": 3684,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 3495,
									"end": 3684,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 3495,
									"end": 3684,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 3690,
									"end": 3876,
									"name": "tag",
									"source": 22,
									"value": "71"
								},
								{
									"begin": 3690,
									"end": 3876,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "tag",
									"source": 22,
									"value": "132"
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 3767,
									"end": 3770,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 3760,
									"end": 3765,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 3757,
									"end": 3771,
									"name": "LT",
									"source": 22
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "ISZERO",
									"source": 22
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "134"
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "JUMPI",
									"source": 22
								},
								{
									"begin": 3821,
									"end": 3860,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "135"
								},
								{
									"begin": 3858,
									"end": 3859,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 3851,
									"end": 3856,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 3821,
									"end": 3860,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "70"
								},
								{
									"begin": 3821,
									"end": 3860,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 3821,
									"end": 3860,
									"name": "tag",
									"source": 22,
									"value": "135"
								},
								{
									"begin": 3821,
									"end": 3860,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 3794,
									"end": 3795,
									"name": "PUSH",
									"source": 22,
									"value": "1"
								},
								{
									"begin": 3787,
									"end": 3792,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 3783,
									"end": 3796,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 3774,
									"end": 3796,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 3774,
									"end": 3796,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "132"
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "tag",
									"source": 22,
									"value": "134"
								},
								{
									"begin": 3750,
									"end": 3870,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 3690,
									"end": 3876,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 3690,
									"end": 3876,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 3690,
									"end": 3876,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 3882,
									"end": 4425,
									"name": "tag",
									"source": 22,
									"value": "72"
								},
								{
									"begin": 3882,
									"end": 4425,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 3983,
									"end": 3985,
									"name": "PUSH",
									"source": 22,
									"value": "1F"
								},
								{
									"begin": 3978,
									"end": 3981,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 3975,
									"end": 3986,
									"name": "GT",
									"source": 22
								},
								{
									"begin": 3972,
									"end": 4418,
									"name": "ISZERO",
									"source": 22
								},
								{
									"begin": 3972,
									"end": 4418,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "137"
								},
								{
									"begin": 3972,
									"end": 4418,
									"name": "JUMPI",
									"source": 22
								},
								{
									"begin": 4017,
									"end": 4055,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "138"
								},
								{
									"begin": 4049,
									"end": 4054,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 4017,
									"end": 4055,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "60"
								},
								{
									"begin": 4017,
									"end": 4055,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 4017,
									"end": 4055,
									"name": "tag",
									"source": 22,
									"value": "138"
								},
								{
									"begin": 4017,
									"end": 4055,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 4101,
									"end": 4130,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "139"
								},
								{
									"begin": 4119,
									"end": 4129,
									"name": "DUP5",
									"source": 22
								},
								{
									"begin": 4101,
									"end": 4130,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "61"
								},
								{
									"begin": 4101,
									"end": 4130,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 4101,
									"end": 4130,
									"name": "tag",
									"source": 22,
									"value": "139"
								},
								{
									"begin": 4101,
									"end": 4130,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 4091,
									"end": 4099,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 4087,
									"end": 4131,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 4284,
									"end": 4286,
									"name": "PUSH",
									"source": 22,
									"value": "20"
								},
								{
									"begin": 4272,
									"end": 4282,
									"name": "DUP6",
									"source": 22
								},
								{
									"begin": 4269,
									"end": 4287,
									"name": "LT",
									"source": 22
								},
								{
									"begin": 4266,
									"end": 4315,
									"name": "ISZERO",
									"source": 22
								},
								{
									"begin": 4266,
									"end": 4315,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "140"
								},
								{
									"begin": 4266,
									"end": 4315,
									"name": "JUMPI",
									"source": 22
								},
								{
									"begin": 4305,
									"end": 4313,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 4290,
									"end": 4313,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 4290,
									"end": 4313,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 4266,
									"end": 4315,
									"name": "tag",
									"source": 22,
									"value": "140"
								},
								{
									"begin": 4266,
									"end": 4315,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 4328,
									"end": 4408,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "141"
								},
								{
									"begin": 4384,
									"end": 4406,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "142"
								},
								{
									"begin": 4402,
									"end": 4405,
									"name": "DUP6",
									"source": 22
								},
								{
									"begin": 4384,
									"end": 4406,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "61"
								},
								{
									"begin": 4384,
									"end": 4406,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 4384,
									"end": 4406,
									"name": "tag",
									"source": 22,
									"value": "142"
								},
								{
									"begin": 4384,
									"end": 4406,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 4374,
									"end": 4382,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 4370,
									"end": 4407,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 4357,
									"end": 4368,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 4328,
									"end": 4408,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "71"
								},
								{
									"begin": 4328,
									"end": 4408,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 4328,
									"end": 4408,
									"name": "tag",
									"source": 22,
									"value": "141"
								},
								{
									"begin": 4328,
									"end": 4408,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 3987,
									"end": 4418,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 3987,
									"end": 4418,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 3972,
									"end": 4418,
									"name": "tag",
									"source": 22,
									"value": "137"
								},
								{
									"begin": 3972,
									"end": 4418,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 3882,
									"end": 4425,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 3882,
									"end": 4425,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 3882,
									"end": 4425,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 3882,
									"end": 4425,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 4431,
									"end": 4548,
									"name": "tag",
									"source": 22,
									"value": "73"
								},
								{
									"begin": 4431,
									"end": 4548,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 4485,
									"end": 4493,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 4535,
									"end": 4540,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 4529,
									"end": 4533,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 4525,
									"end": 4541,
									"name": "SHR",
									"source": 22
								},
								{
									"begin": 4504,
									"end": 4541,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 4504,
									"end": 4541,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 4431,
									"end": 4548,
									"name": "SWAP3",
									"source": 22
								},
								{
									"begin": 4431,
									"end": 4548,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 4431,
									"end": 4548,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 4431,
									"end": 4548,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 4431,
									"end": 4548,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 4554,
									"end": 4723,
									"name": "tag",
									"source": 22,
									"value": "74"
								},
								{
									"begin": 4554,
									"end": 4723,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 4598,
									"end": 4604,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 4631,
									"end": 4682,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "145"
								},
								{
									"begin": 4679,
									"end": 4680,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 4675,
									"end": 4681,
									"name": "NOT",
									"source": 22
								},
								{
									"begin": 4667,
									"end": 4672,
									"name": "DUP5",
									"source": 22
								},
								{
									"begin": 4664,
									"end": 4665,
									"name": "PUSH",
									"source": 22,
									"value": "8"
								},
								{
									"begin": 4660,
									"end": 4673,
									"name": "MUL",
									"source": 22
								},
								{
									"begin": 4631,
									"end": 4682,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "73"
								},
								{
									"begin": 4631,
									"end": 4682,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 4631,
									"end": 4682,
									"name": "tag",
									"source": 22,
									"value": "145"
								},
								{
									"begin": 4631,
									"end": 4682,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 4627,
									"end": 4683,
									"name": "NOT",
									"source": 22
								},
								{
									"begin": 4712,
									"end": 4716,
									"name": "DUP1",
									"source": 22
								},
								{
									"begin": 4706,
									"end": 4710,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 4702,
									"end": 4717,
									"name": "AND",
									"source": 22
								},
								{
									"begin": 4692,
									"end": 4717,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 4692,
									"end": 4717,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 4605,
									"end": 4723,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 4554,
									"end": 4723,
									"name": "SWAP3",
									"source": 22
								},
								{
									"begin": 4554,
									"end": 4723,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 4554,
									"end": 4723,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 4554,
									"end": 4723,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 4554,
									"end": 4723,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 4728,
									"end": 5023,
									"name": "tag",
									"source": 22,
									"value": "75"
								},
								{
									"begin": 4728,
									"end": 5023,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 4804,
									"end": 4808,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 4950,
									"end": 4979,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "147"
								},
								{
									"begin": 4975,
									"end": 4978,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 4969,
									"end": 4973,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 4950,
									"end": 4979,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "74"
								},
								{
									"begin": 4950,
									"end": 4979,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 4950,
									"end": 4979,
									"name": "tag",
									"source": 22,
									"value": "147"
								},
								{
									"begin": 4950,
									"end": 4979,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 4942,
									"end": 4979,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 4942,
									"end": 4979,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 5012,
									"end": 5015,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 5009,
									"end": 5010,
									"name": "PUSH",
									"source": 22,
									"value": "2"
								},
								{
									"begin": 5005,
									"end": 5016,
									"name": "MUL",
									"source": 22
								},
								{
									"begin": 4999,
									"end": 5003,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 4996,
									"end": 5017,
									"name": "OR",
									"source": 22
								},
								{
									"begin": 4988,
									"end": 5017,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 4988,
									"end": 5017,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 4728,
									"end": 5023,
									"name": "SWAP3",
									"source": 22
								},
								{
									"begin": 4728,
									"end": 5023,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 4728,
									"end": 5023,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 4728,
									"end": 5023,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 4728,
									"end": 5023,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 5028,
									"end": 6423,
									"name": "tag",
									"source": 22,
									"value": "12"
								},
								{
									"begin": 5028,
									"end": 6423,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 5145,
									"end": 5182,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "149"
								},
								{
									"begin": 5178,
									"end": 5181,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 5145,
									"end": 5182,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "56"
								},
								{
									"begin": 5145,
									"end": 5182,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 5145,
									"end": 5182,
									"name": "tag",
									"source": 22,
									"value": "149"
								},
								{
									"begin": 5145,
									"end": 5182,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 5247,
									"end": 5265,
									"name": "PUSH",
									"source": 22,
									"value": "FFFFFFFFFFFFFFFF"
								},
								{
									"begin": 5239,
									"end": 5245,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 5236,
									"end": 5266,
									"name": "GT",
									"source": 22
								},
								{
									"begin": 5233,
									"end": 5289,
									"name": "ISZERO",
									"source": 22
								},
								{
									"begin": 5233,
									"end": 5289,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "150"
								},
								{
									"begin": 5233,
									"end": 5289,
									"name": "JUMPI",
									"source": 22
								},
								{
									"begin": 5269,
									"end": 5287,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "151"
								},
								{
									"begin": 5269,
									"end": 5287,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "57"
								},
								{
									"begin": 5269,
									"end": 5287,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 5269,
									"end": 5287,
									"name": "tag",
									"source": 22,
									"value": "151"
								},
								{
									"begin": 5269,
									"end": 5287,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 5233,
									"end": 5289,
									"name": "tag",
									"source": 22,
									"value": "150"
								},
								{
									"begin": 5233,
									"end": 5289,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 5313,
									"end": 5351,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "152"
								},
								{
									"begin": 5345,
									"end": 5349,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 5339,
									"end": 5350,
									"name": "SLOAD",
									"source": 22
								},
								{
									"begin": 5313,
									"end": 5351,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "59"
								},
								{
									"begin": 5313,
									"end": 5351,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 5313,
									"end": 5351,
									"name": "tag",
									"source": 22,
									"value": "152"
								},
								{
									"begin": 5313,
									"end": 5351,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 5398,
									"end": 5465,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "153"
								},
								{
									"begin": 5458,
									"end": 5464,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 5450,
									"end": 5456,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 5444,
									"end": 5448,
									"name": "DUP6",
									"source": 22
								},
								{
									"begin": 5398,
									"end": 5465,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "72"
								},
								{
									"begin": 5398,
									"end": 5465,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 5398,
									"end": 5465,
									"name": "tag",
									"source": 22,
									"value": "153"
								},
								{
									"begin": 5398,
									"end": 5465,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 5492,
									"end": 5493,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 5516,
									"end": 5520,
									"name": "PUSH",
									"source": 22,
									"value": "20"
								},
								{
									"begin": 5503,
									"end": 5520,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 5503,
									"end": 5520,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 5548,
									"end": 5550,
									"name": "PUSH",
									"source": 22,
									"value": "1F"
								},
								{
									"begin": 5540,
									"end": 5546,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 5537,
									"end": 5551,
									"name": "GT",
									"source": 22
								},
								{
									"begin": 5565,
									"end": 5566,
									"name": "PUSH",
									"source": 22,
									"value": "1"
								},
								{
									"begin": 5560,
									"end": 6178,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 5560,
									"end": 6178,
									"name": "EQ",
									"source": 22
								},
								{
									"begin": 5560,
									"end": 6178,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "155"
								},
								{
									"begin": 5560,
									"end": 6178,
									"name": "JUMPI",
									"source": 22
								},
								{
									"begin": 6222,
									"end": 6223,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 6239,
									"end": 6245,
									"name": "DUP5",
									"source": 22
								},
								{
									"begin": 6236,
									"end": 6313,
									"name": "ISZERO",
									"source": 22
								},
								{
									"begin": 6236,
									"end": 6313,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "156"
								},
								{
									"begin": 6236,
									"end": 6313,
									"name": "JUMPI",
									"source": 22
								},
								{
									"begin": 6288,
									"end": 6297,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 6283,
									"end": 6286,
									"name": "DUP8",
									"source": 22
								},
								{
									"begin": 6279,
									"end": 6298,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 6273,
									"end": 6299,
									"name": "MLOAD",
									"source": 22
								},
								{
									"begin": 6264,
									"end": 6299,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 6264,
									"end": 6299,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 6236,
									"end": 6313,
									"name": "tag",
									"source": 22,
									"value": "156"
								},
								{
									"begin": 6236,
									"end": 6313,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 6339,
									"end": 6406,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "157"
								},
								{
									"begin": 6399,
									"end": 6405,
									"name": "DUP6",
									"source": 22
								},
								{
									"begin": 6392,
									"end": 6397,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 6339,
									"end": 6406,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "75"
								},
								{
									"begin": 6339,
									"end": 6406,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 6339,
									"end": 6406,
									"name": "tag",
									"source": 22,
									"value": "157"
								},
								{
									"begin": 6339,
									"end": 6406,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 6333,
									"end": 6337,
									"name": "DUP7",
									"source": 22
								},
								{
									"begin": 6326,
									"end": 6407,
									"name": "SSTORE",
									"source": 22
								},
								{
									"begin": 6195,
									"end": 6417,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 5530,
									"end": 6417,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "154"
								},
								{
									"begin": 5530,
									"end": 6417,
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 5560,
									"end": 6178,
									"name": "tag",
									"source": 22,
									"value": "155"
								},
								{
									"begin": 5560,
									"end": 6178,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 5612,
									"end": 5616,
									"name": "PUSH",
									"source": 22,
									"value": "1F"
								},
								{
									"begin": 5608,
									"end": 5617,
									"name": "NOT",
									"source": 22
								},
								{
									"begin": 5600,
									"end": 5606,
									"name": "DUP5",
									"source": 22
								},
								{
									"begin": 5596,
									"end": 5618,
									"name": "AND",
									"source": 22
								},
								{
									"begin": 5646,
									"end": 5683,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "158"
								},
								{
									"begin": 5678,
									"end": 5682,
									"name": "DUP7",
									"source": 22
								},
								{
									"begin": 5646,
									"end": 5683,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "60"
								},
								{
									"begin": 5646,
									"end": 5683,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 5646,
									"end": 5683,
									"name": "tag",
									"source": 22,
									"value": "158"
								},
								{
									"begin": 5646,
									"end": 5683,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 5705,
									"end": 5706,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "tag",
									"source": 22,
									"value": "159"
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 5733,
									"end": 5740,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 5730,
									"end": 5731,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 5727,
									"end": 5741,
									"name": "LT",
									"source": 22
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "ISZERO",
									"source": 22
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "161"
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "JUMPI",
									"source": 22
								},
								{
									"begin": 5812,
									"end": 5821,
									"name": "DUP5",
									"source": 22
								},
								{
									"begin": 5807,
									"end": 5810,
									"name": "DUP10",
									"source": 22
								},
								{
									"begin": 5803,
									"end": 5822,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 5797,
									"end": 5823,
									"name": "MLOAD",
									"source": 22
								},
								{
									"begin": 5789,
									"end": 5795,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 5782,
									"end": 5824,
									"name": "SSTORE",
									"source": 22
								},
								{
									"begin": 5863,
									"end": 5864,
									"name": "PUSH",
									"source": 22,
									"value": "1"
								},
								{
									"begin": 5855,
									"end": 5861,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 5851,
									"end": 5865,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 5841,
									"end": 5865,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 5841,
									"end": 5865,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 5910,
									"end": 5912,
									"name": "PUSH",
									"source": 22,
									"value": "20"
								},
								{
									"begin": 5899,
									"end": 5908,
									"name": "DUP6",
									"source": 22
								},
								{
									"begin": 5895,
									"end": 5913,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 5882,
									"end": 5913,
									"name": "SWAP5",
									"source": 22
								},
								{
									"begin": 5882,
									"end": 5913,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 5756,
									"end": 5760,
									"name": "PUSH",
									"source": 22,
									"value": "20"
								},
								{
									"begin": 5753,
									"end": 5754,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 5749,
									"end": 5761,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 5744,
									"end": 5761,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 5744,
									"end": 5761,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "159"
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "tag",
									"source": 22,
									"value": "161"
								},
								{
									"begin": 5719,
									"end": 5927,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 5955,
									"end": 5961,
									"name": "DUP7",
									"source": 22
								},
								{
									"begin": 5946,
									"end": 5953,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 5943,
									"end": 5962,
									"name": "LT",
									"source": 22
								},
								{
									"begin": 5940,
									"end": 6119,
									"name": "ISZERO",
									"source": 22
								},
								{
									"begin": 5940,
									"end": 6119,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "162"
								},
								{
									"begin": 5940,
									"end": 6119,
									"name": "JUMPI",
									"source": 22
								},
								{
									"begin": 6013,
									"end": 6022,
									"name": "DUP5",
									"source": 22
								},
								{
									"begin": 6008,
									"end": 6011,
									"name": "DUP10",
									"source": 22
								},
								{
									"begin": 6004,
									"end": 6023,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 5998,
									"end": 6024,
									"name": "MLOAD",
									"source": 22
								},
								{
									"begin": 6056,
									"end": 6104,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "163"
								},
								{
									"begin": 6098,
									"end": 6102,
									"name": "PUSH",
									"source": 22,
									"value": "1F"
								},
								{
									"begin": 6090,
									"end": 6096,
									"name": "DUP10",
									"source": 22
								},
								{
									"begin": 6086,
									"end": 6103,
									"name": "AND",
									"source": 22
								},
								{
									"begin": 6075,
									"end": 6084,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 6056,
									"end": 6104,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "74"
								},
								{
									"begin": 6056,
									"end": 6104,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 6056,
									"end": 6104,
									"name": "tag",
									"source": 22,
									"value": "163"
								},
								{
									"begin": 6056,
									"end": 6104,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 6048,
									"end": 6054,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 6041,
									"end": 6105,
									"name": "SSTORE",
									"source": 22
								},
								{
									"begin": 5963,
									"end": 6119,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 5940,
									"end": 6119,
									"name": "tag",
									"source": 22,
									"value": "162"
								},
								{
									"begin": 5940,
									"end": 6119,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 6165,
									"end": 6166,
									"name": "PUSH",
									"source": 22,
									"value": "1"
								},
								{
									"begin": 6161,
									"end": 6162,
									"name": "PUSH",
									"source": 22,
									"value": "2"
								},
								{
									"begin": 6153,
									"end": 6159,
									"name": "DUP9",
									"source": 22
								},
								{
									"begin": 6149,
									"end": 6163,
									"name": "MUL",
									"source": 22
								},
								{
									"begin": 6145,
									"end": 6167,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 6139,
									"end": 6143,
									"name": "DUP9",
									"source": 22
								},
								{
									"begin": 6132,
									"end": 6168,
									"name": "SSTORE",
									"source": 22
								},
								{
									"begin": 5567,
									"end": 6178,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 5567,
									"end": 6178,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 5567,
									"end": 6178,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 5530,
									"end": 6417,
									"name": "tag",
									"source": 22,
									"value": "154"
								},
								{
									"begin": 5530,
									"end": 6417,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 5530,
									"end": 6417,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 5120,
									"end": 6423,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 5120,
									"end": 6423,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 5120,
									"end": 6423,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 5028,
									"end": 6423,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 5028,
									"end": 6423,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 5028,
									"end": 6423,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 6429,
									"end": 6547,
									"name": "tag",
									"source": 22,
									"value": "76"
								},
								{
									"begin": 6429,
									"end": 6547,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 6516,
									"end": 6540,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "165"
								},
								{
									"begin": 6534,
									"end": 6539,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 6516,
									"end": 6540,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "53"
								},
								{
									"begin": 6516,
									"end": 6540,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 6516,
									"end": 6540,
									"name": "tag",
									"source": 22,
									"value": "165"
								},
								{
									"begin": 6516,
									"end": 6540,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 6511,
									"end": 6514,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 6504,
									"end": 6541,
									"name": "MSTORE",
									"source": 22
								},
								{
									"begin": 6429,
									"end": 6547,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 6429,
									"end": 6547,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 6429,
									"end": 6547,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 6553,
									"end": 6775,
									"name": "tag",
									"source": 22,
									"value": "18"
								},
								{
									"begin": 6553,
									"end": 6775,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 6646,
									"end": 6650,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 6684,
									"end": 6686,
									"name": "PUSH",
									"source": 22,
									"value": "20"
								},
								{
									"begin": 6673,
									"end": 6682,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 6669,
									"end": 6687,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 6661,
									"end": 6687,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 6661,
									"end": 6687,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 6697,
									"end": 6768,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "167"
								},
								{
									"begin": 6765,
									"end": 6766,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 6754,
									"end": 6763,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 6750,
									"end": 6767,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 6741,
									"end": 6747,
									"name": "DUP5",
									"source": 22
								},
								{
									"begin": 6697,
									"end": 6768,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "76"
								},
								{
									"begin": 6697,
									"end": 6768,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 6697,
									"end": 6768,
									"name": "tag",
									"source": 22,
									"value": "167"
								},
								{
									"begin": 6697,
									"end": 6768,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 6553,
									"end": 6775,
									"name": "SWAP3",
									"source": 22
								},
								{
									"begin": 6553,
									"end": 6775,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 6553,
									"end": 6775,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 6553,
									"end": 6775,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 6553,
									"end": 6775,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 6781,
									"end": 6858,
									"name": "tag",
									"source": 22,
									"value": "77"
								},
								{
									"begin": 6781,
									"end": 6858,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 6818,
									"end": 6825,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 6847,
									"end": 6852,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 6836,
									"end": 6852,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 6836,
									"end": 6852,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 6781,
									"end": 6858,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 6781,
									"end": 6858,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 6781,
									"end": 6858,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 6781,
									"end": 6858,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 6864,
									"end": 6982,
									"name": "tag",
									"source": 22,
									"value": "78"
								},
								{
									"begin": 6864,
									"end": 6982,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 6951,
									"end": 6975,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "170"
								},
								{
									"begin": 6969,
									"end": 6974,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 6951,
									"end": 6975,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "77"
								},
								{
									"begin": 6951,
									"end": 6975,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 6951,
									"end": 6975,
									"name": "tag",
									"source": 22,
									"value": "170"
								},
								{
									"begin": 6951,
									"end": 6975,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 6946,
									"end": 6949,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 6939,
									"end": 6976,
									"name": "MSTORE",
									"source": 22
								},
								{
									"begin": 6864,
									"end": 6982,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 6864,
									"end": 6982,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 6864,
									"end": 6982,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 6988,
									"end": 7106,
									"name": "tag",
									"source": 22,
									"value": "79"
								},
								{
									"begin": 6988,
									"end": 7106,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 7075,
									"end": 7099,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "172"
								},
								{
									"begin": 7093,
									"end": 7098,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 7075,
									"end": 7099,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "64"
								},
								{
									"begin": 7075,
									"end": 7099,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 7075,
									"end": 7099,
									"name": "tag",
									"source": 22,
									"value": "172"
								},
								{
									"begin": 7075,
									"end": 7099,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 7070,
									"end": 7073,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 7063,
									"end": 7100,
									"name": "MSTORE",
									"source": 22
								},
								{
									"begin": 6988,
									"end": 7106,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 6988,
									"end": 7106,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 6988,
									"end": 7106,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 7112,
									"end": 7776,
									"name": "tag",
									"source": 22,
									"value": "41"
								},
								{
									"begin": 7112,
									"end": 7776,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 7317,
									"end": 7321,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 7355,
									"end": 7358,
									"name": "PUSH",
									"source": 22,
									"value": "A0"
								},
								{
									"begin": 7344,
									"end": 7353,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 7340,
									"end": 7359,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 7332,
									"end": 7359,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 7332,
									"end": 7359,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 7369,
									"end": 7440,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "174"
								},
								{
									"begin": 7437,
									"end": 7438,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 7426,
									"end": 7435,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 7422,
									"end": 7439,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 7413,
									"end": 7419,
									"name": "DUP9",
									"source": 22
								},
								{
									"begin": 7369,
									"end": 7440,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "78"
								},
								{
									"begin": 7369,
									"end": 7440,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 7369,
									"end": 7440,
									"name": "tag",
									"source": 22,
									"value": "174"
								},
								{
									"begin": 7369,
									"end": 7440,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 7450,
									"end": 7522,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "175"
								},
								{
									"begin": 7518,
									"end": 7520,
									"name": "PUSH",
									"source": 22,
									"value": "20"
								},
								{
									"begin": 7507,
									"end": 7516,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 7503,
									"end": 7521,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 7494,
									"end": 7500,
									"name": "DUP8",
									"source": 22
								},
								{
									"begin": 7450,
									"end": 7522,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "78"
								},
								{
									"begin": 7450,
									"end": 7522,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 7450,
									"end": 7522,
									"name": "tag",
									"source": 22,
									"value": "175"
								},
								{
									"begin": 7450,
									"end": 7522,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 7532,
									"end": 7604,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "176"
								},
								{
									"begin": 7600,
									"end": 7602,
									"name": "PUSH",
									"source": 22,
									"value": "40"
								},
								{
									"begin": 7589,
									"end": 7598,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 7585,
									"end": 7603,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 7576,
									"end": 7582,
									"name": "DUP7",
									"source": 22
								},
								{
									"begin": 7532,
									"end": 7604,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "78"
								},
								{
									"begin": 7532,
									"end": 7604,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 7532,
									"end": 7604,
									"name": "tag",
									"source": 22,
									"value": "176"
								},
								{
									"begin": 7532,
									"end": 7604,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 7614,
									"end": 7686,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "177"
								},
								{
									"begin": 7682,
									"end": 7684,
									"name": "PUSH",
									"source": 22,
									"value": "60"
								},
								{
									"begin": 7671,
									"end": 7680,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 7667,
									"end": 7685,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 7658,
									"end": 7664,
									"name": "DUP6",
									"source": 22
								},
								{
									"begin": 7614,
									"end": 7686,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "79"
								},
								{
									"begin": 7614,
									"end": 7686,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 7614,
									"end": 7686,
									"name": "tag",
									"source": 22,
									"value": "177"
								},
								{
									"begin": 7614,
									"end": 7686,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 7696,
									"end": 7769,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "178"
								},
								{
									"begin": 7764,
									"end": 7767,
									"name": "PUSH",
									"source": 22,
									"value": "80"
								},
								{
									"begin": 7753,
									"end": 7762,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 7749,
									"end": 7768,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 7740,
									"end": 7746,
									"name": "DUP5",
									"source": 22
								},
								{
									"begin": 7696,
									"end": 7769,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "76"
								},
								{
									"begin": 7696,
									"end": 7769,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 7696,
									"end": 7769,
									"name": "tag",
									"source": 22,
									"value": "178"
								},
								{
									"begin": 7696,
									"end": 7769,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 7112,
									"end": 7776,
									"name": "SWAP7",
									"source": 22
								},
								{
									"begin": 7112,
									"end": 7776,
									"name": "SWAP6",
									"source": 22
								},
								{
									"begin": 7112,
									"end": 7776,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 7112,
									"end": 7776,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 7112,
									"end": 7776,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 7112,
									"end": 7776,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 7112,
									"end": 7776,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 7112,
									"end": 7776,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 7112,
									"end": 7776,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 7782,
									"end": 7951,
									"name": "tag",
									"source": 22,
									"value": "80"
								},
								{
									"begin": 7782,
									"end": 7951,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 7866,
									"end": 7877,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 7900,
									"end": 7906,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 7895,
									"end": 7898,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 7888,
									"end": 7907,
									"name": "MSTORE",
									"source": 22
								},
								{
									"begin": 7940,
									"end": 7944,
									"name": "PUSH",
									"source": 22,
									"value": "20"
								},
								{
									"begin": 7935,
									"end": 7938,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 7931,
									"end": 7945,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 7916,
									"end": 7945,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 7916,
									"end": 7945,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 7782,
									"end": 7951,
									"name": "SWAP3",
									"source": 22
								},
								{
									"begin": 7782,
									"end": 7951,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 7782,
									"end": 7951,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 7782,
									"end": 7951,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 7782,
									"end": 7951,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 7957,
									"end": 8096,
									"name": "tag",
									"source": 22,
									"value": "81"
								},
								{
									"begin": 7957,
									"end": 8096,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 8046,
									"end": 8052,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 8041,
									"end": 8044,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 8036,
									"end": 8039,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 8030,
									"end": 8053,
									"name": "MCOPY",
									"source": 22
								},
								{
									"begin": 8087,
									"end": 8088,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 8078,
									"end": 8084,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 8073,
									"end": 8076,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 8069,
									"end": 8085,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 8062,
									"end": 8089,
									"name": "MSTORE",
									"source": 22
								},
								{
									"begin": 7957,
									"end": 8096,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 7957,
									"end": 8096,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 7957,
									"end": 8096,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 7957,
									"end": 8096,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 8102,
									"end": 8204,
									"name": "tag",
									"source": 22,
									"value": "82"
								},
								{
									"begin": 8102,
									"end": 8204,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 8143,
									"end": 8149,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 8194,
									"end": 8196,
									"name": "PUSH",
									"source": 22,
									"value": "1F"
								},
								{
									"begin": 8190,
									"end": 8197,
									"name": "NOT",
									"source": 22
								},
								{
									"begin": 8185,
									"end": 8187,
									"name": "PUSH",
									"source": 22,
									"value": "1F"
								},
								{
									"begin": 8178,
									"end": 8183,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 8174,
									"end": 8188,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 8170,
									"end": 8198,
									"name": "AND",
									"source": 22
								},
								{
									"begin": 8160,
									"end": 8198,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 8160,
									"end": 8198,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 8102,
									"end": 8204,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 8102,
									"end": 8204,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 8102,
									"end": 8204,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 8102,
									"end": 8204,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 8210,
									"end": 8587,
									"name": "tag",
									"source": 22,
									"value": "83"
								},
								{
									"begin": 8210,
									"end": 8587,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 8298,
									"end": 8301,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 8326,
									"end": 8365,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "183"
								},
								{
									"begin": 8359,
									"end": 8364,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 8326,
									"end": 8365,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "56"
								},
								{
									"begin": 8326,
									"end": 8365,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 8326,
									"end": 8365,
									"name": "tag",
									"source": 22,
									"value": "183"
								},
								{
									"begin": 8326,
									"end": 8365,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 8381,
									"end": 8452,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "184"
								},
								{
									"begin": 8445,
									"end": 8451,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 8440,
									"end": 8443,
									"name": "DUP6",
									"source": 22
								},
								{
									"begin": 8381,
									"end": 8452,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "80"
								},
								{
									"begin": 8381,
									"end": 8452,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 8381,
									"end": 8452,
									"name": "tag",
									"source": 22,
									"value": "184"
								},
								{
									"begin": 8381,
									"end": 8452,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 8374,
									"end": 8452,
									"name": "SWAP4",
									"source": 22
								},
								{
									"begin": 8374,
									"end": 8452,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 8461,
									"end": 8526,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "185"
								},
								{
									"begin": 8519,
									"end": 8525,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 8514,
									"end": 8517,
									"name": "DUP6",
									"source": 22
								},
								{
									"begin": 8507,
									"end": 8511,
									"name": "PUSH",
									"source": 22,
									"value": "20"
								},
								{
									"begin": 8500,
									"end": 8505,
									"name": "DUP7",
									"source": 22
								},
								{
									"begin": 8496,
									"end": 8512,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 8461,
									"end": 8526,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "81"
								},
								{
									"begin": 8461,
									"end": 8526,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 8461,
									"end": 8526,
									"name": "tag",
									"source": 22,
									"value": "185"
								},
								{
									"begin": 8461,
									"end": 8526,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 8551,
									"end": 8580,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "186"
								},
								{
									"begin": 8573,
									"end": 8579,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 8551,
									"end": 8580,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "82"
								},
								{
									"begin": 8551,
									"end": 8580,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 8551,
									"end": 8580,
									"name": "tag",
									"source": 22,
									"value": "186"
								},
								{
									"begin": 8551,
									"end": 8580,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 8546,
									"end": 8549,
									"name": "DUP5",
									"source": 22
								},
								{
									"begin": 8542,
									"end": 8581,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 8535,
									"end": 8581,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 8535,
									"end": 8581,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 8302,
									"end": 8587,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 8210,
									"end": 8587,
									"name": "SWAP3",
									"source": 22
								},
								{
									"begin": 8210,
									"end": 8587,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 8210,
									"end": 8587,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 8210,
									"end": 8587,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 8210,
									"end": 8587,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 8593,
									"end": 8906,
									"name": "tag",
									"source": 22,
									"value": "45"
								},
								{
									"begin": 8593,
									"end": 8906,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 8706,
									"end": 8710,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 8744,
									"end": 8746,
									"name": "PUSH",
									"source": 22,
									"value": "20"
								},
								{
									"begin": 8733,
									"end": 8742,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 8729,
									"end": 8747,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 8721,
									"end": 8747,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 8721,
									"end": 8747,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 8793,
									"end": 8802,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 8787,
									"end": 8791,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 8783,
									"end": 8803,
									"name": "SUB",
									"source": 22
								},
								{
									"begin": 8779,
									"end": 8780,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 8768,
									"end": 8777,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 8764,
									"end": 8781,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 8757,
									"end": 8804,
									"name": "MSTORE",
									"source": 22
								},
								{
									"begin": 8821,
									"end": 8899,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "188"
								},
								{
									"begin": 8894,
									"end": 8898,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 8885,
									"end": 8891,
									"name": "DUP5",
									"source": 22
								},
								{
									"begin": 8821,
									"end": 8899,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "83"
								},
								{
									"begin": 8821,
									"end": 8899,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 8821,
									"end": 8899,
									"name": "tag",
									"source": 22,
									"value": "188"
								},
								{
									"begin": 8821,
									"end": 8899,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 8813,
									"end": 8899,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 8813,
									"end": 8899,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 8593,
									"end": 8906,
									"name": "SWAP3",
									"source": 22
								},
								{
									"begin": 8593,
									"end": 8906,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 8593,
									"end": 8906,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 8593,
									"end": 8906,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 8593,
									"end": 8906,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 8912,
									"end": 9010,
									"name": "tag",
									"source": 22,
									"value": "84"
								},
								{
									"begin": 8912,
									"end": 9010,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 8963,
									"end": 8969,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 8997,
									"end": 9002,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 8991,
									"end": 9003,
									"name": "MLOAD",
									"source": 22
								},
								{
									"begin": 8981,
									"end": 9003,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 8981,
									"end": 9003,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 8912,
									"end": 9010,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 8912,
									"end": 9010,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 8912,
									"end": 9010,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 8912,
									"end": 9010,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 9016,
									"end": 9132,
									"name": "tag",
									"source": 22,
									"value": "85"
								},
								{
									"begin": 9016,
									"end": 9132,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 9067,
									"end": 9071,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 9090,
									"end": 9093,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 9082,
									"end": 9093,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 9082,
									"end": 9093,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 9120,
									"end": 9124,
									"name": "PUSH",
									"source": 22,
									"value": "20"
								},
								{
									"begin": 9115,
									"end": 9118,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 9111,
									"end": 9125,
									"name": "ADD",
									"source": 22
								},
								{
									"begin": 9103,
									"end": 9125,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 9103,
									"end": 9125,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 9016,
									"end": 9132,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 9016,
									"end": 9132,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 9016,
									"end": 9132,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 9016,
									"end": 9132,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 9138,
									"end": 9292,
									"name": "tag",
									"source": 22,
									"value": "86"
								},
								{
									"begin": 9138,
									"end": 9292,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 9181,
									"end": 9192,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 9217,
									"end": 9246,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "192"
								},
								{
									"begin": 9241,
									"end": 9244,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 9235,
									"end": 9245,
									"name": "MLOAD",
									"source": 22
								},
								{
									"begin": 9217,
									"end": 9246,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "77"
								},
								{
									"begin": 9217,
									"end": 9246,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 9217,
									"end": 9246,
									"name": "tag",
									"source": 22,
									"value": "192"
								},
								{
									"begin": 9217,
									"end": 9246,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 9280,
									"end": 9285,
									"name": "DUP1",
									"source": 22
								},
								{
									"begin": 9256,
									"end": 9285,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 9256,
									"end": 9285,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 9193,
									"end": 9292,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 9138,
									"end": 9292,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 9138,
									"end": 9292,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 9138,
									"end": 9292,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 9138,
									"end": 9292,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 9298,
									"end": 9892,
									"name": "tag",
									"source": 22,
									"value": "47"
								},
								{
									"begin": 9298,
									"end": 9892,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 9382,
									"end": 9387,
									"name": "PUSH",
									"source": 22,
									"value": "0"
								},
								{
									"begin": 9413,
									"end": 9451,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "194"
								},
								{
									"begin": 9445,
									"end": 9450,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 9413,
									"end": 9451,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "84"
								},
								{
									"begin": 9413,
									"end": 9451,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 9413,
									"end": 9451,
									"name": "tag",
									"source": 22,
									"value": "194"
								},
								{
									"begin": 9413,
									"end": 9451,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 9476,
									"end": 9481,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 9503,
									"end": 9543,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "195"
								},
								{
									"begin": 9537,
									"end": 9542,
									"name": "DUP5",
									"source": 22
								},
								{
									"begin": 9503,
									"end": 9543,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "85"
								},
								{
									"begin": 9503,
									"end": 9543,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 9503,
									"end": 9543,
									"name": "tag",
									"source": 22,
									"value": "195"
								},
								{
									"begin": 9503,
									"end": 9543,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 9491,
									"end": 9543,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 9491,
									"end": 9543,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 9562,
									"end": 9597,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "196"
								},
								{
									"begin": 9588,
									"end": 9596,
									"name": "DUP2",
									"source": 22
								},
								{
									"begin": 9562,
									"end": 9597,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "86"
								},
								{
									"begin": 9562,
									"end": 9597,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 9562,
									"end": 9597,
									"name": "tag",
									"source": 22,
									"value": "196"
								},
								{
									"begin": 9562,
									"end": 9597,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 9553,
									"end": 9597,
									"name": "SWAP3",
									"source": 22
								},
								{
									"begin": 9553,
									"end": 9597,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 9621,
									"end": 9623,
									"name": "PUSH",
									"source": 22,
									"value": "20"
								},
								{
									"begin": 9613,
									"end": 9619,
									"name": "DUP3",
									"source": 22
								},
								{
									"begin": 9610,
									"end": 9624,
									"name": "LT",
									"source": 22
								},
								{
									"begin": 9607,
									"end": 9885,
									"name": "ISZERO",
									"source": 22
								},
								{
									"begin": 9607,
									"end": 9885,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "197"
								},
								{
									"begin": 9607,
									"end": 9885,
									"name": "JUMPI",
									"source": 22
								},
								{
									"begin": 9692,
									"end": 9861,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "198"
								},
								{
									"begin": 9777,
									"end": 9843,
									"name": "PUSH",
									"source": 22,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 9747,
									"end": 9753,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 9743,
									"end": 9745,
									"name": "PUSH",
									"source": 22,
									"value": "20"
								},
								{
									"begin": 9739,
									"end": 9754,
									"name": "SUB",
									"source": 22
								},
								{
									"begin": 9736,
									"end": 9737,
									"name": "PUSH",
									"source": 22,
									"value": "8"
								},
								{
									"begin": 9732,
									"end": 9755,
									"name": "MUL",
									"source": 22
								},
								{
									"begin": 9692,
									"end": 9861,
									"name": "PUSH [tag]",
									"source": 22,
									"value": "62"
								},
								{
									"begin": 9692,
									"end": 9861,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 9692,
									"end": 9861,
									"name": "tag",
									"source": 22,
									"value": "198"
								},
								{
									"begin": 9692,
									"end": 9861,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 9669,
									"end": 9674,
									"name": "DUP4",
									"source": 22
								},
								{
									"begin": 9648,
									"end": 9875,
									"name": "AND",
									"source": 22
								},
								{
									"begin": 9639,
									"end": 9875,
									"name": "SWAP3",
									"source": 22
								},
								{
									"begin": 9639,
									"end": 9875,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 9607,
									"end": 9885,
									"name": "tag",
									"source": 22,
									"value": "197"
								},
								{
									"begin": 9607,
									"end": 9885,
									"name": "JUMPDEST",
									"source": 22
								},
								{
									"begin": 9388,
									"end": 9892,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 9388,
									"end": 9892,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 9298,
									"end": 9892,
									"name": "SWAP2",
									"source": 22
								},
								{
									"begin": 9298,
									"end": 9892,
									"name": "SWAP1",
									"source": 22
								},
								{
									"begin": 9298,
									"end": 9892,
									"name": "POP",
									"source": 22
								},
								{
									"begin": 9298,
									"end": 9892,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 22
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "tag",
									"source": 21,
									"value": "29"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "JUMPDEST",
									"source": 21
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "PUSH",
									"source": 21,
									"value": "80"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "MLOAD",
									"source": 21
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "PUSH",
									"source": 21,
									"value": "A0"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "MLOAD",
									"source": 21
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "PUSH",
									"source": 21,
									"value": "C0"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "MLOAD",
									"source": 21
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "PUSH",
									"source": 21,
									"value": "E0"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "MLOAD",
									"source": 21
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "PUSH",
									"source": 21,
									"value": "100"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "MLOAD",
									"source": 21
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "PUSH",
									"source": 21,
									"value": "120"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "MLOAD",
									"source": 21
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "PUSH",
									"source": 21,
									"value": "140"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "MLOAD",
									"source": 21
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "PUSH #[$]",
									"source": 21,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "PUSH [$]",
									"source": 21,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "CODECOPY",
									"source": 21
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "ASSIGNIMMUTABLE",
									"source": 21,
									"value": "2378"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "ASSIGNIMMUTABLE",
									"source": 21,
									"value": "2375"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "ASSIGNIMMUTABLE",
									"source": 21,
									"value": "2372"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "ASSIGNIMMUTABLE",
									"source": 21,
									"value": "2370"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "ASSIGNIMMUTABLE",
									"source": 21,
									"value": "2368"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "ASSIGNIMMUTABLE",
									"source": 21,
									"value": "2366"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "ASSIGNIMMUTABLE",
									"source": 21,
									"value": "2364"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "PUSH #[$]",
									"source": 21,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "PUSH",
									"source": 21,
									"value": "0"
								},
								{
									"begin": 450,
									"end": 1270,
									"name": "RETURN",
									"source": 21
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ff9e023953b20e928a81c3df5312e9e96fbddfb24a474c672d6ee9dfe43b5dbc64736f6c634300081a0033",
									".code": [
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "80"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "40"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "MSTORE",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "CALLVALUE",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "ISZERO",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "1"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "tag",
											"source": 21,
											"value": "1"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "4"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "CALLDATASIZE",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "LT",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "2"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "CALLDATALOAD",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "E0"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "SHR",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "715018A6"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "GT",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "25"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "8DA5CB5B"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "GT",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "26"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "8DA5CB5B"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "19"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "95D89B41"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "20"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "A9059CBB"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "21"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "D505ACCF"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "22"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "DD62ED3E"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "23"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "F2FDE38B"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "24"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "2"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "tag",
											"source": 21,
											"value": "26"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "715018A6"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "14"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "79CC6790"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "15"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "7ECEBE00"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "16"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "8456CB59"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "17"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "84B0196E"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "18"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "2"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "tag",
											"source": 21,
											"value": "25"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "3644E515"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "GT",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "27"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "3644E515"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "8"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "3F4BA83A"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "9"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "40C10F19"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "10"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "42966C68"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "11"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "5C975ABB"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "12"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "70A08231"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "13"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "2"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "tag",
											"source": 21,
											"value": "27"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "6FDDE03"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "3"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "95EA7B3"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "4"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "18160DDD"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "5"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "23B872DD"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "6"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "313CE567"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "EQ",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "7"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPI",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "tag",
											"source": 21,
											"value": "2"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "PUSH",
											"source": 21,
											"value": "0"
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 450,
											"end": 1270,
											"name": "REVERT",
											"source": 21
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "29"
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "30"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "31"
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 3,
											"value": "30"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "36"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 3,
											"value": "36"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 3144,
											"end": 3241,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 3144,
											"end": 3241,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "43"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "44"
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 3,
											"value": "43"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "45"
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "46"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 3,
											"value": "46"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "tag",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "48"
										},
										{
											"begin": 3002,
											"end": 3084,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "tag",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "49"
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 3002,
											"end": 3084,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "tag",
											"source": 3,
											"value": "49"
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "tag",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "51"
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "52"
										},
										{
											"begin": 2656,
											"end": 2768,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "tag",
											"source": 7,
											"value": "51"
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "53"
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "54"
										},
										{
											"begin": 2656,
											"end": 2768,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "tag",
											"source": 7,
											"value": "53"
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 851,
											"end": 916,
											"name": "tag",
											"source": 21,
											"value": "9"
										},
										{
											"begin": 851,
											"end": 916,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 851,
											"end": 916,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "55"
										},
										{
											"begin": 851,
											"end": 916,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "56"
										},
										{
											"begin": 851,
											"end": 916,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 851,
											"end": 916,
											"name": "tag",
											"source": 21,
											"value": "55"
										},
										{
											"begin": 851,
											"end": 916,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 851,
											"end": 916,
											"name": "STOP",
											"source": 21
										},
										{
											"begin": 924,
											"end": 1019,
											"name": "tag",
											"source": 21,
											"value": "10"
										},
										{
											"begin": 924,
											"end": 1019,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 924,
											"end": 1019,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "57"
										},
										{
											"begin": 924,
											"end": 1019,
											"name": "PUSH",
											"source": 21,
											"value": "4"
										},
										{
											"begin": 924,
											"end": 1019,
											"name": "DUP1",
											"source": 21
										},
										{
											"begin": 924,
											"end": 1019,
											"name": "CALLDATASIZE",
											"source": 21
										},
										{
											"begin": 924,
											"end": 1019,
											"name": "SUB",
											"source": 21
										},
										{
											"begin": 924,
											"end": 1019,
											"name": "DUP2",
											"source": 21
										},
										{
											"begin": 924,
											"end": 1019,
											"name": "ADD",
											"source": 21
										},
										{
											"begin": 924,
											"end": 1019,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 924,
											"end": 1019,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "58"
										},
										{
											"begin": 924,
											"end": 1019,
											"name": "SWAP2",
											"source": 21
										},
										{
											"begin": 924,
											"end": 1019,
											"name": "SWAP1",
											"source": 21
										},
										{
											"begin": 924,
											"end": 1019,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "34"
										},
										{
											"begin": 924,
											"end": 1019,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 924,
											"end": 1019,
											"name": "tag",
											"source": 21,
											"value": "58"
										},
										{
											"begin": 924,
											"end": 1019,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 924,
											"end": 1019,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "59"
										},
										{
											"begin": 924,
											"end": 1019,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 924,
											"end": 1019,
											"name": "tag",
											"source": 21,
											"value": "57"
										},
										{
											"begin": 924,
											"end": 1019,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 924,
											"end": 1019,
											"name": "STOP",
											"source": 21
										},
										{
											"begin": 618,
											"end": 705,
											"name": "tag",
											"source": 5,
											"value": "11"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 618,
											"end": 705,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 618,
											"end": 705,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 618,
											"end": 705,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 618,
											"end": 705,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 618,
											"end": 705,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 618,
											"end": 705,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 618,
											"end": 705,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "61"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 618,
											"end": 705,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 618,
											"end": 705,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "62"
										},
										{
											"begin": 618,
											"end": 705,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 618,
											"end": 705,
											"name": "tag",
											"source": 5,
											"value": "61"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 618,
											"end": 705,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "63"
										},
										{
											"begin": 618,
											"end": 705,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 618,
											"end": 705,
											"name": "tag",
											"source": 5,
											"value": "60"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 618,
											"end": 705,
											"name": "STOP",
											"source": 5
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "tag",
											"source": 12,
											"value": "12"
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "65"
										},
										{
											"begin": 1850,
											"end": 1934,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "tag",
											"source": 12,
											"value": "64"
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "66"
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "37"
										},
										{
											"begin": 1850,
											"end": 1934,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "tag",
											"source": 12,
											"value": "66"
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "RETURN",
											"source": 12
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "67"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "68"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "69"
										},
										{
											"begin": 3299,
											"end": 3415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 3,
											"value": "68"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "70"
										},
										{
											"begin": 3299,
											"end": 3415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 3,
											"value": "67"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "71"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 3299,
											"end": 3415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 3,
											"value": "71"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 2293,
											"end": 2394,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "tag",
											"source": 5,
											"value": "15"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "SUB",
											"source": 5
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "DUP2",
											"source": 5
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "ADD",
											"source": 5
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "75"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "SWAP2",
											"source": 5
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "34"
										},
										{
											"begin": 1021,
											"end": 1179,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "tag",
											"source": 5,
											"value": "75"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "76"
										},
										{
											"begin": 1021,
											"end": 1179,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "tag",
											"source": 5,
											"value": "74"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "STOP",
											"source": 5
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "tag",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "77"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "78"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "69"
										},
										{
											"begin": 2406,
											"end": 2549,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "tag",
											"source": 7,
											"value": "78"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "79"
										},
										{
											"begin": 2406,
											"end": 2549,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "tag",
											"source": 7,
											"value": "77"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "41"
										},
										{
											"begin": 2406,
											"end": 2549,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "tag",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 782,
											"end": 843,
											"name": "tag",
											"source": 21,
											"value": "17"
										},
										{
											"begin": 782,
											"end": 843,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 782,
											"end": 843,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "81"
										},
										{
											"begin": 782,
											"end": 843,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "82"
										},
										{
											"begin": 782,
											"end": 843,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 782,
											"end": 843,
											"name": "tag",
											"source": 21,
											"value": "81"
										},
										{
											"begin": 782,
											"end": 843,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 782,
											"end": 843,
											"name": "STOP",
											"source": 21
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "tag",
											"source": 17,
											"value": "18"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "83"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "84"
										},
										{
											"begin": 5144,
											"end": 5701,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "tag",
											"source": 17,
											"value": "83"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP8",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP7",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP6",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "86"
										},
										{
											"begin": 5144,
											"end": 5701,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "tag",
											"source": 17,
											"value": "85"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "RETURN",
											"source": 17
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 1638,
											"end": 1723,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "tag",
											"source": 0,
											"value": "87"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 1638,
											"end": 1723,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "tag",
											"source": 0,
											"value": "89"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "91"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "92"
										},
										{
											"begin": 2276,
											"end": 2369,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 3,
											"value": "91"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "93"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "31"
										},
										{
											"begin": 2276,
											"end": 2369,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 3,
											"value": "93"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "94"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "95"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 3,
											"value": "95"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "96"
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 3,
											"value": "94"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "97"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "37"
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 3,
											"value": "97"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "tag",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "98"
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "99"
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "100"
										},
										{
											"begin": 1680,
											"end": 2352,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "tag",
											"source": 7,
											"value": "99"
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "101"
										},
										{
											"begin": 1680,
											"end": 2352,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "tag",
											"source": 7,
											"value": "98"
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "102"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "103"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "104"
										},
										{
											"begin": 3846,
											"end": 3986,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 3,
											"value": "103"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "105"
										},
										{
											"begin": 3846,
											"end": 3986,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 3,
											"value": "102"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "106"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 3846,
											"end": 3986,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 3,
											"value": "106"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "108"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 3,
											"value": "29"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2119,
											"end": 2132,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2151,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "111"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "112"
										},
										{
											"begin": 2144,
											"end": 2156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 3,
											"value": "111"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "113"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "112"
										},
										{
											"begin": 2144,
											"end": 2156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 3,
											"value": "113"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "114"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "115"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "114"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 3,
											"value": "115"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 3,
											"value": "116"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "116"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 3,
											"value": "114"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4366,
											"end": 4370,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4382,
											"end": 4395,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4398,
											"end": 4410,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "118"
										},
										{
											"begin": 4398,
											"end": 4408,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "119"
										},
										{
											"begin": 4398,
											"end": 4410,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4398,
											"end": 4410,
											"name": "tag",
											"source": 3,
											"value": "118"
										},
										{
											"begin": 4398,
											"end": 4410,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4382,
											"end": 4410,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4382,
											"end": 4410,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "120"
										},
										{
											"begin": 4429,
											"end": 4434,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4436,
											"end": 4443,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4445,
											"end": 4450,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4420,
											"end": 4428,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "121"
										},
										{
											"begin": 4420,
											"end": 4451,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "tag",
											"source": 3,
											"value": "120"
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4468,
											"end": 4472,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3196,
											"end": 3203,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3215,
											"end": 3234,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3215,
											"end": 3234,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 3,
											"value": "45"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5126,
											"end": 5130,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5142,
											"end": 5157,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5160,
											"end": 5172,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "124"
										},
										{
											"begin": 5160,
											"end": 5170,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "119"
										},
										{
											"begin": 5160,
											"end": 5172,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5160,
											"end": 5172,
											"name": "tag",
											"source": 3,
											"value": "124"
										},
										{
											"begin": 5160,
											"end": 5172,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5142,
											"end": 5172,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5142,
											"end": 5172,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "125"
										},
										{
											"begin": 5198,
											"end": 5202,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5204,
											"end": 5211,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5213,
											"end": 5218,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5182,
											"end": 5197,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "126"
										},
										{
											"begin": 5182,
											"end": 5219,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "tag",
											"source": 3,
											"value": "125"
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "127"
										},
										{
											"begin": 5239,
											"end": 5243,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5245,
											"end": 5247,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5249,
											"end": 5254,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5229,
											"end": 5238,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "128"
										},
										{
											"begin": 5229,
											"end": 5255,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "tag",
											"source": 3,
											"value": "127"
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5272,
											"end": 5276,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 5265,
											"end": 5276,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5265,
											"end": 5276,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5265,
											"end": 5276,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "tag",
											"source": 3,
											"value": "48"
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3051,
											"end": 3056,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3075,
											"end": 3077,
											"name": "PUSH",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 3068,
											"end": 3077,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3068,
											"end": 3077,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3002,
											"end": 3084,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "tag",
											"source": 7,
											"value": "52"
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2715,
											"end": 2722,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2741,
											"end": 2761,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "131"
										},
										{
											"begin": 2741,
											"end": 2759,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "132"
										},
										{
											"begin": 2741,
											"end": 2761,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2741,
											"end": 2761,
											"name": "tag",
											"source": 7,
											"value": "131"
										},
										{
											"begin": 2741,
											"end": 2761,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2734,
											"end": 2761,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2734,
											"end": 2761,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2656,
											"end": 2768,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 851,
											"end": 916,
											"name": "tag",
											"source": 21,
											"value": "56"
										},
										{
											"begin": 851,
											"end": 916,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 898,
											"end": 908,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "137"
										},
										{
											"begin": 898,
											"end": 906,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "138"
										},
										{
											"begin": 898,
											"end": 908,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 898,
											"end": 908,
											"modifierDepth": 1,
											"name": "tag",
											"source": 21,
											"value": "137"
										},
										{
											"begin": 898,
											"end": 908,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 851,
											"end": 916,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 924,
											"end": 1019,
											"name": "tag",
											"source": 21,
											"value": "59"
										},
										{
											"begin": 924,
											"end": 1019,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 994,
											"end": 1011,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "142"
										},
										{
											"begin": 1000,
											"end": 1002,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 1004,
											"end": 1010,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 21
										},
										{
											"begin": 994,
											"end": 999,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "143"
										},
										{
											"begin": 994,
											"end": 1011,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 994,
											"end": 1011,
											"modifierDepth": 1,
											"name": "tag",
											"source": 21,
											"value": "142"
										},
										{
											"begin": 994,
											"end": 1011,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 924,
											"end": 1019,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 924,
											"end": 1019,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 924,
											"end": 1019,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 618,
											"end": 705,
											"name": "tag",
											"source": 5,
											"value": "63"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 672,
											"end": 698,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "145"
										},
										{
											"begin": 678,
											"end": 690,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "146"
										},
										{
											"begin": 678,
											"end": 688,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "119"
										},
										{
											"begin": 678,
											"end": 690,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 678,
											"end": 690,
											"name": "tag",
											"source": 5,
											"value": "146"
										},
										{
											"begin": 678,
											"end": 690,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 692,
											"end": 697,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 672,
											"end": 677,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "147"
										},
										{
											"begin": 672,
											"end": 698,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 672,
											"end": 698,
											"name": "tag",
											"source": 5,
											"value": "145"
										},
										{
											"begin": 672,
											"end": 698,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 618,
											"end": 705,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 618,
											"end": 705,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "tag",
											"source": 12,
											"value": "65"
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1897,
											"end": 1901,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1920,
											"end": 1927,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 1920,
											"end": 1927,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1920,
											"end": 1927,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1920,
											"end": 1927,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 1920,
											"end": 1927,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1920,
											"end": 1927,
											"name": "PUSH",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 1920,
											"end": 1927,
											"name": "EXP",
											"source": 12
										},
										{
											"begin": 1920,
											"end": 1927,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1920,
											"end": 1927,
											"name": "DIV",
											"source": 12
										},
										{
											"begin": 1920,
											"end": 1927,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 1920,
											"end": 1927,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 1913,
											"end": 1927,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1913,
											"end": 1927,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 1850,
											"end": 1934,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 1850,
											"end": 1934,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 3,
											"value": "70"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3364,
											"end": 3371,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3400,
											"end": 3407,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3383,
											"end": 3408,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3383,
											"end": 3408,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "151"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "151"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "153"
										},
										{
											"begin": 2384,
											"end": 2385,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2357,
											"end": 2375,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "154"
										},
										{
											"begin": 2357,
											"end": 2387,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "153"
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "tag",
											"source": 5,
											"value": "76"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1096,
											"end": 1141,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "156"
										},
										{
											"begin": 1112,
											"end": 1119,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1121,
											"end": 1133,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "157"
										},
										{
											"begin": 1121,
											"end": 1131,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "119"
										},
										{
											"begin": 1121,
											"end": 1133,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1121,
											"end": 1133,
											"name": "tag",
											"source": 5,
											"value": "157"
										},
										{
											"begin": 1121,
											"end": 1133,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1135,
											"end": 1140,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1096,
											"end": 1111,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "126"
										},
										{
											"begin": 1096,
											"end": 1141,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1096,
											"end": 1141,
											"name": "tag",
											"source": 5,
											"value": "156"
										},
										{
											"begin": 1096,
											"end": 1141,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1151,
											"end": 1172,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "158"
										},
										{
											"begin": 1157,
											"end": 1164,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1166,
											"end": 1171,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1151,
											"end": 1156,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "147"
										},
										{
											"begin": 1151,
											"end": 1172,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1151,
											"end": 1172,
											"name": "tag",
											"source": 5,
											"value": "158"
										},
										{
											"begin": 1151,
											"end": 1172,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1021,
											"end": 1179,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "tag",
											"source": 7,
											"value": "79"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2497,
											"end": 2504,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2523,
											"end": 2542,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "160"
										},
										{
											"begin": 2536,
											"end": 2541,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2523,
											"end": 2535,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "161"
										},
										{
											"begin": 2523,
											"end": 2542,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2523,
											"end": 2542,
											"name": "tag",
											"source": 7,
											"value": "160"
										},
										{
											"begin": 2523,
											"end": 2542,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2516,
											"end": 2542,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2516,
											"end": 2542,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2406,
											"end": 2549,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 782,
											"end": 843,
											"name": "tag",
											"source": 21,
											"value": "82"
										},
										{
											"begin": 782,
											"end": 843,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "163"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 827,
											"end": 835,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "165"
										},
										{
											"begin": 827,
											"end": 833,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "166"
										},
										{
											"begin": 827,
											"end": 835,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 827,
											"end": 835,
											"modifierDepth": 1,
											"name": "tag",
											"source": 21,
											"value": "165"
										},
										{
											"begin": 827,
											"end": 835,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 782,
											"end": 843,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "tag",
											"source": 17,
											"value": "84"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5242,
											"end": 5255,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 5269,
											"end": 5287,
											"name": "PUSH",
											"source": 17,
											"value": "60"
										},
										{
											"begin": 5301,
											"end": 5322,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 5336,
											"end": 5351,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 5365,
											"end": 5390,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 5404,
											"end": 5416,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 5430,
											"end": 5457,
											"name": "PUSH",
											"source": 17,
											"value": "60"
										},
										{
											"begin": 5533,
											"end": 5546,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "168"
										},
										{
											"begin": 5533,
											"end": 5544,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "169"
										},
										{
											"begin": 5533,
											"end": 5546,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 5533,
											"end": 5546,
											"name": "tag",
											"source": 17,
											"value": "168"
										},
										{
											"begin": 5533,
											"end": 5546,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "170"
										},
										{
											"begin": 5560,
											"end": 5574,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "171"
										},
										{
											"begin": 5560,
											"end": 5576,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "tag",
											"source": 17,
											"value": "170"
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5590,
											"end": 5603,
											"name": "CHAINID",
											"source": 17
										},
										{
											"begin": 5625,
											"end": 5629,
											"name": "ADDRESS",
											"source": 17
										},
										{
											"begin": 5652,
											"end": 5653,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 5644,
											"end": 5654,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 5644,
											"end": 5654,
											"name": "SHL",
											"source": 17
										},
										{
											"begin": 5682,
											"end": 5683,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "GT",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "172"
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "173"
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "174"
										},
										{
											"begin": 5668,
											"end": 5684,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "tag",
											"source": 17,
											"value": "173"
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "tag",
											"source": 17,
											"value": "172"
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "MUL",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "175"
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "MUL",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "CALLDATASIZE",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "CALLDATACOPY",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP3",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "tag",
											"source": 17,
											"value": "175"
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "PUSH",
											"source": 17,
											"value": "F00000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP6",
											"source": 17
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP7",
											"source": 17
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP7",
											"source": 17
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP7",
											"source": 17
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP7",
											"source": 17
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP7",
											"source": 17
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP7",
											"source": 17
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP7",
											"source": 17
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP6",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP7",
											"source": 17
										},
										{
											"begin": 5144,
											"end": 5701,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "tag",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1684,
											"end": 1691,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1716,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1703,
											"end": 1716,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 3,
											"value": "92"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2323,
											"end": 2336,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2355,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "178"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "112"
										},
										{
											"begin": 2348,
											"end": 2362,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "tag",
											"source": 3,
											"value": "178"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "179"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "112"
										},
										{
											"begin": 2348,
											"end": 2362,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "tag",
											"source": 3,
											"value": "179"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "180"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "181"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "180"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "tag",
											"source": 3,
											"value": "181"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "tag",
											"source": 3,
											"value": "182"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "182"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "tag",
											"source": 3,
											"value": "180"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 3,
											"value": "96"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3679,
											"end": 3683,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3695,
											"end": 3708,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3711,
											"end": 3723,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "184"
										},
										{
											"begin": 3711,
											"end": 3721,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "119"
										},
										{
											"begin": 3711,
											"end": 3723,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3711,
											"end": 3723,
											"name": "tag",
											"source": 3,
											"value": "184"
										},
										{
											"begin": 3711,
											"end": 3723,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3695,
											"end": 3723,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3695,
											"end": 3723,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3733,
											"end": 3760,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "185"
										},
										{
											"begin": 3743,
											"end": 3748,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3750,
											"end": 3752,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 3754,
											"end": 3759,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 3733,
											"end": 3742,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "128"
										},
										{
											"begin": 3733,
											"end": 3760,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3733,
											"end": 3760,
											"name": "tag",
											"source": 3,
											"value": "185"
										},
										{
											"begin": 3733,
											"end": 3760,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3777,
											"end": 3781,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 3770,
											"end": 3781,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3770,
											"end": 3781,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3770,
											"end": 3781,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "tag",
											"source": 7,
											"value": "101"
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1901,
											"end": 1909,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1883,
											"end": 1898,
											"name": "TIMESTAMP",
											"source": 7
										},
										{
											"begin": 1883,
											"end": 1909,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 1879,
											"end": 1976,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1879,
											"end": 1976,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "187"
										},
										{
											"begin": 1879,
											"end": 1976,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1956,
											"end": 1964,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "PUSH",
											"source": 7,
											"value": "6279130200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "188"
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "41"
										},
										{
											"begin": 1932,
											"end": 1965,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "tag",
											"source": 7,
											"value": "188"
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1879,
											"end": 1976,
											"name": "tag",
											"source": 7,
											"value": "187"
										},
										{
											"begin": 1879,
											"end": 1976,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1986,
											"end": 2004,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1022,
											"end": 1117,
											"name": "PUSH",
											"source": 7,
											"value": "6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9"
										},
										{
											"begin": 2045,
											"end": 2050,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 2052,
											"end": 2059,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 2061,
											"end": 2066,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 2068,
											"end": 2084,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "189"
										},
										{
											"begin": 2078,
											"end": 2083,
											"name": "DUP13",
											"source": 7
										},
										{
											"begin": 2068,
											"end": 2077,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "190"
										},
										{
											"begin": 2068,
											"end": 2084,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2068,
											"end": 2084,
											"name": "tag",
											"source": 7,
											"value": "189"
										},
										{
											"begin": 2068,
											"end": 2084,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2086,
											"end": 2094,
											"name": "DUP10",
											"source": 7
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "191"
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "SWAP7",
											"source": 7
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "SWAP6",
											"source": 7
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "SWAP5",
											"source": 7
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "192"
										},
										{
											"begin": 2017,
											"end": 2095,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "tag",
											"source": 7,
											"value": "191"
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2007,
											"end": 2096,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2007,
											"end": 2096,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2007,
											"end": 2096,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2007,
											"end": 2096,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2007,
											"end": 2096,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2007,
											"end": 2096,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 1986,
											"end": 2096,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1986,
											"end": 2096,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2107,
											"end": 2119,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2122,
											"end": 2150,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "193"
										},
										{
											"begin": 2139,
											"end": 2149,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2122,
											"end": 2138,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "194"
										},
										{
											"begin": 2122,
											"end": 2150,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2122,
											"end": 2150,
											"name": "tag",
											"source": 7,
											"value": "193"
										},
										{
											"begin": 2122,
											"end": 2150,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2107,
											"end": 2150,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2107,
											"end": 2150,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2161,
											"end": 2175,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2178,
											"end": 2206,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "195"
										},
										{
											"begin": 2192,
											"end": 2196,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2198,
											"end": 2199,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 2201,
											"end": 2202,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 2204,
											"end": 2205,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 2178,
											"end": 2191,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "196"
										},
										{
											"begin": 2178,
											"end": 2206,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2178,
											"end": 2206,
											"name": "tag",
											"source": 7,
											"value": "195"
										},
										{
											"begin": 2178,
											"end": 2206,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2161,
											"end": 2206,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2161,
											"end": 2206,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2230,
											"end": 2235,
											"name": "DUP10",
											"source": 7
										},
										{
											"begin": 2220,
											"end": 2235,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2220,
											"end": 2235,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2220,
											"end": 2226,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2220,
											"end": 2235,
											"name": "PUSH",
											"source": 7,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2220,
											"end": 2235,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2220,
											"end": 2235,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 2216,
											"end": 2304,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "197"
										},
										{
											"begin": 2216,
											"end": 2304,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2279,
											"end": 2285,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2287,
											"end": 2292,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "PUSH",
											"source": 7,
											"value": "4B800E4600000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "198"
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "199"
										},
										{
											"begin": 2258,
											"end": 2293,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "tag",
											"source": 7,
											"value": "198"
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2216,
											"end": 2304,
											"name": "tag",
											"source": 7,
											"value": "197"
										},
										{
											"begin": 2216,
											"end": 2304,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2314,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "200"
										},
										{
											"begin": 2323,
											"end": 2328,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 2330,
											"end": 2337,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 2339,
											"end": 2344,
											"name": "DUP11",
											"source": 7
										},
										{
											"begin": 2314,
											"end": 2322,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "121"
										},
										{
											"begin": 2314,
											"end": 2345,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2314,
											"end": 2345,
											"name": "tag",
											"source": 7,
											"value": "200"
										},
										{
											"begin": 2314,
											"end": 2345,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1869,
											"end": 2352,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1869,
											"end": 2352,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1869,
											"end": 2352,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1680,
											"end": 2352,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 3,
											"value": "105"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3926,
											"end": 3933,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3952,
											"end": 3963,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3964,
											"end": 3969,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3971,
											"end": 3978,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3945,
											"end": 3979,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3945,
											"end": 3979,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "109"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "203"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "203"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2647,
											"end": 2648,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2627,
											"end": 2649,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2627,
											"end": 2649,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2627,
											"end": 2635,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2627,
											"end": 2649,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2627,
											"end": 2649,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2627,
											"end": 2649,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "205"
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2700,
											"end": 2701,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "1E4FBDF700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "206"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 2672,
											"end": 2703,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "206"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "205"
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "207"
										},
										{
											"begin": 2742,
											"end": 2750,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2741,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "154"
										},
										{
											"begin": 2723,
											"end": 2751,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "207"
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 656,
											"end": 752,
											"name": "tag",
											"source": 10,
											"value": "119"
										},
										{
											"begin": 656,
											"end": 752,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 709,
											"end": 716,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 728,
											"end": 745,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 728,
											"end": 745,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 656,
											"end": 752,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 656,
											"end": 752,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "tag",
											"source": 3,
											"value": "121"
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "210"
										},
										{
											"begin": 9082,
											"end": 9087,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 9089,
											"end": 9096,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 9098,
											"end": 9103,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 9105,
											"end": 9109,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 9073,
											"end": 9081,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "211"
										},
										{
											"begin": 9073,
											"end": 9110,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "tag",
											"source": 3,
											"value": "210"
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 8989,
											"end": 9117,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "tag",
											"source": 3,
											"value": "126"
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10762,
											"end": 10786,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10789,
											"end": 10814,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "213"
										},
										{
											"begin": 10799,
											"end": 10804,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 10806,
											"end": 10813,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 10789,
											"end": 10798,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "105"
										},
										{
											"begin": 10789,
											"end": 10814,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 10789,
											"end": 10814,
											"name": "tag",
											"source": 3,
											"value": "213"
										},
										{
											"begin": 10789,
											"end": 10814,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10762,
											"end": 10814,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10762,
											"end": 10814,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10848,
											"end": 10865,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10828,
											"end": 10844,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10828,
											"end": 10865,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "214"
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10904,
											"end": 10909,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10885,
											"end": 10901,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10885,
											"end": 10909,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "215"
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10963,
											"end": 10970,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10972,
											"end": 10988,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10990,
											"end": 10995,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 3,
											"value": "FB8F41B200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "216"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "217"
										},
										{
											"begin": 10936,
											"end": 10996,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "tag",
											"source": 3,
											"value": "216"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "tag",
											"source": 3,
											"value": "215"
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "218"
										},
										{
											"begin": 11061,
											"end": 11066,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11068,
											"end": 11075,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11096,
											"end": 11101,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11077,
											"end": 11093,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11077,
											"end": 11101,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 11103,
											"end": 11108,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 11052,
											"end": 11060,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "211"
										},
										{
											"begin": 11052,
											"end": 11109,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "tag",
											"source": 3,
											"value": "218"
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "tag",
											"source": 3,
											"value": "214"
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10752,
											"end": 11140,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "tag",
											"source": 3,
											"value": "128"
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5755,
											"end": 5756,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5739,
											"end": 5743,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "220"
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5807,
											"end": 5808,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 3,
											"value": "96C6FD1E00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "221"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "90"
										},
										{
											"begin": 5780,
											"end": 5810,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "tag",
											"source": 3,
											"value": "221"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "tag",
											"source": 3,
											"value": "220"
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5848,
											"end": 5849,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5834,
											"end": 5836,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "222"
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5902,
											"end": 5903,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 3,
											"value": "EC442F0500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "223"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "90"
										},
										{
											"begin": 5873,
											"end": 5905,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "tag",
											"source": 3,
											"value": "223"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "tag",
											"source": 3,
											"value": "222"
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5925,
											"end": 5949,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "224"
										},
										{
											"begin": 5933,
											"end": 5937,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5939,
											"end": 5941,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5943,
											"end": 5948,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5925,
											"end": 5932,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "225"
										},
										{
											"begin": 5925,
											"end": 5949,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5925,
											"end": 5949,
											"name": "tag",
											"source": 3,
											"value": "224"
										},
										{
											"begin": 5925,
											"end": 5949,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5656,
											"end": 5956,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3845,
											"end": 4107,
											"name": "tag",
											"source": 17,
											"value": "132"
										},
										{
											"begin": 3845,
											"end": 4107,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3898,
											"end": 3905,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 3938,
											"end": 3949,
											"name": "PUSHIMMUTABLE",
											"source": 17,
											"value": "2368"
										},
										{
											"begin": 3921,
											"end": 3949,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3921,
											"end": 3949,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 3929,
											"end": 3933,
											"name": "ADDRESS",
											"source": 17
										},
										{
											"begin": 3921,
											"end": 3949,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3921,
											"end": 3949,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 3921,
											"end": 3949,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "227"
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3970,
											"end": 3984,
											"name": "PUSHIMMUTABLE",
											"source": 17,
											"value": "2366"
										},
										{
											"begin": 3953,
											"end": 3966,
											"name": "CHAINID",
											"source": 17
										},
										{
											"begin": 3953,
											"end": 3984,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "tag",
											"source": 17,
											"value": "227"
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "ISZERO",
											"source": 17
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "228"
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "JUMPI",
											"source": 17
										},
										{
											"begin": 4007,
											"end": 4029,
											"name": "PUSHIMMUTABLE",
											"source": 17,
											"value": "2364"
										},
										{
											"begin": 4000,
											"end": 4029,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 4000,
											"end": 4029,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4000,
											"end": 4029,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "226"
										},
										{
											"begin": 4000,
											"end": 4029,
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "tag",
											"source": 17,
											"value": "228"
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4067,
											"end": 4090,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "230"
										},
										{
											"begin": 4067,
											"end": 4088,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "231"
										},
										{
											"begin": 4067,
											"end": 4090,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4067,
											"end": 4090,
											"name": "tag",
											"source": 17,
											"value": "230"
										},
										{
											"begin": 4067,
											"end": 4090,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4060,
											"end": 4090,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 4060,
											"end": 4090,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 3845,
											"end": 4107,
											"name": "tag",
											"source": 17,
											"value": "226"
										},
										{
											"begin": 3845,
											"end": 4107,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 3845,
											"end": 4107,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 3845,
											"end": 4107,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "tag",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1866,
											"end": 1878,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "233"
										},
										{
											"begin": 1866,
											"end": 1876,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 1866,
											"end": 1878,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1866,
											"end": 1878,
											"name": "tag",
											"source": 0,
											"value": "233"
										},
										{
											"begin": 1866,
											"end": 1878,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1855,
											"end": 1862,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "234"
										},
										{
											"begin": 1855,
											"end": 1860,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "88"
										},
										{
											"begin": 1855,
											"end": 1862,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1855,
											"end": 1862,
											"name": "tag",
											"source": 0,
											"value": "234"
										},
										{
											"begin": 1855,
											"end": 1862,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "235"
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1928,
											"end": 1940,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "236"
										},
										{
											"begin": 1928,
											"end": 1938,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 1928,
											"end": 1940,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1928,
											"end": 1940,
											"name": "tag",
											"source": 0,
											"value": "236"
										},
										{
											"begin": 1928,
											"end": 1940,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "118CDAA700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "237"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "90"
										},
										{
											"begin": 1901,
											"end": 1941,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "tag",
											"source": 0,
											"value": "237"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "tag",
											"source": 0,
											"value": "235"
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1796,
											"end": 1958,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2710,
											"end": 2827,
											"name": "tag",
											"source": 12,
											"value": "138"
										},
										{
											"begin": 2710,
											"end": 2827,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1721,
											"end": 1737,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "239"
										},
										{
											"begin": 1721,
											"end": 1735,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "240"
										},
										{
											"begin": 1721,
											"end": 1737,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1721,
											"end": 1737,
											"name": "tag",
											"source": 12,
											"value": "239"
										},
										{
											"begin": 1721,
											"end": 1737,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2778,
											"end": 2783,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2768,
											"end": 2775,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 2768,
											"end": 2775,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2768,
											"end": 2783,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 2768,
											"end": 2783,
											"modifierDepth": 1,
											"name": "EXP",
											"source": 12
										},
										{
											"begin": 2768,
											"end": 2783,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2768,
											"end": 2783,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2768,
											"end": 2783,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2768,
											"end": 2783,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 2768,
											"end": 2783,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 2768,
											"end": 2783,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 2768,
											"end": 2783,
											"modifierDepth": 1,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2768,
											"end": 2783,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2768,
											"end": 2783,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2768,
											"end": 2783,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2768,
											"end": 2783,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2768,
											"end": 2783,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 2768,
											"end": 2783,
											"modifierDepth": 1,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 2768,
											"end": 2783,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2768,
											"end": 2783,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 2768,
											"end": 2783,
											"modifierDepth": 1,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2798,
											"end": 2820,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA"
										},
										{
											"begin": 2807,
											"end": 2819,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "242"
										},
										{
											"begin": 2807,
											"end": 2817,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "119"
										},
										{
											"begin": 2807,
											"end": 2819,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2807,
											"end": 2819,
											"modifierDepth": 1,
											"name": "tag",
											"source": 12,
											"value": "242"
										},
										{
											"begin": 2807,
											"end": 2819,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2798,
											"end": 2820,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2798,
											"end": 2820,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2798,
											"end": 2820,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "243"
										},
										{
											"begin": 2798,
											"end": 2820,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2798,
											"end": 2820,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2798,
											"end": 2820,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "90"
										},
										{
											"begin": 2798,
											"end": 2820,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2798,
											"end": 2820,
											"modifierDepth": 1,
											"name": "tag",
											"source": 12,
											"value": "243"
										},
										{
											"begin": 2798,
											"end": 2820,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2798,
											"end": 2820,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2798,
											"end": 2820,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2798,
											"end": 2820,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2798,
											"end": 2820,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2798,
											"end": 2820,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2798,
											"end": 2820,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2798,
											"end": 2820,
											"modifierDepth": 1,
											"name": "LOG1",
											"source": 12
										},
										{
											"begin": 2710,
											"end": 2827,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 7721,
											"end": 7929,
											"name": "tag",
											"source": 3,
											"value": "143"
										},
										{
											"begin": 7721,
											"end": 7929,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7810,
											"end": 7811,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7791,
											"end": 7798,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "245"
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 7864,
											"end": 7865,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 3,
											"value": "EC442F0500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "246"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "90"
										},
										{
											"begin": 7835,
											"end": 7867,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "tag",
											"source": 3,
											"value": "246"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7835,
											"end": 7867,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "tag",
											"source": 3,
											"value": "245"
										},
										{
											"begin": 7787,
											"end": 7878,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7887,
											"end": 7922,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "247"
										},
										{
											"begin": 7903,
											"end": 7904,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7907,
											"end": 7914,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7916,
											"end": 7921,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7887,
											"end": 7894,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "225"
										},
										{
											"begin": 7887,
											"end": 7922,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 7887,
											"end": 7922,
											"name": "tag",
											"source": 3,
											"value": "247"
										},
										{
											"begin": 7887,
											"end": 7922,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7721,
											"end": 7929,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7721,
											"end": 7929,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7721,
											"end": 7929,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "tag",
											"source": 3,
											"value": "147"
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8336,
											"end": 8337,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 8317,
											"end": 8324,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "249"
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 8388,
											"end": 8389,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 3,
											"value": "96C6FD1E00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "250"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "90"
										},
										{
											"begin": 8361,
											"end": 8391,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "tag",
											"source": 3,
											"value": "250"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "tag",
											"source": 3,
											"value": "249"
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8411,
											"end": 8446,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "251"
										},
										{
											"begin": 8419,
											"end": 8426,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 8436,
											"end": 8437,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 8440,
											"end": 8445,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 8411,
											"end": 8418,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "225"
										},
										{
											"begin": 8411,
											"end": 8446,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 8411,
											"end": 8446,
											"name": "tag",
											"source": 3,
											"value": "251"
										},
										{
											"begin": 8411,
											"end": 8446,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 8247,
											"end": 8453,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "tag",
											"source": 0,
											"value": "154"
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2985,
											"end": 3001,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2985,
											"end": 3010,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2985,
											"end": 3010,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3029,
											"end": 3037,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3026,
											"name": "PUSH",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 3020,
											"end": 3026,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3083,
											"end": 3091,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3073,
											"end": 3081,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2975,
											"end": 3099,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2912,
											"end": 3099,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 538,
											"end": 645,
											"name": "tag",
											"source": 11,
											"value": "161"
										},
										{
											"begin": 538,
											"end": 645,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 598,
											"end": 605,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 624,
											"end": 631,
											"name": "PUSH",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 624,
											"end": 638,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 632,
											"end": 637,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 624,
											"end": 638,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 624,
											"end": 638,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 624,
											"end": 638,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 624,
											"end": 638,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 624,
											"end": 638,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 624,
											"end": 638,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 624,
											"end": 638,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 624,
											"end": 638,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 624,
											"end": 638,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 624,
											"end": 638,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 624,
											"end": 638,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 624,
											"end": 638,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 624,
											"end": 638,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 624,
											"end": 638,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 624,
											"end": 638,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 624,
											"end": 638,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 617,
											"end": 638,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 617,
											"end": 638,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 538,
											"end": 645,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 538,
											"end": 645,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 538,
											"end": 645,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 538,
											"end": 645,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2463,
											"end": 2578,
											"name": "tag",
											"source": 12,
											"value": "166"
										},
										{
											"begin": 2463,
											"end": 2578,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1474,
											"end": 1493,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "255"
										},
										{
											"begin": 1474,
											"end": 1491,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "256"
										},
										{
											"begin": 1474,
											"end": 1493,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1474,
											"end": 1493,
											"name": "tag",
											"source": 12,
											"value": "255"
										},
										{
											"begin": 1474,
											"end": 1493,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2532,
											"end": 2536,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "1"
										},
										{
											"begin": 2522,
											"end": 2529,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "5"
										},
										{
											"begin": 2522,
											"end": 2529,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 2522,
											"end": 2536,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "100"
										},
										{
											"begin": 2522,
											"end": 2536,
											"modifierDepth": 1,
											"name": "EXP",
											"source": 12
										},
										{
											"begin": 2522,
											"end": 2536,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2522,
											"end": 2536,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 12
										},
										{
											"begin": 2522,
											"end": 2536,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2522,
											"end": 2536,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "FF"
										},
										{
											"begin": 2522,
											"end": 2536,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 2522,
											"end": 2536,
											"modifierDepth": 1,
											"name": "NOT",
											"source": 12
										},
										{
											"begin": 2522,
											"end": 2536,
											"modifierDepth": 1,
											"name": "AND",
											"source": 12
										},
										{
											"begin": 2522,
											"end": 2536,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2522,
											"end": 2536,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 12
										},
										{
											"begin": 2522,
											"end": 2536,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2522,
											"end": 2536,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2522,
											"end": 2536,
											"modifierDepth": 1,
											"name": "MUL",
											"source": 12
										},
										{
											"begin": 2522,
											"end": 2536,
											"modifierDepth": 1,
											"name": "OR",
											"source": 12
										},
										{
											"begin": 2522,
											"end": 2536,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2522,
											"end": 2536,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 12
										},
										{
											"begin": 2522,
											"end": 2536,
											"modifierDepth": 1,
											"name": "POP",
											"source": 12
										},
										{
											"begin": 2551,
											"end": 2571,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258"
										},
										{
											"begin": 2558,
											"end": 2570,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "258"
										},
										{
											"begin": 2558,
											"end": 2568,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "119"
										},
										{
											"begin": 2558,
											"end": 2570,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2558,
											"end": 2570,
											"modifierDepth": 1,
											"name": "tag",
											"source": 12,
											"value": "258"
										},
										{
											"begin": 2558,
											"end": 2570,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2551,
											"end": 2571,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2551,
											"end": 2571,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2551,
											"end": 2571,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "259"
										},
										{
											"begin": 2551,
											"end": 2571,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2551,
											"end": 2571,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2551,
											"end": 2571,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "90"
										},
										{
											"begin": 2551,
											"end": 2571,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2551,
											"end": 2571,
											"modifierDepth": 1,
											"name": "tag",
											"source": 12,
											"value": "259"
										},
										{
											"begin": 2551,
											"end": 2571,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2551,
											"end": 2571,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2551,
											"end": 2571,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2551,
											"end": 2571,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2551,
											"end": 2571,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2551,
											"end": 2571,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2551,
											"end": 2571,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2551,
											"end": 2571,
											"modifierDepth": 1,
											"name": "LOG1",
											"source": 12
										},
										{
											"begin": 2463,
											"end": 2578,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 6021,
											"end": 6147,
											"name": "tag",
											"source": 17,
											"value": "169"
										},
										{
											"begin": 6021,
											"end": 6147,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6067,
											"end": 6080,
											"name": "PUSH",
											"source": 17,
											"value": "60"
										},
										{
											"begin": 6099,
											"end": 6140,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "261"
										},
										{
											"begin": 6126,
											"end": 6139,
											"name": "PUSH",
											"source": 17,
											"value": "6"
										},
										{
											"begin": 6099,
											"end": 6104,
											"name": "PUSHIMMUTABLE",
											"source": 17,
											"value": "2375"
										},
										{
											"begin": 6099,
											"end": 6125,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "262"
										},
										{
											"begin": 6099,
											"end": 6125,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 6099,
											"end": 6140,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 6099,
											"end": 6140,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 6099,
											"end": 6140,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6099,
											"end": 6140,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 6099,
											"end": 6140,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6099,
											"end": 6140,
											"name": "tag",
											"source": 17,
											"value": "261"
										},
										{
											"begin": 6099,
											"end": 6140,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6092,
											"end": 6140,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 6092,
											"end": 6140,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6021,
											"end": 6147,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 6021,
											"end": 6147,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6473,
											"end": 6608,
											"name": "tag",
											"source": 17,
											"value": "171"
										},
										{
											"begin": 6473,
											"end": 6608,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6522,
											"end": 6535,
											"name": "PUSH",
											"source": 17,
											"value": "60"
										},
										{
											"begin": 6554,
											"end": 6601,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "264"
										},
										{
											"begin": 6584,
											"end": 6600,
											"name": "PUSH",
											"source": 17,
											"value": "7"
										},
										{
											"begin": 6554,
											"end": 6562,
											"name": "PUSHIMMUTABLE",
											"source": 17,
											"value": "2378"
										},
										{
											"begin": 6554,
											"end": 6583,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "262"
										},
										{
											"begin": 6554,
											"end": 6583,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 6554,
											"end": 6601,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 6554,
											"end": 6601,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 6554,
											"end": 6601,
											"name": "PUSH",
											"source": 17,
											"value": "FFFFFFFF"
										},
										{
											"begin": 6554,
											"end": 6601,
											"name": "AND",
											"source": 17
										},
										{
											"begin": 6554,
											"end": 6601,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6554,
											"end": 6601,
											"name": "tag",
											"source": 17,
											"value": "264"
										},
										{
											"begin": 6554,
											"end": 6601,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 6547,
											"end": 6601,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 6547,
											"end": 6601,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 6473,
											"end": 6608,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 6473,
											"end": 6608,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 759,
											"end": 1154,
											"name": "tag",
											"source": 11,
											"value": "190"
										},
										{
											"begin": 759,
											"end": 1154,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 819,
											"end": 826,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1121,
											"end": 1128,
											"name": "PUSH",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1129,
											"end": 1134,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "PUSH",
											"source": 11,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SSTORE",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1137,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 1114,
											"end": 1137,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1154,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1154,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1154,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 759,
											"end": 1154,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 4917,
											"end": 5093,
											"name": "tag",
											"source": 17,
											"value": "194"
										},
										{
											"begin": 4917,
											"end": 5093,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4994,
											"end": 5001,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 5020,
											"end": 5086,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "267"
										},
										{
											"begin": 5053,
											"end": 5073,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "268"
										},
										{
											"begin": 5053,
											"end": 5071,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "132"
										},
										{
											"begin": 5053,
											"end": 5073,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 5053,
											"end": 5073,
											"name": "tag",
											"source": 17,
											"value": "268"
										},
										{
											"begin": 5053,
											"end": 5073,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5075,
											"end": 5085,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 5020,
											"end": 5052,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "269"
										},
										{
											"begin": 5020,
											"end": 5086,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 5020,
											"end": 5086,
											"name": "tag",
											"source": 17,
											"value": "267"
										},
										{
											"begin": 5020,
											"end": 5086,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 5013,
											"end": 5086,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 5013,
											"end": 5086,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4917,
											"end": 5093,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 4917,
											"end": 5093,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 4917,
											"end": 5093,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4917,
											"end": 5093,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 6803,
											"end": 7063,
											"name": "tag",
											"source": 16,
											"value": "196"
										},
										{
											"begin": 6803,
											"end": 7063,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6888,
											"end": 6895,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6908,
											"end": 6925,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6927,
											"end": 6945,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6947,
											"end": 6963,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6967,
											"end": 6992,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "271"
										},
										{
											"begin": 6978,
											"end": 6982,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 6984,
											"end": 6985,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 6987,
											"end": 6988,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 6990,
											"end": 6991,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 6967,
											"end": 6977,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "272"
										},
										{
											"begin": 6967,
											"end": 6992,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 6967,
											"end": 6992,
											"name": "tag",
											"source": 16,
											"value": "271"
										},
										{
											"begin": 6967,
											"end": 6992,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7002,
											"end": 7030,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "273"
										},
										{
											"begin": 7014,
											"end": 7019,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 7021,
											"end": 7029,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 7002,
											"end": 7013,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "274"
										},
										{
											"begin": 7002,
											"end": 7030,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7002,
											"end": 7030,
											"name": "tag",
											"source": 16,
											"value": "273"
										},
										{
											"begin": 7002,
											"end": 7030,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7047,
											"end": 7056,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 7040,
											"end": 7056,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 7040,
											"end": 7056,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7040,
											"end": 7056,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7040,
											"end": 7056,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7040,
											"end": 7056,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6803,
											"end": 7063,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 6803,
											"end": 7063,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 6803,
											"end": 7063,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6803,
											"end": 7063,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6803,
											"end": 7063,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6803,
											"end": 7063,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6803,
											"end": 7063,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "tag",
											"source": 3,
											"value": "211"
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10078,
											"end": 10079,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10061,
											"end": 10066,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "276"
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10132,
											"end": 10133,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 3,
											"value": "E602DF0500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "277"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "90"
										},
										{
											"begin": 10103,
											"end": 10135,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "tag",
											"source": 3,
											"value": "277"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "tag",
											"source": 3,
											"value": "276"
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10178,
											"end": 10179,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10159,
											"end": 10166,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "278"
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10231,
											"end": 10232,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 3,
											"value": "94280D6200000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "279"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "90"
										},
										{
											"begin": 10203,
											"end": 10234,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "tag",
											"source": 3,
											"value": "279"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "tag",
											"source": 3,
											"value": "278"
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10284,
											"end": 10289,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10265,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10266,
											"end": 10271,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10273,
											"end": 10280,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10303,
											"end": 10312,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "280"
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10349,
											"end": 10356,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10342,
											"end": 10347,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 3,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10358,
											"end": 10363,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "281"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 10333,
											"end": 10364,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "tag",
											"source": 3,
											"value": "281"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "tag",
											"source": 3,
											"value": "280"
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9949,
											"end": 10381,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1097,
											"end": 1267,
											"name": "tag",
											"source": 21,
											"value": "225"
										},
										{
											"begin": 1097,
											"end": 1267,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1229,
											"end": 1259,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "283"
										},
										{
											"begin": 1243,
											"end": 1247,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 1249,
											"end": 1251,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 1253,
											"end": 1258,
											"name": "DUP4",
											"source": 21
										},
										{
											"begin": 1229,
											"end": 1242,
											"name": "PUSH [tag]",
											"source": 21,
											"value": "284"
										},
										{
											"begin": 1229,
											"end": 1259,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 1229,
											"end": 1259,
											"name": "tag",
											"source": 21,
											"value": "283"
										},
										{
											"begin": 1229,
											"end": 1259,
											"name": "JUMPDEST",
											"source": 21
										},
										{
											"begin": 1097,
											"end": 1267,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1097,
											"end": 1267,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1097,
											"end": 1267,
											"name": "POP",
											"source": 21
										},
										{
											"begin": 1097,
											"end": 1267,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 21
										},
										{
											"begin": 4113,
											"end": 4292,
											"name": "tag",
											"source": 17,
											"value": "231"
										},
										{
											"begin": 4113,
											"end": 4292,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4168,
											"end": 4175,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "PUSH",
											"source": 17,
											"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
										},
										{
											"begin": 4226,
											"end": 4237,
											"name": "PUSHIMMUTABLE",
											"source": 17,
											"value": "2370"
										},
										{
											"begin": 4239,
											"end": 4253,
											"name": "PUSHIMMUTABLE",
											"source": 17,
											"value": "2372"
										},
										{
											"begin": 4255,
											"end": 4268,
											"name": "CHAINID",
											"source": 17
										},
										{
											"begin": 4278,
											"end": 4282,
											"name": "ADDRESS",
											"source": 17
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "286"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "SWAP6",
											"source": 17
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "SWAP5",
											"source": 17
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "SWAP4",
											"source": 17
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "SWAP3",
											"source": 17
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "SWAP2",
											"source": 17
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH [tag]",
											"source": 17,
											"value": "287"
										},
										{
											"begin": 4204,
											"end": 4284,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "tag",
											"source": 17,
											"value": "286"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "JUMPDEST",
											"source": 17
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP4",
											"source": 17
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "SUB",
											"source": 17
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP2",
											"source": 17
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "MLOAD",
											"source": 17
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "PUSH",
											"source": 17,
											"value": "20"
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "ADD",
											"source": 17
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "KECCAK256",
											"source": 17
										},
										{
											"begin": 4187,
											"end": 4285,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 4187,
											"end": 4285,
											"name": "POP",
											"source": 17
										},
										{
											"begin": 4113,
											"end": 4292,
											"name": "SWAP1",
											"source": 17
										},
										{
											"begin": 4113,
											"end": 4292,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 17
										},
										{
											"begin": 2202,
											"end": 2328,
											"name": "tag",
											"source": 12,
											"value": "240"
										},
										{
											"begin": 2202,
											"end": 2328,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2265,
											"end": 2273,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "289"
										},
										{
											"begin": 2265,
											"end": 2271,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "65"
										},
										{
											"begin": 2265,
											"end": 2273,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2265,
											"end": 2273,
											"name": "tag",
											"source": 12,
											"value": "289"
										},
										{
											"begin": 2265,
											"end": 2273,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2260,
											"end": 2322,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "290"
										},
										{
											"begin": 2260,
											"end": 2322,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "PUSH",
											"source": 12,
											"value": "8DFC202B00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2296,
											"end": 2311,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2260,
											"end": 2322,
											"name": "tag",
											"source": 12,
											"value": "290"
										},
										{
											"begin": 2260,
											"end": 2322,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2202,
											"end": 2328,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2002,
											"end": 2130,
											"name": "tag",
											"source": 12,
											"value": "256"
										},
										{
											"begin": 2002,
											"end": 2130,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2067,
											"end": 2075,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "292"
										},
										{
											"begin": 2067,
											"end": 2073,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "65"
										},
										{
											"begin": 2067,
											"end": 2075,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 2067,
											"end": 2075,
											"name": "tag",
											"source": 12,
											"value": "292"
										},
										{
											"begin": 2067,
											"end": 2075,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2063,
											"end": 2124,
											"name": "ISZERO",
											"source": 12
										},
										{
											"begin": 2063,
											"end": 2124,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "293"
										},
										{
											"begin": 2063,
											"end": 2124,
											"name": "JUMPI",
											"source": 12
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "PUSH",
											"source": 12,
											"value": "D93C066500000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "DUP2",
											"source": 12
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "PUSH",
											"source": 12,
											"value": "4"
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "ADD",
											"source": 12
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "MLOAD",
											"source": 12
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "SWAP2",
											"source": 12
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "SUB",
											"source": 12
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "SWAP1",
											"source": 12
										},
										{
											"begin": 2098,
											"end": 2113,
											"name": "REVERT",
											"source": 12
										},
										{
											"begin": 2063,
											"end": 2124,
											"name": "tag",
											"source": 12,
											"value": "293"
										},
										{
											"begin": 2063,
											"end": 2124,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 2002,
											"end": 2130,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 3385,
											"end": 3652,
											"name": "tag",
											"source": 13,
											"value": "262"
										},
										{
											"begin": 3385,
											"end": 3652,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3479,
											"end": 3492,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 13,
											"value": "FF"
										},
										{
											"begin": 3537,
											"end": 3554,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3537,
											"end": 3554,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 3527,
											"end": 3532,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3508,
											"end": 3554,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "295"
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "296"
										},
										{
											"begin": 3586,
											"end": 3591,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3577,
											"end": 3585,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "297"
										},
										{
											"begin": 3577,
											"end": 3592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "tag",
											"source": 13,
											"value": "296"
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3570,
											"end": 3592,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3570,
											"end": 3592,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3570,
											"end": 3592,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "294"
										},
										{
											"begin": 3570,
											"end": 3592,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "tag",
											"source": 13,
											"value": "295"
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3630,
											"end": 3635,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "299"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "112"
										},
										{
											"begin": 3623,
											"end": 3635,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "tag",
											"source": 13,
											"value": "299"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "300"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "112"
										},
										{
											"begin": 3623,
											"end": 3635,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "tag",
											"source": 13,
											"value": "300"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "301"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "302"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 13,
											"value": "100"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DIV",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "301"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "tag",
											"source": 13,
											"value": "302"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "KECCAK256",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "tag",
											"source": 13,
											"value": "303"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SLOAD",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "303"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "tag",
											"source": 13,
											"value": "301"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3385,
											"end": 3652,
											"name": "tag",
											"source": 13,
											"value": "294"
										},
										{
											"begin": 3385,
											"end": 3652,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3385,
											"end": 3652,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3385,
											"end": 3652,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3385,
											"end": 3652,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3385,
											"end": 3652,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3385,
											"end": 3652,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3353,
											"end": 3754,
											"name": "tag",
											"source": 18,
											"value": "269"
										},
										{
											"begin": 3353,
											"end": 3754,
											"name": "JUMPDEST",
											"source": 18
										},
										{
											"begin": 3446,
											"end": 3460,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 3555,
											"end": 3559,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 3549,
											"end": 3560,
											"name": "MLOAD",
											"source": 18
										},
										{
											"begin": 3585,
											"end": 3595,
											"name": "PUSH",
											"source": 18,
											"value": "1901000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 3580,
											"end": 3583,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3573,
											"end": 3596,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3632,
											"end": 3647,
											"name": "DUP4",
											"source": 18
										},
										{
											"begin": 3625,
											"end": 3629,
											"name": "PUSH",
											"source": 18,
											"value": "2"
										},
										{
											"begin": 3620,
											"end": 3623,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3616,
											"end": 3630,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3609,
											"end": 3648,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3684,
											"end": 3694,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3677,
											"end": 3681,
											"name": "PUSH",
											"source": 18,
											"value": "22"
										},
										{
											"begin": 3672,
											"end": 3675,
											"name": "DUP3",
											"source": 18
										},
										{
											"begin": 3668,
											"end": 3682,
											"name": "ADD",
											"source": 18
										},
										{
											"begin": 3661,
											"end": 3695,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 3733,
											"end": 3737,
											"name": "PUSH",
											"source": 18,
											"value": "42"
										},
										{
											"begin": 3728,
											"end": 3731,
											"name": "DUP2",
											"source": 18
										},
										{
											"begin": 3718,
											"end": 3738,
											"name": "KECCAK256",
											"source": 18
										},
										{
											"begin": 3708,
											"end": 3738,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 3708,
											"end": 3738,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 3524,
											"end": 3748,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 3353,
											"end": 3754,
											"name": "SWAP3",
											"source": 18
										},
										{
											"begin": 3353,
											"end": 3754,
											"name": "SWAP2",
											"source": 18
										},
										{
											"begin": 3353,
											"end": 3754,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 3353,
											"end": 3754,
											"name": "POP",
											"source": 18
										},
										{
											"begin": 3353,
											"end": 3754,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 18
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "tag",
											"source": 16,
											"value": "272"
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5266,
											"end": 5273,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 5275,
											"end": 5287,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 5289,
											"end": 5296,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6199,
											"end": 6265,
											"name": "PUSH",
											"source": 16,
											"value": "7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
										},
										{
											"begin": 6194,
											"end": 6195,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 6186,
											"end": 6196,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6186,
											"end": 6196,
											"name": "SHR",
											"source": 16
										},
										{
											"begin": 6186,
											"end": 6265,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "306"
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 6297,
											"end": 6298,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6301,
											"end": 6331,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 6333,
											"end": 6334,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "305"
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "tag",
											"source": 16,
											"value": "306"
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6440,
											"end": 6454,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 6467,
											"end": 6471,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 6473,
											"end": 6474,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 6476,
											"end": 6477,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 6479,
											"end": 6480,
											"name": "DUP9",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "307"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "308"
										},
										{
											"begin": 6457,
											"end": 6481,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "tag",
											"source": 16,
											"value": "307"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP5",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP6",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "GAS",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "STATICCALL",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "310"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "RETURNDATACOPY",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "RETURNDATASIZE",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "tag",
											"source": 16,
											"value": "310"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 16,
											"value": "20"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 6440,
											"end": 6481,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 6440,
											"end": 6481,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6513,
											"end": 6514,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6495,
											"end": 6515,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6495,
											"end": 6515,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 6495,
											"end": 6501,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 6495,
											"end": 6515,
											"name": "PUSH",
											"source": 16,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6495,
											"end": 6515,
											"name": "AND",
											"source": 16
										},
										{
											"begin": 6495,
											"end": 6515,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "311"
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 6547,
											"end": 6548,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6551,
											"end": 6580,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 6590,
											"end": 6591,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6582,
											"end": 6592,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6582,
											"end": 6592,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "305"
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "tag",
											"source": 16,
											"value": "311"
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 6622,
											"end": 6628,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6630,
											"end": 6650,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6660,
											"end": 6661,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 6652,
											"end": 6662,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 6652,
											"end": 6662,
											"name": "SHL",
											"source": 16
										},
										{
											"begin": 6614,
											"end": 6663,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 6614,
											"end": 6663,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6614,
											"end": 6663,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 6614,
											"end": 6663,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6614,
											"end": 6663,
											"name": "SWAP4",
											"source": 16
										},
										{
											"begin": 6614,
											"end": 6663,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 6614,
											"end": 6663,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "tag",
											"source": 16,
											"value": "305"
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "SWAP5",
											"source": 16
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 5140,
											"end": 6670,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7196,
											"end": 7728,
											"name": "tag",
											"source": 16,
											"value": "274"
										},
										{
											"begin": 7196,
											"end": 7728,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7291,
											"end": 7311,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "313"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "314"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "315"
										},
										{
											"begin": 7282,
											"end": 7311,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "tag",
											"source": 16,
											"value": "314"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "tag",
											"source": 16,
											"value": "313"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7287,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "316"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "317"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "315"
										},
										{
											"begin": 7282,
											"end": 7311,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "tag",
											"source": 16,
											"value": "317"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "tag",
											"source": 16,
											"value": "316"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 7278,
											"end": 7722,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 7327,
											"end": 7334,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "312"
										},
										{
											"begin": 7278,
											"end": 7722,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7387,
											"end": 7416,
											"name": "PUSH",
											"source": 16,
											"value": "1"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "320"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "321"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "315"
										},
										{
											"begin": 7378,
											"end": 7416,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "tag",
											"source": 16,
											"value": "321"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "tag",
											"source": 16,
											"value": "320"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7383,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "322"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "323"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "315"
										},
										{
											"begin": 7378,
											"end": 7416,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "tag",
											"source": 16,
											"value": "323"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "tag",
											"source": 16,
											"value": "322"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 7374,
											"end": 7722,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "324"
										},
										{
											"begin": 7374,
											"end": 7722,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "PUSH",
											"source": 16,
											"value": "F645EEDF00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 7374,
											"end": 7722,
											"name": "tag",
											"source": 16,
											"value": "324"
										},
										{
											"begin": 7374,
											"end": 7722,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7492,
											"end": 7527,
											"name": "PUSH",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "326"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "327"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "315"
										},
										{
											"begin": 7483,
											"end": 7527,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "tag",
											"source": 16,
											"value": "327"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "tag",
											"source": 16,
											"value": "326"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7488,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "328"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "329"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "315"
										},
										{
											"begin": 7483,
											"end": 7527,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "tag",
											"source": 16,
											"value": "329"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "tag",
											"source": 16,
											"value": "328"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 7479,
											"end": 7722,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "330"
										},
										{
											"begin": 7479,
											"end": 7722,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7586,
											"end": 7594,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 7578,
											"end": 7595,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 7578,
											"end": 7595,
											"name": "SHR",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "PUSH",
											"source": 16,
											"value": "FCE698F700000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "331"
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "41"
										},
										{
											"begin": 7550,
											"end": 7596,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "tag",
											"source": 16,
											"value": "331"
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 7479,
											"end": 7722,
											"name": "tag",
											"source": 16,
											"value": "330"
										},
										{
											"begin": 7479,
											"end": 7722,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7626,
											"end": 7656,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "333"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "334"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "315"
										},
										{
											"begin": 7617,
											"end": 7656,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "tag",
											"source": 16,
											"value": "334"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "tag",
											"source": 16,
											"value": "333"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7622,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "PUSH",
											"source": 16,
											"value": "3"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "GT",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "ISZERO",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "335"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "336"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "315"
										},
										{
											"begin": 7617,
											"end": 7656,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "tag",
											"source": 16,
											"value": "336"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "tag",
											"source": 16,
											"value": "335"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 7613,
											"end": 7722,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "337"
										},
										{
											"begin": 7613,
											"end": 7722,
											"name": "JUMPI",
											"source": 16
										},
										{
											"begin": 7702,
											"end": 7710,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "PUSH",
											"source": 16,
											"value": "D78BCE0C00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "PUSH",
											"source": 16,
											"value": "4"
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "338"
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "PUSH [tag]",
											"source": 16,
											"value": "54"
										},
										{
											"begin": 7679,
											"end": 7711,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "tag",
											"source": 16,
											"value": "338"
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "SWAP2",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "SUB",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "REVERT",
											"source": 16
										},
										{
											"begin": 7613,
											"end": 7722,
											"name": "tag",
											"source": 16,
											"value": "337"
										},
										{
											"begin": 7613,
											"end": 7722,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7196,
											"end": 7728,
											"name": "tag",
											"source": 16,
											"value": "312"
										},
										{
											"begin": 7196,
											"end": 7728,
											"name": "JUMPDEST",
											"source": 16
										},
										{
											"begin": 7196,
											"end": 7728,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7196,
											"end": 7728,
											"name": "POP",
											"source": 16
										},
										{
											"begin": 7196,
											"end": 7728,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 1112,
											"end": 1257,
											"name": "tag",
											"source": 6,
											"value": "284"
										},
										{
											"begin": 1112,
											"end": 1257,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1474,
											"end": 1493,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "340"
										},
										{
											"begin": 1474,
											"end": 1491,
											"name": "PUSH [tag]",
											"source": 12,
											"value": "256"
										},
										{
											"begin": 1474,
											"end": 1493,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 12
										},
										{
											"begin": 1474,
											"end": 1493,
											"name": "tag",
											"source": 12,
											"value": "340"
										},
										{
											"begin": 1474,
											"end": 1493,
											"name": "JUMPDEST",
											"source": 12
										},
										{
											"begin": 1220,
											"end": 1250,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "342"
										},
										{
											"begin": 1234,
											"end": 1238,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1240,
											"end": 1242,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1244,
											"end": 1249,
											"modifierDepth": 1,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1220,
											"end": 1233,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "343"
										},
										{
											"begin": 1220,
											"end": 1250,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1220,
											"end": 1250,
											"modifierDepth": 1,
											"name": "tag",
											"source": 6,
											"value": "342"
										},
										{
											"begin": 1220,
											"end": 1250,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1112,
											"end": 1257,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1112,
											"end": 1257,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1112,
											"end": 1257,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1112,
											"end": 1257,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2078,
											"end": 2483,
											"name": "tag",
											"source": 13,
											"value": "297"
										},
										{
											"begin": 2078,
											"end": 2483,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2137,
											"end": 2150,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 2162,
											"end": 2173,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2176,
											"end": 2192,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "345"
										},
										{
											"begin": 2187,
											"end": 2191,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2176,
											"end": 2186,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "346"
										},
										{
											"begin": 2176,
											"end": 2192,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2176,
											"end": 2192,
											"name": "tag",
											"source": 13,
											"value": "345"
										},
										{
											"begin": 2176,
											"end": 2192,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2162,
											"end": 2192,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2162,
											"end": 2192,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2280,
											"end": 2297,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2311,
											"end": 2313,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "347"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "348"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "174"
										},
										{
											"begin": 2300,
											"end": 2314,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "tag",
											"source": 13,
											"value": "348"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "tag",
											"source": 13,
											"value": "347"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "NOT",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "349"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "MUL",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "CALLDATASIZE",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "CALLDATACOPY",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "tag",
											"source": 13,
											"value": "349"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2280,
											"end": 2314,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2280,
											"end": 2314,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2402,
											"end": 2405,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2397,
											"end": 2400,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2390,
											"end": 2406,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2442,
											"end": 2446,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2435,
											"end": 2439,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2430,
											"end": 2433,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2426,
											"end": 2440,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2419,
											"end": 2447,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2473,
											"end": 2476,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2466,
											"end": 2476,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2466,
											"end": 2476,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2466,
											"end": 2476,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2466,
											"end": 2476,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2078,
											"end": 2483,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2078,
											"end": 2483,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2078,
											"end": 2483,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2078,
											"end": 2483,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "tag",
											"source": 3,
											"value": "343"
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6376,
											"end": 6377,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6360,
											"end": 6364,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "351"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 6512,
											"end": 6517,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6508,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 6496,
											"end": 6508,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "352"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "353"
										},
										{
											"begin": 6496,
											"end": 6517,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "tag",
											"source": 3,
											"value": "352"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "354"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "tag",
											"source": 3,
											"value": "351"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6548,
											"end": 6567,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6570,
											"end": 6579,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6580,
											"end": 6584,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 6548,
											"end": 6585,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6548,
											"end": 6585,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6617,
											"end": 6622,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6603,
											"end": 6614,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "355"
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 6674,
											"end": 6678,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 6680,
											"end": 6691,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6693,
											"end": 6698,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 3,
											"value": "E450D38C00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "356"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "217"
										},
										{
											"begin": 6649,
											"end": 6699,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "tag",
											"source": 3,
											"value": "356"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "tag",
											"source": 3,
											"value": "355"
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6866,
											"end": 6871,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6852,
											"end": 6863,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6852,
											"end": 6871,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6843,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6844,
											"end": 6848,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6534,
											"end": 6896,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "tag",
											"source": 3,
											"value": "354"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6924,
											"end": 6925,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6910,
											"end": 6912,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "357"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 7089,
											"end": 7094,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7085,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 7073,
											"end": 7085,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "358"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "tag",
											"source": 3,
											"value": "357"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7301,
											"end": 7306,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7293,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7294,
											"end": 7296,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "tag",
											"source": 3,
											"value": "358"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7363,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7355,
											"end": 7359,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 3,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 7365,
											"end": 7370,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "359"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 7346,
											"end": 7371,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "tag",
											"source": 3,
											"value": "359"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6271,
											"end": 7378,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2555,
											"end": 2800,
											"name": "tag",
											"source": 13,
											"value": "346"
										},
										{
											"begin": 2555,
											"end": 2800,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2616,
											"end": 2623,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2635,
											"end": 2649,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2688,
											"end": 2692,
											"name": "PUSH",
											"source": 13,
											"value": "FF"
										},
										{
											"begin": 2679,
											"end": 2683,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2652,
											"end": 2685,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2652,
											"end": 2685,
											"name": "SHR",
											"source": 13
										},
										{
											"begin": 2652,
											"end": 2692,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 2635,
											"end": 2692,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2635,
											"end": 2692,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2715,
											"end": 2717,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 2706,
											"end": 2712,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2706,
											"end": 2717,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 2702,
											"end": 2771,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2702,
											"end": 2771,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "361"
										},
										{
											"begin": 2702,
											"end": 2771,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "PUSH",
											"source": 13,
											"value": "B3512B0C00000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2702,
											"end": 2771,
											"name": "tag",
											"source": 13,
											"value": "361"
										},
										{
											"begin": 2702,
											"end": 2771,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2787,
											"end": 2793,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2780,
											"end": 2793,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2780,
											"end": 2793,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2780,
											"end": 2793,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2555,
											"end": 2800,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2555,
											"end": 2800,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2555,
											"end": 2800,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2555,
											"end": 2800,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7,
											"end": 106,
											"name": "tag",
											"source": 22,
											"value": "362"
										},
										{
											"begin": 7,
											"end": 106,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 59,
											"end": 65,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 93,
											"end": 98,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 87,
											"end": 99,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 77,
											"end": 99,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 77,
											"end": 99,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7,
											"end": 106,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 7,
											"end": 106,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 7,
											"end": 106,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7,
											"end": 106,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 112,
											"end": 281,
											"name": "tag",
											"source": 22,
											"value": "363"
										},
										{
											"begin": 112,
											"end": 281,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 196,
											"end": 207,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 230,
											"end": 236,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 225,
											"end": 228,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 218,
											"end": 237,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 270,
											"end": 274,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 265,
											"end": 268,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 261,
											"end": 275,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 246,
											"end": 275,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 246,
											"end": 275,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 112,
											"end": 281,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 112,
											"end": 281,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 112,
											"end": 281,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 112,
											"end": 281,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 112,
											"end": 281,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 287,
											"end": 426,
											"name": "tag",
											"source": 22,
											"value": "364"
										},
										{
											"begin": 287,
											"end": 426,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 376,
											"end": 382,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 371,
											"end": 374,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 366,
											"end": 369,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 360,
											"end": 383,
											"name": "MCOPY",
											"source": 22
										},
										{
											"begin": 417,
											"end": 418,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 408,
											"end": 414,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 403,
											"end": 406,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 399,
											"end": 415,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 392,
											"end": 419,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 287,
											"end": 426,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 287,
											"end": 426,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 287,
											"end": 426,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 287,
											"end": 426,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 432,
											"end": 534,
											"name": "tag",
											"source": 22,
											"value": "365"
										},
										{
											"begin": 432,
											"end": 534,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 473,
											"end": 479,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 524,
											"end": 526,
											"name": "PUSH",
											"source": 22,
											"value": "1F"
										},
										{
											"begin": 520,
											"end": 527,
											"name": "NOT",
											"source": 22
										},
										{
											"begin": 515,
											"end": 517,
											"name": "PUSH",
											"source": 22,
											"value": "1F"
										},
										{
											"begin": 508,
											"end": 513,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 504,
											"end": 518,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 500,
											"end": 528,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 490,
											"end": 528,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 490,
											"end": 528,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 432,
											"end": 534,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 432,
											"end": 534,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 432,
											"end": 534,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 432,
											"end": 534,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 540,
											"end": 917,
											"name": "tag",
											"source": 22,
											"value": "366"
										},
										{
											"begin": 540,
											"end": 917,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 628,
											"end": 631,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 656,
											"end": 695,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "406"
										},
										{
											"begin": 689,
											"end": 694,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 656,
											"end": 695,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "362"
										},
										{
											"begin": 656,
											"end": 695,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 656,
											"end": 695,
											"name": "tag",
											"source": 22,
											"value": "406"
										},
										{
											"begin": 656,
											"end": 695,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 711,
											"end": 782,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "407"
										},
										{
											"begin": 775,
											"end": 781,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 770,
											"end": 773,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 711,
											"end": 782,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "363"
										},
										{
											"begin": 711,
											"end": 782,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 711,
											"end": 782,
											"name": "tag",
											"source": 22,
											"value": "407"
										},
										{
											"begin": 711,
											"end": 782,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 704,
											"end": 782,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": 704,
											"end": 782,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 791,
											"end": 856,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "408"
										},
										{
											"begin": 849,
											"end": 855,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 844,
											"end": 847,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 837,
											"end": 841,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 830,
											"end": 835,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 826,
											"end": 842,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 791,
											"end": 856,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "364"
										},
										{
											"begin": 791,
											"end": 856,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 791,
											"end": 856,
											"name": "tag",
											"source": 22,
											"value": "408"
										},
										{
											"begin": 791,
											"end": 856,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 881,
											"end": 910,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "409"
										},
										{
											"begin": 903,
											"end": 909,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 881,
											"end": 910,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "365"
										},
										{
											"begin": 881,
											"end": 910,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 881,
											"end": 910,
											"name": "tag",
											"source": 22,
											"value": "409"
										},
										{
											"begin": 881,
											"end": 910,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 876,
											"end": 879,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 872,
											"end": 911,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 865,
											"end": 911,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 865,
											"end": 911,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 632,
											"end": 917,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 540,
											"end": 917,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 540,
											"end": 917,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 540,
											"end": 917,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 540,
											"end": 917,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 540,
											"end": 917,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "tag",
											"source": 22,
											"value": "31"
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1036,
											"end": 1040,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1074,
											"end": 1076,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 1063,
											"end": 1072,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 1059,
											"end": 1077,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1051,
											"end": 1077,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1051,
											"end": 1077,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1123,
											"end": 1132,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1117,
											"end": 1121,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1113,
											"end": 1133,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 1109,
											"end": 1110,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1098,
											"end": 1107,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 1094,
											"end": 1111,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 1087,
											"end": 1134,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 1151,
											"end": 1229,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "411"
										},
										{
											"begin": 1224,
											"end": 1228,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1215,
											"end": 1221,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 1151,
											"end": 1229,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "366"
										},
										{
											"begin": 1151,
											"end": 1229,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 1151,
											"end": 1229,
											"name": "tag",
											"source": 22,
											"value": "411"
										},
										{
											"begin": 1151,
											"end": 1229,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1143,
											"end": 1229,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1143,
											"end": 1229,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 923,
											"end": 1236,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 923,
											"end": 1236,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 1323,
											"end": 1440,
											"name": "tag",
											"source": 22,
											"value": "368"
										},
										{
											"begin": 1323,
											"end": 1440,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1432,
											"end": 1433,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1429,
											"end": 1430,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1422,
											"end": 1434,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 1569,
											"end": 1695,
											"name": "tag",
											"source": 22,
											"value": "370"
										},
										{
											"begin": 1569,
											"end": 1695,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1606,
											"end": 1613,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1646,
											"end": 1688,
											"name": "PUSH",
											"source": 22,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1639,
											"end": 1644,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 1635,
											"end": 1689,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 1624,
											"end": 1689,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1624,
											"end": 1689,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1569,
											"end": 1695,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 1569,
											"end": 1695,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1569,
											"end": 1695,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1569,
											"end": 1695,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 1701,
											"end": 1797,
											"name": "tag",
											"source": 22,
											"value": "371"
										},
										{
											"begin": 1701,
											"end": 1797,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1738,
											"end": 1745,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1767,
											"end": 1791,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "417"
										},
										{
											"begin": 1785,
											"end": 1790,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 1767,
											"end": 1791,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "370"
										},
										{
											"begin": 1767,
											"end": 1791,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 1767,
											"end": 1791,
											"name": "tag",
											"source": 22,
											"value": "417"
										},
										{
											"begin": 1767,
											"end": 1791,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1756,
											"end": 1791,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1756,
											"end": 1791,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1701,
											"end": 1797,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 1701,
											"end": 1797,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1701,
											"end": 1797,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1701,
											"end": 1797,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 1803,
											"end": 1925,
											"name": "tag",
											"source": 22,
											"value": "372"
										},
										{
											"begin": 1803,
											"end": 1925,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1876,
											"end": 1900,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "419"
										},
										{
											"begin": 1894,
											"end": 1899,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1876,
											"end": 1900,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "371"
										},
										{
											"begin": 1876,
											"end": 1900,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 1876,
											"end": 1900,
											"name": "tag",
											"source": 22,
											"value": "419"
										},
										{
											"begin": 1876,
											"end": 1900,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1869,
											"end": 1874,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 1866,
											"end": 1901,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 1856,
											"end": 1919,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "420"
										},
										{
											"begin": 1856,
											"end": 1919,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 1915,
											"end": 1916,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 1912,
											"end": 1913,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 1905,
											"end": 1917,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 1856,
											"end": 1919,
											"name": "tag",
											"source": 22,
											"value": "420"
										},
										{
											"begin": 1856,
											"end": 1919,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1803,
											"end": 1925,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1803,
											"end": 1925,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "tag",
											"source": 22,
											"value": "373"
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1977,
											"end": 1982,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 2015,
											"end": 2021,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 2002,
											"end": 2022,
											"name": "CALLDATALOAD",
											"source": 22
										},
										{
											"begin": 1993,
											"end": 2022,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 1993,
											"end": 2022,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2031,
											"end": 2064,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "422"
										},
										{
											"begin": 2058,
											"end": 2063,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 2031,
											"end": 2064,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "372"
										},
										{
											"begin": 2031,
											"end": 2064,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 2031,
											"end": 2064,
											"name": "tag",
											"source": 22,
											"value": "422"
										},
										{
											"begin": 2031,
											"end": 2064,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1931,
											"end": 2070,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 1931,
											"end": 2070,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 2076,
											"end": 2153,
											"name": "tag",
											"source": 22,
											"value": "374"
										},
										{
											"begin": 2076,
											"end": 2153,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2113,
											"end": 2120,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 2142,
											"end": 2147,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 2131,
											"end": 2147,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 2131,
											"end": 2147,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2076,
											"end": 2153,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 2076,
											"end": 2153,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 2076,
											"end": 2153,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2076,
											"end": 2153,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 2159,
											"end": 2281,
											"name": "tag",
											"source": 22,
											"value": "375"
										},
										{
											"begin": 2159,
											"end": 2281,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2232,
											"end": 2256,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "425"
										},
										{
											"begin": 2250,
											"end": 2255,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 2232,
											"end": 2256,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "374"
										},
										{
											"begin": 2232,
											"end": 2256,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 2232,
											"end": 2256,
											"name": "tag",
											"source": 22,
											"value": "425"
										},
										{
											"begin": 2232,
											"end": 2256,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2225,
											"end": 2230,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 2222,
											"end": 2257,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 2212,
											"end": 2275,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "426"
										},
										{
											"begin": 2212,
											"end": 2275,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 2271,
											"end": 2272,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 2268,
											"end": 2269,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 2261,
											"end": 2273,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 2212,
											"end": 2275,
											"name": "tag",
											"source": 22,
											"value": "426"
										},
										{
											"begin": 2212,
											"end": 2275,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2159,
											"end": 2281,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2159,
											"end": 2281,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 2287,
											"end": 2426,
											"name": "tag",
											"source": 22,
											"value": "376"
										},
										{
											"begin": 2287,
											"end": 2426,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2333,
											"end": 2338,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 2371,
											"end": 2377,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 2358,
											"end": 2378,
											"name": "CALLDATALOAD",
											"source": 22
										},
										{
											"begin": 2349,
											"end": 2378,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 2349,
											"end": 2378,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2387,
											"end": 2420,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "428"
										},
										{
											"begin": 2414,
											"end": 2419,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 2387,
											"end": 2420,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "375"
										},
										{
											"begin": 2387,
											"end": 2420,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 2387,
											"end": 2420,
											"name": "tag",
											"source": 22,
											"value": "428"
										},
										{
											"begin": 2387,
											"end": 2420,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2287,
											"end": 2426,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 2287,
											"end": 2426,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 2287,
											"end": 2426,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2287,
											"end": 2426,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2287,
											"end": 2426,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "tag",
											"source": 22,
											"value": "34"
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2500,
											"end": 2506,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 2508,
											"end": 2514,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 2557,
											"end": 2559,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 2545,
											"end": 2554,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 2536,
											"end": 2543,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 2532,
											"end": 2555,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 2528,
											"end": 2560,
											"name": "SLT",
											"source": 22
										},
										{
											"begin": 2525,
											"end": 2644,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 2525,
											"end": 2644,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "430"
										},
										{
											"begin": 2525,
											"end": 2644,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 2563,
											"end": 2642,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "431"
										},
										{
											"begin": 2563,
											"end": 2642,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "368"
										},
										{
											"begin": 2563,
											"end": 2642,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 2563,
											"end": 2642,
											"name": "tag",
											"source": 22,
											"value": "431"
										},
										{
											"begin": 2563,
											"end": 2642,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2525,
											"end": 2644,
											"name": "tag",
											"source": 22,
											"value": "430"
										},
										{
											"begin": 2525,
											"end": 2644,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2683,
											"end": 2684,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 2708,
											"end": 2761,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "432"
										},
										{
											"begin": 2753,
											"end": 2760,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 2744,
											"end": 2750,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 2733,
											"end": 2742,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 2729,
											"end": 2751,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 2708,
											"end": 2761,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "373"
										},
										{
											"begin": 2708,
											"end": 2761,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 2708,
											"end": 2761,
											"name": "tag",
											"source": 22,
											"value": "432"
										},
										{
											"begin": 2708,
											"end": 2761,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2698,
											"end": 2761,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 2698,
											"end": 2761,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2654,
											"end": 2771,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2810,
											"end": 2812,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 2836,
											"end": 2889,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "433"
										},
										{
											"begin": 2881,
											"end": 2888,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 2872,
											"end": 2878,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 2861,
											"end": 2870,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 2857,
											"end": 2879,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 2836,
											"end": 2889,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "376"
										},
										{
											"begin": 2836,
											"end": 2889,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 2836,
											"end": 2889,
											"name": "tag",
											"source": 22,
											"value": "433"
										},
										{
											"begin": 2836,
											"end": 2889,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2826,
											"end": 2889,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 2826,
											"end": 2889,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2781,
											"end": 2899,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 2432,
											"end": 2906,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2432,
											"end": 2906,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 2912,
											"end": 3002,
											"name": "tag",
											"source": 22,
											"value": "377"
										},
										{
											"begin": 2912,
											"end": 3002,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 2946,
											"end": 2953,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 2989,
											"end": 2994,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 2982,
											"end": 2995,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 2975,
											"end": 2996,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 2964,
											"end": 2996,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 2964,
											"end": 2996,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2912,
											"end": 3002,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 2912,
											"end": 3002,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 2912,
											"end": 3002,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 2912,
											"end": 3002,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 3008,
											"end": 3117,
											"name": "tag",
											"source": 22,
											"value": "378"
										},
										{
											"begin": 3008,
											"end": 3117,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "436"
										},
										{
											"begin": 3104,
											"end": 3109,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "377"
										},
										{
											"begin": 3089,
											"end": 3110,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "tag",
											"source": 22,
											"value": "436"
										},
										{
											"begin": 3089,
											"end": 3110,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3084,
											"end": 3087,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 3077,
											"end": 3111,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 3008,
											"end": 3117,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3008,
											"end": 3117,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3008,
											"end": 3117,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 3123,
											"end": 3333,
											"name": "tag",
											"source": 22,
											"value": "37"
										},
										{
											"begin": 3123,
											"end": 3333,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3210,
											"end": 3214,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 3248,
											"end": 3250,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 3237,
											"end": 3246,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 3233,
											"end": 3251,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3225,
											"end": 3251,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 3225,
											"end": 3251,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3261,
											"end": 3326,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "438"
										},
										{
											"begin": 3323,
											"end": 3324,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 3312,
											"end": 3321,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 3308,
											"end": 3325,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3299,
											"end": 3305,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 3261,
											"end": 3326,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "378"
										},
										{
											"begin": 3261,
											"end": 3326,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 3261,
											"end": 3326,
											"name": "tag",
											"source": 22,
											"value": "438"
										},
										{
											"begin": 3261,
											"end": 3326,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3123,
											"end": 3333,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 3123,
											"end": 3333,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 3123,
											"end": 3333,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3123,
											"end": 3333,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3123,
											"end": 3333,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 3339,
											"end": 3457,
											"name": "tag",
											"source": 22,
											"value": "379"
										},
										{
											"begin": 3339,
											"end": 3457,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3426,
											"end": 3450,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "440"
										},
										{
											"begin": 3444,
											"end": 3449,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 3426,
											"end": 3450,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "374"
										},
										{
											"begin": 3426,
											"end": 3450,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 3426,
											"end": 3450,
											"name": "tag",
											"source": 22,
											"value": "440"
										},
										{
											"begin": 3426,
											"end": 3450,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3421,
											"end": 3424,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 3414,
											"end": 3451,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 3339,
											"end": 3457,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3339,
											"end": 3457,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3339,
											"end": 3457,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 3463,
											"end": 3685,
											"name": "tag",
											"source": 22,
											"value": "41"
										},
										{
											"begin": 3463,
											"end": 3685,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3556,
											"end": 3560,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 3594,
											"end": 3596,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 3583,
											"end": 3592,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 3579,
											"end": 3597,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3571,
											"end": 3597,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 3571,
											"end": 3597,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3607,
											"end": 3678,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "442"
										},
										{
											"begin": 3675,
											"end": 3676,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 3664,
											"end": 3673,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 3660,
											"end": 3677,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3651,
											"end": 3657,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 3607,
											"end": 3678,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "379"
										},
										{
											"begin": 3607,
											"end": 3678,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 3607,
											"end": 3678,
											"name": "tag",
											"source": 22,
											"value": "442"
										},
										{
											"begin": 3607,
											"end": 3678,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3463,
											"end": 3685,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 3463,
											"end": 3685,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 3463,
											"end": 3685,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3463,
											"end": 3685,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3463,
											"end": 3685,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "tag",
											"source": 22,
											"value": "44"
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3768,
											"end": 3774,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 3776,
											"end": 3782,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 3784,
											"end": 3790,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 3833,
											"end": 3835,
											"name": "PUSH",
											"source": 22,
											"value": "60"
										},
										{
											"begin": 3821,
											"end": 3830,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 3812,
											"end": 3819,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 3808,
											"end": 3831,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 3804,
											"end": 3836,
											"name": "SLT",
											"source": 22
										},
										{
											"begin": 3801,
											"end": 3920,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 3801,
											"end": 3920,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "444"
										},
										{
											"begin": 3801,
											"end": 3920,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 3839,
											"end": 3918,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "445"
										},
										{
											"begin": 3839,
											"end": 3918,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "368"
										},
										{
											"begin": 3839,
											"end": 3918,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 3839,
											"end": 3918,
											"name": "tag",
											"source": 22,
											"value": "445"
										},
										{
											"begin": 3839,
											"end": 3918,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3801,
											"end": 3920,
											"name": "tag",
											"source": 22,
											"value": "444"
										},
										{
											"begin": 3801,
											"end": 3920,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3959,
											"end": 3960,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 3984,
											"end": 4037,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "446"
										},
										{
											"begin": 4029,
											"end": 4036,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 4020,
											"end": 4026,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4009,
											"end": 4018,
											"name": "DUP8",
											"source": 22
										},
										{
											"begin": 4005,
											"end": 4027,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 3984,
											"end": 4037,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "373"
										},
										{
											"begin": 3984,
											"end": 4037,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 3984,
											"end": 4037,
											"name": "tag",
											"source": 22,
											"value": "446"
										},
										{
											"begin": 3984,
											"end": 4037,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 3974,
											"end": 4037,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": 3974,
											"end": 4037,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3930,
											"end": 4047,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4086,
											"end": 4088,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 4112,
											"end": 4165,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "447"
										},
										{
											"begin": 4157,
											"end": 4164,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 4148,
											"end": 4154,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4137,
											"end": 4146,
											"name": "DUP8",
											"source": 22
										},
										{
											"begin": 4133,
											"end": 4155,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 4112,
											"end": 4165,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "373"
										},
										{
											"begin": 4112,
											"end": 4165,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 4112,
											"end": 4165,
											"name": "tag",
											"source": 22,
											"value": "447"
										},
										{
											"begin": 4112,
											"end": 4165,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4102,
											"end": 4165,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 4102,
											"end": 4165,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4057,
											"end": 4175,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4214,
											"end": 4216,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 4240,
											"end": 4293,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "448"
										},
										{
											"begin": 4285,
											"end": 4292,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 4276,
											"end": 4282,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4265,
											"end": 4274,
											"name": "DUP8",
											"source": 22
										},
										{
											"begin": 4261,
											"end": 4283,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 4240,
											"end": 4293,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "376"
										},
										{
											"begin": 4240,
											"end": 4293,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 4240,
											"end": 4293,
											"name": "tag",
											"source": 22,
											"value": "448"
										},
										{
											"begin": 4240,
											"end": 4293,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4230,
											"end": 4293,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 4230,
											"end": 4293,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4185,
											"end": 4303,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 3691,
											"end": 4310,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 3691,
											"end": 4310,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 4316,
											"end": 4402,
											"name": "tag",
											"source": 22,
											"value": "380"
										},
										{
											"begin": 4316,
											"end": 4402,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4351,
											"end": 4358,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 4391,
											"end": 4395,
											"name": "PUSH",
											"source": 22,
											"value": "FF"
										},
										{
											"begin": 4384,
											"end": 4389,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4380,
											"end": 4396,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 4369,
											"end": 4396,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 4369,
											"end": 4396,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4316,
											"end": 4402,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 4316,
											"end": 4402,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 4316,
											"end": 4402,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4316,
											"end": 4402,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 4408,
											"end": 4520,
											"name": "tag",
											"source": 22,
											"value": "381"
										},
										{
											"begin": 4408,
											"end": 4520,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "451"
										},
										{
											"begin": 4507,
											"end": 4512,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "380"
										},
										{
											"begin": 4491,
											"end": 4513,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "tag",
											"source": 22,
											"value": "451"
										},
										{
											"begin": 4491,
											"end": 4513,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4486,
											"end": 4489,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4479,
											"end": 4514,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 4408,
											"end": 4520,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4408,
											"end": 4520,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4408,
											"end": 4520,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 4526,
											"end": 4740,
											"name": "tag",
											"source": 22,
											"value": "50"
										},
										{
											"begin": 4526,
											"end": 4740,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4615,
											"end": 4619,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 4653,
											"end": 4655,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 4642,
											"end": 4651,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4638,
											"end": 4656,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 4630,
											"end": 4656,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 4630,
											"end": 4656,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4666,
											"end": 4733,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "453"
										},
										{
											"begin": 4730,
											"end": 4731,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 4719,
											"end": 4728,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 4715,
											"end": 4732,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 4706,
											"end": 4712,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 4666,
											"end": 4733,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "381"
										},
										{
											"begin": 4666,
											"end": 4733,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 4666,
											"end": 4733,
											"name": "tag",
											"source": 22,
											"value": "453"
										},
										{
											"begin": 4666,
											"end": 4733,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4526,
											"end": 4740,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 4526,
											"end": 4740,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 4526,
											"end": 4740,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4526,
											"end": 4740,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4526,
											"end": 4740,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 4746,
											"end": 4823,
											"name": "tag",
											"source": 22,
											"value": "382"
										},
										{
											"begin": 4746,
											"end": 4823,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4783,
											"end": 4790,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 4812,
											"end": 4817,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 4801,
											"end": 4817,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 4801,
											"end": 4817,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4746,
											"end": 4823,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 4746,
											"end": 4823,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 4746,
											"end": 4823,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4746,
											"end": 4823,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 4829,
											"end": 4947,
											"name": "tag",
											"source": 22,
											"value": "383"
										},
										{
											"begin": 4829,
											"end": 4947,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4916,
											"end": 4940,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "456"
										},
										{
											"begin": 4934,
											"end": 4939,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 4916,
											"end": 4940,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "382"
										},
										{
											"begin": 4916,
											"end": 4940,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 4916,
											"end": 4940,
											"name": "tag",
											"source": 22,
											"value": "456"
										},
										{
											"begin": 4916,
											"end": 4940,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4911,
											"end": 4914,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 4904,
											"end": 4941,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 4829,
											"end": 4947,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4829,
											"end": 4947,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4829,
											"end": 4947,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 4953,
											"end": 5175,
											"name": "tag",
											"source": 22,
											"value": "54"
										},
										{
											"begin": 4953,
											"end": 5175,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 5046,
											"end": 5050,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 5084,
											"end": 5086,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 5073,
											"end": 5082,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 5069,
											"end": 5087,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 5061,
											"end": 5087,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 5061,
											"end": 5087,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 5097,
											"end": 5168,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "458"
										},
										{
											"begin": 5165,
											"end": 5166,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 5154,
											"end": 5163,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 5150,
											"end": 5167,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 5141,
											"end": 5147,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 5097,
											"end": 5168,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "383"
										},
										{
											"begin": 5097,
											"end": 5168,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 5097,
											"end": 5168,
											"name": "tag",
											"source": 22,
											"value": "458"
										},
										{
											"begin": 5097,
											"end": 5168,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 4953,
											"end": 5175,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 4953,
											"end": 5175,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 4953,
											"end": 5175,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4953,
											"end": 5175,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 4953,
											"end": 5175,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 5181,
											"end": 5510,
											"name": "tag",
											"source": 22,
											"value": "62"
										},
										{
											"begin": 5181,
											"end": 5510,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 5240,
											"end": 5246,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 5289,
											"end": 5291,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 5277,
											"end": 5286,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 5268,
											"end": 5275,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 5264,
											"end": 5287,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 5260,
											"end": 5292,
											"name": "SLT",
											"source": 22
										},
										{
											"begin": 5257,
											"end": 5376,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 5257,
											"end": 5376,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "460"
										},
										{
											"begin": 5257,
											"end": 5376,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 5295,
											"end": 5374,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "461"
										},
										{
											"begin": 5295,
											"end": 5374,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "368"
										},
										{
											"begin": 5295,
											"end": 5374,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 5295,
											"end": 5374,
											"name": "tag",
											"source": 22,
											"value": "461"
										},
										{
											"begin": 5295,
											"end": 5374,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 5257,
											"end": 5376,
											"name": "tag",
											"source": 22,
											"value": "460"
										},
										{
											"begin": 5257,
											"end": 5376,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 5415,
											"end": 5416,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 5440,
											"end": 5493,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "462"
										},
										{
											"begin": 5485,
											"end": 5492,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 5476,
											"end": 5482,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 5465,
											"end": 5474,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 5461,
											"end": 5483,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 5440,
											"end": 5493,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "376"
										},
										{
											"begin": 5440,
											"end": 5493,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 5440,
											"end": 5493,
											"name": "tag",
											"source": 22,
											"value": "462"
										},
										{
											"begin": 5440,
											"end": 5493,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 5430,
											"end": 5493,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 5430,
											"end": 5493,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 5386,
											"end": 5503,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 5181,
											"end": 5510,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 5181,
											"end": 5510,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 5181,
											"end": 5510,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 5181,
											"end": 5510,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 5181,
											"end": 5510,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 5516,
											"end": 5845,
											"name": "tag",
											"source": 22,
											"value": "69"
										},
										{
											"begin": 5516,
											"end": 5845,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 5575,
											"end": 5581,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 5624,
											"end": 5626,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 5612,
											"end": 5621,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 5603,
											"end": 5610,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 5599,
											"end": 5622,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 5595,
											"end": 5627,
											"name": "SLT",
											"source": 22
										},
										{
											"begin": 5592,
											"end": 5711,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 5592,
											"end": 5711,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "464"
										},
										{
											"begin": 5592,
											"end": 5711,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 5630,
											"end": 5709,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "465"
										},
										{
											"begin": 5630,
											"end": 5709,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "368"
										},
										{
											"begin": 5630,
											"end": 5709,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 5630,
											"end": 5709,
											"name": "tag",
											"source": 22,
											"value": "465"
										},
										{
											"begin": 5630,
											"end": 5709,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 5592,
											"end": 5711,
											"name": "tag",
											"source": 22,
											"value": "464"
										},
										{
											"begin": 5592,
											"end": 5711,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 5750,
											"end": 5751,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 5775,
											"end": 5828,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "466"
										},
										{
											"begin": 5820,
											"end": 5827,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 5811,
											"end": 5817,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 5800,
											"end": 5809,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 5796,
											"end": 5818,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 5775,
											"end": 5828,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "373"
										},
										{
											"begin": 5775,
											"end": 5828,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 5775,
											"end": 5828,
											"name": "tag",
											"source": 22,
											"value": "466"
										},
										{
											"begin": 5775,
											"end": 5828,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 5765,
											"end": 5828,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 5765,
											"end": 5828,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 5721,
											"end": 5838,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 5516,
											"end": 5845,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 5516,
											"end": 5845,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 5516,
											"end": 5845,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 5516,
											"end": 5845,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 5516,
											"end": 5845,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 5851,
											"end": 6000,
											"name": "tag",
											"source": 22,
											"value": "384"
										},
										{
											"begin": 5851,
											"end": 6000,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 5887,
											"end": 5894,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 5927,
											"end": 5993,
											"name": "PUSH",
											"source": 22,
											"value": "FF00000000000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 5920,
											"end": 5925,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 5916,
											"end": 5994,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 5905,
											"end": 5994,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 5905,
											"end": 5994,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 5851,
											"end": 6000,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 5851,
											"end": 6000,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 5851,
											"end": 6000,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 5851,
											"end": 6000,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 6006,
											"end": 6121,
											"name": "tag",
											"source": 22,
											"value": "385"
										},
										{
											"begin": 6006,
											"end": 6121,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 6091,
											"end": 6114,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "469"
										},
										{
											"begin": 6108,
											"end": 6113,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 6091,
											"end": 6114,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "384"
										},
										{
											"begin": 6091,
											"end": 6114,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 6091,
											"end": 6114,
											"name": "tag",
											"source": 22,
											"value": "469"
										},
										{
											"begin": 6091,
											"end": 6114,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 6086,
											"end": 6089,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 6079,
											"end": 6115,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 6006,
											"end": 6121,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6006,
											"end": 6121,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6006,
											"end": 6121,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 6127,
											"end": 6245,
											"name": "tag",
											"source": 22,
											"value": "386"
										},
										{
											"begin": 6127,
											"end": 6245,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 6214,
											"end": 6238,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "471"
										},
										{
											"begin": 6232,
											"end": 6237,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 6214,
											"end": 6238,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "371"
										},
										{
											"begin": 6214,
											"end": 6238,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 6214,
											"end": 6238,
											"name": "tag",
											"source": 22,
											"value": "471"
										},
										{
											"begin": 6214,
											"end": 6238,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 6209,
											"end": 6212,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 6202,
											"end": 6239,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 6127,
											"end": 6245,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6127,
											"end": 6245,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6127,
											"end": 6245,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 6251,
											"end": 6365,
											"name": "tag",
											"source": 22,
											"value": "387"
										},
										{
											"begin": 6251,
											"end": 6365,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 6318,
											"end": 6324,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 6352,
											"end": 6357,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 6346,
											"end": 6358,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 6336,
											"end": 6358,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 6336,
											"end": 6358,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6251,
											"end": 6365,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 6251,
											"end": 6365,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 6251,
											"end": 6365,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6251,
											"end": 6365,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 6371,
											"end": 6555,
											"name": "tag",
											"source": 22,
											"value": "388"
										},
										{
											"begin": 6371,
											"end": 6555,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 6470,
											"end": 6481,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 6504,
											"end": 6510,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 6499,
											"end": 6502,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 6492,
											"end": 6511,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 6544,
											"end": 6548,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 6539,
											"end": 6542,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 6535,
											"end": 6549,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 6520,
											"end": 6549,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 6520,
											"end": 6549,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6371,
											"end": 6555,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 6371,
											"end": 6555,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 6371,
											"end": 6555,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6371,
											"end": 6555,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6371,
											"end": 6555,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 6561,
											"end": 6693,
											"name": "tag",
											"source": 22,
											"value": "389"
										},
										{
											"begin": 6561,
											"end": 6693,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 6628,
											"end": 6632,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 6651,
											"end": 6654,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 6643,
											"end": 6654,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 6643,
											"end": 6654,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6681,
											"end": 6685,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 6676,
											"end": 6679,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 6672,
											"end": 6686,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 6664,
											"end": 6686,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 6664,
											"end": 6686,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6561,
											"end": 6693,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 6561,
											"end": 6693,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 6561,
											"end": 6693,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6561,
											"end": 6693,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 6699,
											"end": 6807,
											"name": "tag",
											"source": 22,
											"value": "390"
										},
										{
											"begin": 6699,
											"end": 6807,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 6776,
											"end": 6800,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "476"
										},
										{
											"begin": 6794,
											"end": 6799,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 6776,
											"end": 6800,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "374"
										},
										{
											"begin": 6776,
											"end": 6800,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 6776,
											"end": 6800,
											"name": "tag",
											"source": 22,
											"value": "476"
										},
										{
											"begin": 6776,
											"end": 6800,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 6771,
											"end": 6774,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 6764,
											"end": 6801,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 6699,
											"end": 6807,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6699,
											"end": 6807,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6699,
											"end": 6807,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 6813,
											"end": 6992,
											"name": "tag",
											"source": 22,
											"value": "391"
										},
										{
											"begin": 6813,
											"end": 6992,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 6882,
											"end": 6892,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 6903,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "478"
										},
										{
											"begin": 6945,
											"end": 6948,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 6937,
											"end": 6943,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 6903,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "390"
										},
										{
											"begin": 6903,
											"end": 6949,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 6903,
											"end": 6949,
											"name": "tag",
											"source": 22,
											"value": "478"
										},
										{
											"begin": 6903,
											"end": 6949,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 6981,
											"end": 6985,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 6976,
											"end": 6979,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 6972,
											"end": 6986,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 6958,
											"end": 6986,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 6958,
											"end": 6986,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6813,
											"end": 6992,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 6813,
											"end": 6992,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 6813,
											"end": 6992,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6813,
											"end": 6992,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6813,
											"end": 6992,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 6998,
											"end": 7111,
											"name": "tag",
											"source": 22,
											"value": "392"
										},
										{
											"begin": 6998,
											"end": 7111,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 7068,
											"end": 7072,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 7100,
											"end": 7104,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 7095,
											"end": 7098,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 7091,
											"end": 7105,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 7083,
											"end": 7105,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 7083,
											"end": 7105,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6998,
											"end": 7111,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 6998,
											"end": 7111,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 6998,
											"end": 7111,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 6998,
											"end": 7111,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 7147,
											"end": 7879,
											"name": "tag",
											"source": 22,
											"value": "393"
										},
										{
											"begin": 7147,
											"end": 7879,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 7266,
											"end": 7269,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 7295,
											"end": 7349,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "481"
										},
										{
											"begin": 7343,
											"end": 7348,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 7295,
											"end": 7349,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "387"
										},
										{
											"begin": 7295,
											"end": 7349,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 7295,
											"end": 7349,
											"name": "tag",
											"source": 22,
											"value": "481"
										},
										{
											"begin": 7295,
											"end": 7349,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 7365,
											"end": 7451,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "482"
										},
										{
											"begin": 7444,
											"end": 7450,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 7439,
											"end": 7442,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 7365,
											"end": 7451,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "388"
										},
										{
											"begin": 7365,
											"end": 7451,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 7365,
											"end": 7451,
											"name": "tag",
											"source": 22,
											"value": "482"
										},
										{
											"begin": 7365,
											"end": 7451,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 7358,
											"end": 7451,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": 7358,
											"end": 7451,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7475,
											"end": 7531,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "483"
										},
										{
											"begin": 7525,
											"end": 7530,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 7475,
											"end": 7531,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "389"
										},
										{
											"begin": 7475,
											"end": 7531,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 7475,
											"end": 7531,
											"name": "tag",
											"source": 22,
											"value": "483"
										},
										{
											"begin": 7475,
											"end": 7531,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 7554,
											"end": 7561,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 7585,
											"end": 7586,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 7570,
											"end": 7854,
											"name": "tag",
											"source": 22,
											"value": "484"
										},
										{
											"begin": 7570,
											"end": 7854,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 7595,
											"end": 7601,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 7592,
											"end": 7593,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 7589,
											"end": 7602,
											"name": "LT",
											"source": 22
										},
										{
											"begin": 7570,
											"end": 7854,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 7570,
											"end": 7854,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "486"
										},
										{
											"begin": 7570,
											"end": 7854,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 7671,
											"end": 7677,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 7665,
											"end": 7678,
											"name": "MLOAD",
											"source": 22
										},
										{
											"begin": 7698,
											"end": 7761,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "487"
										},
										{
											"begin": 7757,
											"end": 7760,
											"name": "DUP9",
											"source": 22
										},
										{
											"begin": 7742,
											"end": 7755,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 7698,
											"end": 7761,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "391"
										},
										{
											"begin": 7698,
											"end": 7761,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 7698,
											"end": 7761,
											"name": "tag",
											"source": 22,
											"value": "487"
										},
										{
											"begin": 7698,
											"end": 7761,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 7691,
											"end": 7761,
											"name": "SWAP8",
											"source": 22
										},
										{
											"begin": 7691,
											"end": 7761,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7784,
											"end": 7844,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "488"
										},
										{
											"begin": 7837,
											"end": 7843,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 7784,
											"end": 7844,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "392"
										},
										{
											"begin": 7784,
											"end": 7844,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 7784,
											"end": 7844,
											"name": "tag",
											"source": 22,
											"value": "488"
										},
										{
											"begin": 7784,
											"end": 7844,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 7774,
											"end": 7844,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 7774,
											"end": 7844,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7630,
											"end": 7854,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7617,
											"end": 7618,
											"name": "PUSH",
											"source": 22,
											"value": "1"
										},
										{
											"begin": 7614,
											"end": 7615,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 7610,
											"end": 7619,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 7605,
											"end": 7619,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 7605,
											"end": 7619,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7570,
											"end": 7854,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "484"
										},
										{
											"begin": 7570,
											"end": 7854,
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 7570,
											"end": 7854,
											"name": "tag",
											"source": 22,
											"value": "486"
										},
										{
											"begin": 7570,
											"end": 7854,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 7574,
											"end": 7588,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7870,
											"end": 7873,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 7863,
											"end": 7873,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": 7863,
											"end": 7873,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7271,
											"end": 7879,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7271,
											"end": 7879,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7271,
											"end": 7879,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7147,
											"end": 7879,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 7147,
											"end": 7879,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 7147,
											"end": 7879,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7147,
											"end": 7879,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7147,
											"end": 7879,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 7885,
											"end": 9100,
											"name": "tag",
											"source": 22,
											"value": "86"
										},
										{
											"begin": 7885,
											"end": 9100,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8234,
											"end": 8238,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 8272,
											"end": 8275,
											"name": "PUSH",
											"source": 22,
											"value": "E0"
										},
										{
											"begin": 8261,
											"end": 8270,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 8257,
											"end": 8276,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 8249,
											"end": 8276,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 8249,
											"end": 8276,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 8286,
											"end": 8355,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "490"
										},
										{
											"begin": 8352,
											"end": 8353,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 8341,
											"end": 8350,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 8337,
											"end": 8354,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 8328,
											"end": 8334,
											"name": "DUP11",
											"source": 22
										},
										{
											"begin": 8286,
											"end": 8355,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "385"
										},
										{
											"begin": 8286,
											"end": 8355,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 8286,
											"end": 8355,
											"name": "tag",
											"source": 22,
											"value": "490"
										},
										{
											"begin": 8286,
											"end": 8355,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8402,
											"end": 8411,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 8396,
											"end": 8400,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 8392,
											"end": 8412,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 8387,
											"end": 8389,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 8376,
											"end": 8385,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 8372,
											"end": 8390,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 8365,
											"end": 8413,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 8430,
											"end": 8508,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "491"
										},
										{
											"begin": 8503,
											"end": 8507,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 8494,
											"end": 8500,
											"name": "DUP10",
											"source": 22
										},
										{
											"begin": 8430,
											"end": 8508,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "366"
										},
										{
											"begin": 8430,
											"end": 8508,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 8430,
											"end": 8508,
											"name": "tag",
											"source": 22,
											"value": "491"
										},
										{
											"begin": 8430,
											"end": 8508,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8422,
											"end": 8508,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 8422,
											"end": 8508,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 8555,
											"end": 8564,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 8549,
											"end": 8553,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 8545,
											"end": 8565,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 8540,
											"end": 8542,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 8529,
											"end": 8538,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 8525,
											"end": 8543,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 8518,
											"end": 8566,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 8583,
											"end": 8661,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "492"
										},
										{
											"begin": 8656,
											"end": 8660,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 8647,
											"end": 8653,
											"name": "DUP9",
											"source": 22
										},
										{
											"begin": 8583,
											"end": 8661,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "366"
										},
										{
											"begin": 8583,
											"end": 8661,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 8583,
											"end": 8661,
											"name": "tag",
											"source": 22,
											"value": "492"
										},
										{
											"begin": 8583,
											"end": 8661,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8575,
											"end": 8661,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 8575,
											"end": 8661,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 8671,
											"end": 8743,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "493"
										},
										{
											"begin": 8739,
											"end": 8741,
											"name": "PUSH",
											"source": 22,
											"value": "60"
										},
										{
											"begin": 8728,
											"end": 8737,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 8724,
											"end": 8742,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 8715,
											"end": 8721,
											"name": "DUP8",
											"source": 22
										},
										{
											"begin": 8671,
											"end": 8743,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "379"
										},
										{
											"begin": 8671,
											"end": 8743,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 8671,
											"end": 8743,
											"name": "tag",
											"source": 22,
											"value": "493"
										},
										{
											"begin": 8671,
											"end": 8743,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8753,
											"end": 8826,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "494"
										},
										{
											"begin": 8821,
											"end": 8824,
											"name": "PUSH",
											"source": 22,
											"value": "80"
										},
										{
											"begin": 8810,
											"end": 8819,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 8806,
											"end": 8825,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 8797,
											"end": 8803,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 8753,
											"end": 8826,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "386"
										},
										{
											"begin": 8753,
											"end": 8826,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 8753,
											"end": 8826,
											"name": "tag",
											"source": 22,
											"value": "494"
										},
										{
											"begin": 8753,
											"end": 8826,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8836,
											"end": 8909,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "495"
										},
										{
											"begin": 8904,
											"end": 8907,
											"name": "PUSH",
											"source": 22,
											"value": "A0"
										},
										{
											"begin": 8893,
											"end": 8902,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 8889,
											"end": 8908,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 8880,
											"end": 8886,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 8836,
											"end": 8909,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "383"
										},
										{
											"begin": 8836,
											"end": 8909,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 8836,
											"end": 8909,
											"name": "tag",
											"source": 22,
											"value": "495"
										},
										{
											"begin": 8836,
											"end": 8909,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8957,
											"end": 8966,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 8951,
											"end": 8955,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 8947,
											"end": 8967,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 8941,
											"end": 8944,
											"name": "PUSH",
											"source": 22,
											"value": "C0"
										},
										{
											"begin": 8930,
											"end": 8939,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 8926,
											"end": 8945,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 8919,
											"end": 8968,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 8985,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "496"
										},
										{
											"begin": 9088,
											"end": 9092,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 9079,
											"end": 9085,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 8985,
											"end": 9093,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "393"
										},
										{
											"begin": 8985,
											"end": 9093,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 8985,
											"end": 9093,
											"name": "tag",
											"source": 22,
											"value": "496"
										},
										{
											"begin": 8985,
											"end": 9093,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 8977,
											"end": 9093,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 8977,
											"end": 9093,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7885,
											"end": 9100,
											"name": "SWAP9",
											"source": 22
										},
										{
											"begin": 7885,
											"end": 9100,
											"name": "SWAP8",
											"source": 22
										},
										{
											"begin": 7885,
											"end": 9100,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7885,
											"end": 9100,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7885,
											"end": 9100,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7885,
											"end": 9100,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7885,
											"end": 9100,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7885,
											"end": 9100,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7885,
											"end": 9100,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7885,
											"end": 9100,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 7885,
											"end": 9100,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 9106,
											"end": 9328,
											"name": "tag",
											"source": 22,
											"value": "90"
										},
										{
											"begin": 9106,
											"end": 9328,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9199,
											"end": 9203,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 9237,
											"end": 9239,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 9226,
											"end": 9235,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 9222,
											"end": 9240,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 9214,
											"end": 9240,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 9214,
											"end": 9240,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9250,
											"end": 9321,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "498"
										},
										{
											"begin": 9318,
											"end": 9319,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 9307,
											"end": 9316,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 9303,
											"end": 9320,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 9294,
											"end": 9300,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 9250,
											"end": 9321,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "386"
										},
										{
											"begin": 9250,
											"end": 9321,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 9250,
											"end": 9321,
											"name": "tag",
											"source": 22,
											"value": "498"
										},
										{
											"begin": 9250,
											"end": 9321,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9106,
											"end": 9328,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 9106,
											"end": 9328,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 9106,
											"end": 9328,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9106,
											"end": 9328,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9106,
											"end": 9328,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 9334,
											"end": 9452,
											"name": "tag",
											"source": 22,
											"value": "394"
										},
										{
											"begin": 9334,
											"end": 9452,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9405,
											"end": 9427,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "500"
										},
										{
											"begin": 9421,
											"end": 9426,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 9405,
											"end": 9427,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "380"
										},
										{
											"begin": 9405,
											"end": 9427,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 9405,
											"end": 9427,
											"name": "tag",
											"source": 22,
											"value": "500"
										},
										{
											"begin": 9405,
											"end": 9427,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9398,
											"end": 9403,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 9395,
											"end": 9428,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 9385,
											"end": 9446,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "501"
										},
										{
											"begin": 9385,
											"end": 9446,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 9442,
											"end": 9443,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 9439,
											"end": 9440,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 9432,
											"end": 9444,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 9385,
											"end": 9446,
											"name": "tag",
											"source": 22,
											"value": "501"
										},
										{
											"begin": 9385,
											"end": 9446,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9334,
											"end": 9452,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9334,
											"end": 9452,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 9458,
											"end": 9593,
											"name": "tag",
											"source": 22,
											"value": "395"
										},
										{
											"begin": 9458,
											"end": 9593,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9502,
											"end": 9507,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 9540,
											"end": 9546,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 9527,
											"end": 9547,
											"name": "CALLDATALOAD",
											"source": 22
										},
										{
											"begin": 9518,
											"end": 9547,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 9518,
											"end": 9547,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9556,
											"end": 9587,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "503"
										},
										{
											"begin": 9581,
											"end": 9586,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 9556,
											"end": 9587,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "394"
										},
										{
											"begin": 9556,
											"end": 9587,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 9556,
											"end": 9587,
											"name": "tag",
											"source": 22,
											"value": "503"
										},
										{
											"begin": 9556,
											"end": 9587,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9458,
											"end": 9593,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 9458,
											"end": 9593,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 9458,
											"end": 9593,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9458,
											"end": 9593,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9458,
											"end": 9593,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 9599,
											"end": 9721,
											"name": "tag",
											"source": 22,
											"value": "396"
										},
										{
											"begin": 9599,
											"end": 9721,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9672,
											"end": 9696,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "505"
										},
										{
											"begin": 9690,
											"end": 9695,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 9672,
											"end": 9696,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "382"
										},
										{
											"begin": 9672,
											"end": 9696,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 9672,
											"end": 9696,
											"name": "tag",
											"source": 22,
											"value": "505"
										},
										{
											"begin": 9672,
											"end": 9696,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9665,
											"end": 9670,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 9662,
											"end": 9697,
											"name": "EQ",
											"source": 22
										},
										{
											"begin": 9652,
											"end": 9715,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "506"
										},
										{
											"begin": 9652,
											"end": 9715,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 9711,
											"end": 9712,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 9708,
											"end": 9709,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 9701,
											"end": 9713,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 9652,
											"end": 9715,
											"name": "tag",
											"source": 22,
											"value": "506"
										},
										{
											"begin": 9652,
											"end": 9715,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9599,
											"end": 9721,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9599,
											"end": 9721,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 9727,
											"end": 9866,
											"name": "tag",
											"source": 22,
											"value": "397"
										},
										{
											"begin": 9727,
											"end": 9866,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9773,
											"end": 9778,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 9811,
											"end": 9817,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 9798,
											"end": 9818,
											"name": "CALLDATALOAD",
											"source": 22
										},
										{
											"begin": 9789,
											"end": 9818,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 9789,
											"end": 9818,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9827,
											"end": 9860,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "508"
										},
										{
											"begin": 9854,
											"end": 9859,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 9827,
											"end": 9860,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "396"
										},
										{
											"begin": 9827,
											"end": 9860,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 9827,
											"end": 9860,
											"name": "tag",
											"source": 22,
											"value": "508"
										},
										{
											"begin": 9827,
											"end": 9860,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9727,
											"end": 9866,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 9727,
											"end": 9866,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 9727,
											"end": 9866,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9727,
											"end": 9866,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9727,
											"end": 9866,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 9872,
											"end": 11071,
											"name": "tag",
											"source": 22,
											"value": "100"
										},
										{
											"begin": 9872,
											"end": 11071,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 9983,
											"end": 9989,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 9991,
											"end": 9997,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 9999,
											"end": 10005,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 10007,
											"end": 10013,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 10015,
											"end": 10021,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 10023,
											"end": 10029,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 10031,
											"end": 10037,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 10080,
											"end": 10083,
											"name": "PUSH",
											"source": 22,
											"value": "E0"
										},
										{
											"begin": 10068,
											"end": 10077,
											"name": "DUP9",
											"source": 22
										},
										{
											"begin": 10059,
											"end": 10066,
											"name": "DUP11",
											"source": 22
										},
										{
											"begin": 10055,
											"end": 10078,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 10051,
											"end": 10084,
											"name": "SLT",
											"source": 22
										},
										{
											"begin": 10048,
											"end": 10168,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 10048,
											"end": 10168,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "510"
										},
										{
											"begin": 10048,
											"end": 10168,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 10087,
											"end": 10166,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "511"
										},
										{
											"begin": 10087,
											"end": 10166,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "368"
										},
										{
											"begin": 10087,
											"end": 10166,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 10087,
											"end": 10166,
											"name": "tag",
											"source": 22,
											"value": "511"
										},
										{
											"begin": 10087,
											"end": 10166,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 10048,
											"end": 10168,
											"name": "tag",
											"source": 22,
											"value": "510"
										},
										{
											"begin": 10048,
											"end": 10168,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 10207,
											"end": 10208,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 10232,
											"end": 10285,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "512"
										},
										{
											"begin": 10277,
											"end": 10284,
											"name": "DUP11",
											"source": 22
										},
										{
											"begin": 10268,
											"end": 10274,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 10257,
											"end": 10266,
											"name": "DUP12",
											"source": 22
										},
										{
											"begin": 10253,
											"end": 10275,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 10232,
											"end": 10285,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "373"
										},
										{
											"begin": 10232,
											"end": 10285,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 10232,
											"end": 10285,
											"name": "tag",
											"source": 22,
											"value": "512"
										},
										{
											"begin": 10232,
											"end": 10285,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 10222,
											"end": 10285,
											"name": "SWAP8",
											"source": 22
										},
										{
											"begin": 10222,
											"end": 10285,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 10178,
											"end": 10295,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 10334,
											"end": 10336,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 10360,
											"end": 10413,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "513"
										},
										{
											"begin": 10405,
											"end": 10412,
											"name": "DUP11",
											"source": 22
										},
										{
											"begin": 10396,
											"end": 10402,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 10385,
											"end": 10394,
											"name": "DUP12",
											"source": 22
										},
										{
											"begin": 10381,
											"end": 10403,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 10360,
											"end": 10413,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "373"
										},
										{
											"begin": 10360,
											"end": 10413,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 10360,
											"end": 10413,
											"name": "tag",
											"source": 22,
											"value": "513"
										},
										{
											"begin": 10360,
											"end": 10413,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 10350,
											"end": 10413,
											"name": "SWAP7",
											"source": 22
										},
										{
											"begin": 10350,
											"end": 10413,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 10305,
											"end": 10423,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 10462,
											"end": 10464,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 10488,
											"end": 10541,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "514"
										},
										{
											"begin": 10533,
											"end": 10540,
											"name": "DUP11",
											"source": 22
										},
										{
											"begin": 10524,
											"end": 10530,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 10513,
											"end": 10522,
											"name": "DUP12",
											"source": 22
										},
										{
											"begin": 10509,
											"end": 10531,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 10488,
											"end": 10541,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "376"
										},
										{
											"begin": 10488,
											"end": 10541,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 10488,
											"end": 10541,
											"name": "tag",
											"source": 22,
											"value": "514"
										},
										{
											"begin": 10488,
											"end": 10541,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 10478,
											"end": 10541,
											"name": "SWAP6",
											"source": 22
										},
										{
											"begin": 10478,
											"end": 10541,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 10433,
											"end": 10551,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 10590,
											"end": 10592,
											"name": "PUSH",
											"source": 22,
											"value": "60"
										},
										{
											"begin": 10616,
											"end": 10669,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "515"
										},
										{
											"begin": 10661,
											"end": 10668,
											"name": "DUP11",
											"source": 22
										},
										{
											"begin": 10652,
											"end": 10658,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 10641,
											"end": 10650,
											"name": "DUP12",
											"source": 22
										},
										{
											"begin": 10637,
											"end": 10659,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 10616,
											"end": 10669,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "376"
										},
										{
											"begin": 10616,
											"end": 10669,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 10616,
											"end": 10669,
											"name": "tag",
											"source": 22,
											"value": "515"
										},
										{
											"begin": 10616,
											"end": 10669,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 10606,
											"end": 10669,
											"name": "SWAP5",
											"source": 22
										},
										{
											"begin": 10606,
											"end": 10669,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 10561,
											"end": 10679,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 10718,
											"end": 10721,
											"name": "PUSH",
											"source": 22,
											"value": "80"
										},
										{
											"begin": 10745,
											"end": 10796,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "516"
										},
										{
											"begin": 10788,
											"end": 10795,
											"name": "DUP11",
											"source": 22
										},
										{
											"begin": 10779,
											"end": 10785,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 10768,
											"end": 10777,
											"name": "DUP12",
											"source": 22
										},
										{
											"begin": 10764,
											"end": 10786,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 10745,
											"end": 10796,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "395"
										},
										{
											"begin": 10745,
											"end": 10796,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 10745,
											"end": 10796,
											"name": "tag",
											"source": 22,
											"value": "516"
										},
										{
											"begin": 10745,
											"end": 10796,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 10735,
											"end": 10796,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": 10735,
											"end": 10796,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 10689,
											"end": 10806,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 10845,
											"end": 10848,
											"name": "PUSH",
											"source": 22,
											"value": "A0"
										},
										{
											"begin": 10872,
											"end": 10925,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "517"
										},
										{
											"begin": 10917,
											"end": 10924,
											"name": "DUP11",
											"source": 22
										},
										{
											"begin": 10908,
											"end": 10914,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 10897,
											"end": 10906,
											"name": "DUP12",
											"source": 22
										},
										{
											"begin": 10893,
											"end": 10915,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 10872,
											"end": 10925,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "397"
										},
										{
											"begin": 10872,
											"end": 10925,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 10872,
											"end": 10925,
											"name": "tag",
											"source": 22,
											"value": "517"
										},
										{
											"begin": 10872,
											"end": 10925,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 10862,
											"end": 10925,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 10862,
											"end": 10925,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 10816,
											"end": 10935,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 10974,
											"end": 10977,
											"name": "PUSH",
											"source": 22,
											"value": "C0"
										},
										{
											"begin": 11001,
											"end": 11054,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "518"
										},
										{
											"begin": 11046,
											"end": 11053,
											"name": "DUP11",
											"source": 22
										},
										{
											"begin": 11037,
											"end": 11043,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 11026,
											"end": 11035,
											"name": "DUP12",
											"source": 22
										},
										{
											"begin": 11022,
											"end": 11044,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 11001,
											"end": 11054,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "397"
										},
										{
											"begin": 11001,
											"end": 11054,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 11001,
											"end": 11054,
											"name": "tag",
											"source": 22,
											"value": "518"
										},
										{
											"begin": 11001,
											"end": 11054,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 10991,
											"end": 11054,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 10991,
											"end": 11054,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 10945,
											"end": 11064,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9872,
											"end": 11071,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 9872,
											"end": 11071,
											"name": "SWAP6",
											"source": 22
										},
										{
											"begin": 9872,
											"end": 11071,
											"name": "SWAP9",
											"source": 22
										},
										{
											"begin": 9872,
											"end": 11071,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 9872,
											"end": 11071,
											"name": "SWAP5",
											"source": 22
										},
										{
											"begin": 9872,
											"end": 11071,
											"name": "SWAP8",
											"source": 22
										},
										{
											"begin": 9872,
											"end": 11071,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9872,
											"end": 11071,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 9872,
											"end": 11071,
											"name": "SWAP6",
											"source": 22
										},
										{
											"begin": 9872,
											"end": 11071,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 9872,
											"end": 11071,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 11077,
											"end": 11551,
											"name": "tag",
											"source": 22,
											"value": "104"
										},
										{
											"begin": 11077,
											"end": 11551,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 11145,
											"end": 11151,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 11153,
											"end": 11159,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 11202,
											"end": 11204,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 11190,
											"end": 11199,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 11181,
											"end": 11188,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 11177,
											"end": 11200,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 11173,
											"end": 11205,
											"name": "SLT",
											"source": 22
										},
										{
											"begin": 11170,
											"end": 11289,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 11170,
											"end": 11289,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "520"
										},
										{
											"begin": 11170,
											"end": 11289,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 11208,
											"end": 11287,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "521"
										},
										{
											"begin": 11208,
											"end": 11287,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "368"
										},
										{
											"begin": 11208,
											"end": 11287,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 11208,
											"end": 11287,
											"name": "tag",
											"source": 22,
											"value": "521"
										},
										{
											"begin": 11208,
											"end": 11287,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 11170,
											"end": 11289,
											"name": "tag",
											"source": 22,
											"value": "520"
										},
										{
											"begin": 11170,
											"end": 11289,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 11328,
											"end": 11329,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 11353,
											"end": 11406,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "522"
										},
										{
											"begin": 11398,
											"end": 11405,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 11389,
											"end": 11395,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 11378,
											"end": 11387,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 11374,
											"end": 11396,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 11353,
											"end": 11406,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "373"
										},
										{
											"begin": 11353,
											"end": 11406,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 11353,
											"end": 11406,
											"name": "tag",
											"source": 22,
											"value": "522"
										},
										{
											"begin": 11353,
											"end": 11406,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 11343,
											"end": 11406,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 11343,
											"end": 11406,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 11299,
											"end": 11416,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 11455,
											"end": 11457,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 11481,
											"end": 11534,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "523"
										},
										{
											"begin": 11526,
											"end": 11533,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 11517,
											"end": 11523,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 11506,
											"end": 11515,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 11502,
											"end": 11524,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 11481,
											"end": 11534,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "373"
										},
										{
											"begin": 11481,
											"end": 11534,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 11481,
											"end": 11534,
											"name": "tag",
											"source": 22,
											"value": "523"
										},
										{
											"begin": 11481,
											"end": 11534,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 11471,
											"end": 11534,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 11471,
											"end": 11534,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 11426,
											"end": 11544,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 11077,
											"end": 11551,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 11077,
											"end": 11551,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 11077,
											"end": 11551,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 11077,
											"end": 11551,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 11077,
											"end": 11551,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 11077,
											"end": 11551,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 11557,
											"end": 11737,
											"name": "tag",
											"source": 22,
											"value": "398"
										},
										{
											"begin": 11557,
											"end": 11737,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 11605,
											"end": 11682,
											"name": "PUSH",
											"source": 22,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 11602,
											"end": 11603,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 11595,
											"end": 11683,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 11702,
											"end": 11706,
											"name": "PUSH",
											"source": 22,
											"value": "22"
										},
										{
											"begin": 11699,
											"end": 11700,
											"name": "PUSH",
											"source": 22,
											"value": "4"
										},
										{
											"begin": 11692,
											"end": 11707,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 11726,
											"end": 11730,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 11723,
											"end": 11724,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 11716,
											"end": 11731,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 11743,
											"end": 12063,
											"name": "tag",
											"source": 22,
											"value": "112"
										},
										{
											"begin": 11743,
											"end": 12063,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 11787,
											"end": 11793,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 11824,
											"end": 11825,
											"name": "PUSH",
											"source": 22,
											"value": "2"
										},
										{
											"begin": 11818,
											"end": 11822,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 11814,
											"end": 11826,
											"name": "DIV",
											"source": 22
										},
										{
											"begin": 11804,
											"end": 11826,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 11804,
											"end": 11826,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 11871,
											"end": 11872,
											"name": "PUSH",
											"source": 22,
											"value": "1"
										},
										{
											"begin": 11865,
											"end": 11869,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 11861,
											"end": 11873,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 11892,
											"end": 11910,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 11882,
											"end": 11963,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "526"
										},
										{
											"begin": 11882,
											"end": 11963,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 11948,
											"end": 11952,
											"name": "PUSH",
											"source": 22,
											"value": "7F"
										},
										{
											"begin": 11940,
											"end": 11946,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 11936,
											"end": 11953,
											"name": "AND",
											"source": 22
										},
										{
											"begin": 11926,
											"end": 11953,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 11926,
											"end": 11953,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 11882,
											"end": 11963,
											"name": "tag",
											"source": 22,
											"value": "526"
										},
										{
											"begin": 11882,
											"end": 11963,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 12010,
											"end": 12012,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 12002,
											"end": 12008,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 11999,
											"end": 12013,
											"name": "LT",
											"source": 22
										},
										{
											"begin": 11979,
											"end": 11997,
											"name": "DUP2",
											"source": 22
										},
										{
											"begin": 11976,
											"end": 12014,
											"name": "SUB",
											"source": 22
										},
										{
											"begin": 11973,
											"end": 12057,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "527"
										},
										{
											"begin": 11973,
											"end": 12057,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 12029,
											"end": 12047,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "528"
										},
										{
											"begin": 12029,
											"end": 12047,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "398"
										},
										{
											"begin": 12029,
											"end": 12047,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 12029,
											"end": 12047,
											"name": "tag",
											"source": 22,
											"value": "528"
										},
										{
											"begin": 12029,
											"end": 12047,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 11973,
											"end": 12057,
											"name": "tag",
											"source": 22,
											"value": "527"
										},
										{
											"begin": 11973,
											"end": 12057,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 11794,
											"end": 12063,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 11743,
											"end": 12063,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 11743,
											"end": 12063,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 11743,
											"end": 12063,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 11743,
											"end": 12063,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 12069,
											"end": 12249,
											"name": "tag",
											"source": 22,
											"value": "174"
										},
										{
											"begin": 12069,
											"end": 12249,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 12117,
											"end": 12194,
											"name": "PUSH",
											"source": 22,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 12114,
											"end": 12115,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 12107,
											"end": 12195,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 12214,
											"end": 12218,
											"name": "PUSH",
											"source": 22,
											"value": "41"
										},
										{
											"begin": 12211,
											"end": 12212,
											"name": "PUSH",
											"source": 22,
											"value": "4"
										},
										{
											"begin": 12204,
											"end": 12219,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 12238,
											"end": 12242,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 12235,
											"end": 12236,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 12228,
											"end": 12243,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 12255,
											"end": 13030,
											"name": "tag",
											"source": 22,
											"value": "192"
										},
										{
											"begin": 12255,
											"end": 13030,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 12488,
											"end": 12492,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 12526,
											"end": 12529,
											"name": "PUSH",
											"source": 22,
											"value": "C0"
										},
										{
											"begin": 12515,
											"end": 12524,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 12511,
											"end": 12530,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 12503,
											"end": 12530,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 12503,
											"end": 12530,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 12540,
											"end": 12611,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "531"
										},
										{
											"begin": 12608,
											"end": 12609,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 12597,
											"end": 12606,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 12593,
											"end": 12610,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 12584,
											"end": 12590,
											"name": "DUP10",
											"source": 22
										},
										{
											"begin": 12540,
											"end": 12611,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "383"
										},
										{
											"begin": 12540,
											"end": 12611,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 12540,
											"end": 12611,
											"name": "tag",
											"source": 22,
											"value": "531"
										},
										{
											"begin": 12540,
											"end": 12611,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 12621,
											"end": 12693,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "532"
										},
										{
											"begin": 12689,
											"end": 12691,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 12678,
											"end": 12687,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 12674,
											"end": 12692,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 12665,
											"end": 12671,
											"name": "DUP9",
											"source": 22
										},
										{
											"begin": 12621,
											"end": 12693,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "386"
										},
										{
											"begin": 12621,
											"end": 12693,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 12621,
											"end": 12693,
											"name": "tag",
											"source": 22,
											"value": "532"
										},
										{
											"begin": 12621,
											"end": 12693,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 12703,
											"end": 12775,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "533"
										},
										{
											"begin": 12771,
											"end": 12773,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 12760,
											"end": 12769,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 12756,
											"end": 12774,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 12747,
											"end": 12753,
											"name": "DUP8",
											"source": 22
										},
										{
											"begin": 12703,
											"end": 12775,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "386"
										},
										{
											"begin": 12703,
											"end": 12775,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 12703,
											"end": 12775,
											"name": "tag",
											"source": 22,
											"value": "533"
										},
										{
											"begin": 12703,
											"end": 12775,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 12785,
											"end": 12857,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "534"
										},
										{
											"begin": 12853,
											"end": 12855,
											"name": "PUSH",
											"source": 22,
											"value": "60"
										},
										{
											"begin": 12842,
											"end": 12851,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 12838,
											"end": 12856,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 12829,
											"end": 12835,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 12785,
											"end": 12857,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "379"
										},
										{
											"begin": 12785,
											"end": 12857,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 12785,
											"end": 12857,
											"name": "tag",
											"source": 22,
											"value": "534"
										},
										{
											"begin": 12785,
											"end": 12857,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 12867,
											"end": 12940,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "535"
										},
										{
											"begin": 12935,
											"end": 12938,
											"name": "PUSH",
											"source": 22,
											"value": "80"
										},
										{
											"begin": 12924,
											"end": 12933,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 12920,
											"end": 12939,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 12911,
											"end": 12917,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 12867,
											"end": 12940,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "379"
										},
										{
											"begin": 12867,
											"end": 12940,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 12867,
											"end": 12940,
											"name": "tag",
											"source": 22,
											"value": "535"
										},
										{
											"begin": 12867,
											"end": 12940,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 12950,
											"end": 13023,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "536"
										},
										{
											"begin": 13018,
											"end": 13021,
											"name": "PUSH",
											"source": 22,
											"value": "A0"
										},
										{
											"begin": 13007,
											"end": 13016,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 13003,
											"end": 13022,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 12994,
											"end": 13000,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 12950,
											"end": 13023,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "379"
										},
										{
											"begin": 12950,
											"end": 13023,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 12950,
											"end": 13023,
											"name": "tag",
											"source": 22,
											"value": "536"
										},
										{
											"begin": 12950,
											"end": 13023,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 12255,
											"end": 13030,
											"name": "SWAP8",
											"source": 22
										},
										{
											"begin": 12255,
											"end": 13030,
											"name": "SWAP7",
											"source": 22
										},
										{
											"begin": 12255,
											"end": 13030,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 12255,
											"end": 13030,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 12255,
											"end": 13030,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 12255,
											"end": 13030,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 12255,
											"end": 13030,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 12255,
											"end": 13030,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 12255,
											"end": 13030,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 12255,
											"end": 13030,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 13036,
											"end": 13368,
											"name": "tag",
											"source": 22,
											"value": "199"
										},
										{
											"begin": 13036,
											"end": 13368,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 13157,
											"end": 13161,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 13195,
											"end": 13197,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 13184,
											"end": 13193,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 13180,
											"end": 13198,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 13172,
											"end": 13198,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 13172,
											"end": 13198,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 13208,
											"end": 13279,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "538"
										},
										{
											"begin": 13276,
											"end": 13277,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 13265,
											"end": 13274,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 13261,
											"end": 13278,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 13252,
											"end": 13258,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 13208,
											"end": 13279,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "386"
										},
										{
											"begin": 13208,
											"end": 13279,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 13208,
											"end": 13279,
											"name": "tag",
											"source": 22,
											"value": "538"
										},
										{
											"begin": 13208,
											"end": 13279,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 13289,
											"end": 13361,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "539"
										},
										{
											"begin": 13357,
											"end": 13359,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 13346,
											"end": 13355,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 13342,
											"end": 13360,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 13333,
											"end": 13339,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 13289,
											"end": 13361,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "386"
										},
										{
											"begin": 13289,
											"end": 13361,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 13289,
											"end": 13361,
											"name": "tag",
											"source": 22,
											"value": "539"
										},
										{
											"begin": 13289,
											"end": 13361,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 13036,
											"end": 13368,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": 13036,
											"end": 13368,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 13036,
											"end": 13368,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 13036,
											"end": 13368,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 13036,
											"end": 13368,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 13036,
											"end": 13368,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 13374,
											"end": 13816,
											"name": "tag",
											"source": 22,
											"value": "217"
										},
										{
											"begin": 13374,
											"end": 13816,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 13523,
											"end": 13527,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 13561,
											"end": 13563,
											"name": "PUSH",
											"source": 22,
											"value": "60"
										},
										{
											"begin": 13550,
											"end": 13559,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 13546,
											"end": 13564,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 13538,
											"end": 13564,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 13538,
											"end": 13564,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 13574,
											"end": 13645,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "541"
										},
										{
											"begin": 13642,
											"end": 13643,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 13631,
											"end": 13640,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 13627,
											"end": 13644,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 13618,
											"end": 13624,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 13574,
											"end": 13645,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "386"
										},
										{
											"begin": 13574,
											"end": 13645,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 13574,
											"end": 13645,
											"name": "tag",
											"source": 22,
											"value": "541"
										},
										{
											"begin": 13574,
											"end": 13645,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 13655,
											"end": 13727,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "542"
										},
										{
											"begin": 13723,
											"end": 13725,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 13712,
											"end": 13721,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 13708,
											"end": 13726,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 13699,
											"end": 13705,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 13655,
											"end": 13727,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "379"
										},
										{
											"begin": 13655,
											"end": 13727,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 13655,
											"end": 13727,
											"name": "tag",
											"source": 22,
											"value": "542"
										},
										{
											"begin": 13655,
											"end": 13727,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 13737,
											"end": 13809,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "543"
										},
										{
											"begin": 13805,
											"end": 13807,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 13794,
											"end": 13803,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 13790,
											"end": 13808,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 13781,
											"end": 13787,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 13737,
											"end": 13809,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "379"
										},
										{
											"begin": 13737,
											"end": 13809,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 13737,
											"end": 13809,
											"name": "tag",
											"source": 22,
											"value": "543"
										},
										{
											"begin": 13737,
											"end": 13809,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 13374,
											"end": 13816,
											"name": "SWAP5",
											"source": 22
										},
										{
											"begin": 13374,
											"end": 13816,
											"name": "SWAP4",
											"source": 22
										},
										{
											"begin": 13374,
											"end": 13816,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 13374,
											"end": 13816,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 13374,
											"end": 13816,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 13374,
											"end": 13816,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 13374,
											"end": 13816,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 13822,
											"end": 14486,
											"name": "tag",
											"source": 22,
											"value": "287"
										},
										{
											"begin": 13822,
											"end": 14486,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 14027,
											"end": 14031,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 14065,
											"end": 14068,
											"name": "PUSH",
											"source": 22,
											"value": "A0"
										},
										{
											"begin": 14054,
											"end": 14063,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 14050,
											"end": 14069,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 14042,
											"end": 14069,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 14042,
											"end": 14069,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 14079,
											"end": 14150,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "545"
										},
										{
											"begin": 14147,
											"end": 14148,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 14136,
											"end": 14145,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 14132,
											"end": 14149,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 14123,
											"end": 14129,
											"name": "DUP9",
											"source": 22
										},
										{
											"begin": 14079,
											"end": 14150,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "383"
										},
										{
											"begin": 14079,
											"end": 14150,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 14079,
											"end": 14150,
											"name": "tag",
											"source": 22,
											"value": "545"
										},
										{
											"begin": 14079,
											"end": 14150,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 14160,
											"end": 14232,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "546"
										},
										{
											"begin": 14228,
											"end": 14230,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 14217,
											"end": 14226,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 14213,
											"end": 14231,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 14204,
											"end": 14210,
											"name": "DUP8",
											"source": 22
										},
										{
											"begin": 14160,
											"end": 14232,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "383"
										},
										{
											"begin": 14160,
											"end": 14232,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 14160,
											"end": 14232,
											"name": "tag",
											"source": 22,
											"value": "546"
										},
										{
											"begin": 14160,
											"end": 14232,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 14242,
											"end": 14314,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "547"
										},
										{
											"begin": 14310,
											"end": 14312,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 14299,
											"end": 14308,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 14295,
											"end": 14313,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 14286,
											"end": 14292,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 14242,
											"end": 14314,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "383"
										},
										{
											"begin": 14242,
											"end": 14314,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 14242,
											"end": 14314,
											"name": "tag",
											"source": 22,
											"value": "547"
										},
										{
											"begin": 14242,
											"end": 14314,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 14324,
											"end": 14396,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "548"
										},
										{
											"begin": 14392,
											"end": 14394,
											"name": "PUSH",
											"source": 22,
											"value": "60"
										},
										{
											"begin": 14381,
											"end": 14390,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 14377,
											"end": 14395,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 14368,
											"end": 14374,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 14324,
											"end": 14396,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "379"
										},
										{
											"begin": 14324,
											"end": 14396,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 14324,
											"end": 14396,
											"name": "tag",
											"source": 22,
											"value": "548"
										},
										{
											"begin": 14324,
											"end": 14396,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 14406,
											"end": 14479,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "549"
										},
										{
											"begin": 14474,
											"end": 14477,
											"name": "PUSH",
											"source": 22,
											"value": "80"
										},
										{
											"begin": 14463,
											"end": 14472,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 14459,
											"end": 14478,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 14450,
											"end": 14456,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 14406,
											"end": 14479,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "386"
										},
										{
											"begin": 14406,
											"end": 14479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 14406,
											"end": 14479,
											"name": "tag",
											"source": 22,
											"value": "549"
										},
										{
											"begin": 14406,
											"end": 14479,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 13822,
											"end": 14486,
											"name": "SWAP7",
											"source": 22
										},
										{
											"begin": 13822,
											"end": 14486,
											"name": "SWAP6",
											"source": 22
										},
										{
											"begin": 13822,
											"end": 14486,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 13822,
											"end": 14486,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 13822,
											"end": 14486,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 13822,
											"end": 14486,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 13822,
											"end": 14486,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 13822,
											"end": 14486,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 13822,
											"end": 14486,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 14492,
											"end": 15037,
											"name": "tag",
											"source": 22,
											"value": "308"
										},
										{
											"begin": 14492,
											"end": 15037,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 14665,
											"end": 14669,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 14703,
											"end": 14706,
											"name": "PUSH",
											"source": 22,
											"value": "80"
										},
										{
											"begin": 14692,
											"end": 14701,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 14688,
											"end": 14707,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 14680,
											"end": 14707,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 14680,
											"end": 14707,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 14717,
											"end": 14788,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "551"
										},
										{
											"begin": 14785,
											"end": 14786,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 14774,
											"end": 14783,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 14770,
											"end": 14787,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 14761,
											"end": 14767,
											"name": "DUP8",
											"source": 22
										},
										{
											"begin": 14717,
											"end": 14788,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "383"
										},
										{
											"begin": 14717,
											"end": 14788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 14717,
											"end": 14788,
											"name": "tag",
											"source": 22,
											"value": "551"
										},
										{
											"begin": 14717,
											"end": 14788,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 14798,
											"end": 14866,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "552"
										},
										{
											"begin": 14862,
											"end": 14864,
											"name": "PUSH",
											"source": 22,
											"value": "20"
										},
										{
											"begin": 14851,
											"end": 14860,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 14847,
											"end": 14865,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 14838,
											"end": 14844,
											"name": "DUP7",
											"source": 22
										},
										{
											"begin": 14798,
											"end": 14866,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "381"
										},
										{
											"begin": 14798,
											"end": 14866,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 14798,
											"end": 14866,
											"name": "tag",
											"source": 22,
											"value": "552"
										},
										{
											"begin": 14798,
											"end": 14866,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 14876,
											"end": 14948,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "553"
										},
										{
											"begin": 14944,
											"end": 14946,
											"name": "PUSH",
											"source": 22,
											"value": "40"
										},
										{
											"begin": 14933,
											"end": 14942,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 14929,
											"end": 14947,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 14920,
											"end": 14926,
											"name": "DUP6",
											"source": 22
										},
										{
											"begin": 14876,
											"end": 14948,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "383"
										},
										{
											"begin": 14876,
											"end": 14948,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 14876,
											"end": 14948,
											"name": "tag",
											"source": 22,
											"value": "553"
										},
										{
											"begin": 14876,
											"end": 14948,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 14958,
											"end": 15030,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "554"
										},
										{
											"begin": 15026,
											"end": 15028,
											"name": "PUSH",
											"source": 22,
											"value": "60"
										},
										{
											"begin": 15015,
											"end": 15024,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 15011,
											"end": 15029,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 15002,
											"end": 15008,
											"name": "DUP5",
											"source": 22
										},
										{
											"begin": 14958,
											"end": 15030,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "383"
										},
										{
											"begin": 14958,
											"end": 15030,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 14958,
											"end": 15030,
											"name": "tag",
											"source": 22,
											"value": "554"
										},
										{
											"begin": 14958,
											"end": 15030,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 14492,
											"end": 15037,
											"name": "SWAP6",
											"source": 22
										},
										{
											"begin": 14492,
											"end": 15037,
											"name": "SWAP5",
											"source": 22
										},
										{
											"begin": 14492,
											"end": 15037,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 14492,
											"end": 15037,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 14492,
											"end": 15037,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 14492,
											"end": 15037,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 14492,
											"end": 15037,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 14492,
											"end": 15037,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 15043,
											"end": 15223,
											"name": "tag",
											"source": 22,
											"value": "315"
										},
										{
											"begin": 15043,
											"end": 15223,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 15091,
											"end": 15168,
											"name": "PUSH",
											"source": 22,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 15088,
											"end": 15089,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 15081,
											"end": 15169,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 15188,
											"end": 15192,
											"name": "PUSH",
											"source": 22,
											"value": "21"
										},
										{
											"begin": 15185,
											"end": 15186,
											"name": "PUSH",
											"source": 22,
											"value": "4"
										},
										{
											"begin": 15178,
											"end": 15193,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 15212,
											"end": 15216,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 15209,
											"end": 15210,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 15202,
											"end": 15217,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 15229,
											"end": 15409,
											"name": "tag",
											"source": 22,
											"value": "399"
										},
										{
											"begin": 15229,
											"end": 15409,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 15277,
											"end": 15354,
											"name": "PUSH",
											"source": 22,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 15274,
											"end": 15275,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 15267,
											"end": 15355,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 15374,
											"end": 15378,
											"name": "PUSH",
											"source": 22,
											"value": "11"
										},
										{
											"begin": 15371,
											"end": 15372,
											"name": "PUSH",
											"source": 22,
											"value": "4"
										},
										{
											"begin": 15364,
											"end": 15379,
											"name": "MSTORE",
											"source": 22
										},
										{
											"begin": 15398,
											"end": 15402,
											"name": "PUSH",
											"source": 22,
											"value": "24"
										},
										{
											"begin": 15395,
											"end": 15396,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 15388,
											"end": 15403,
											"name": "REVERT",
											"source": 22
										},
										{
											"begin": 15415,
											"end": 15606,
											"name": "tag",
											"source": 22,
											"value": "353"
										},
										{
											"begin": 15415,
											"end": 15606,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 15455,
											"end": 15458,
											"name": "PUSH",
											"source": 22,
											"value": "0"
										},
										{
											"begin": 15474,
											"end": 15494,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "558"
										},
										{
											"begin": 15492,
											"end": 15493,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 15474,
											"end": 15494,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "374"
										},
										{
											"begin": 15474,
											"end": 15494,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 15474,
											"end": 15494,
											"name": "tag",
											"source": 22,
											"value": "558"
										},
										{
											"begin": 15474,
											"end": 15494,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 15469,
											"end": 15494,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 15469,
											"end": 15494,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 15508,
											"end": 15528,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "559"
										},
										{
											"begin": 15526,
											"end": 15527,
											"name": "DUP4",
											"source": 22
										},
										{
											"begin": 15508,
											"end": 15528,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "374"
										},
										{
											"begin": 15508,
											"end": 15528,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 15508,
											"end": 15528,
											"name": "tag",
											"source": 22,
											"value": "559"
										},
										{
											"begin": 15508,
											"end": 15528,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 15503,
											"end": 15528,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 15503,
											"end": 15528,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 15551,
											"end": 15552,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 15548,
											"end": 15549,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 15544,
											"end": 15553,
											"name": "ADD",
											"source": 22
										},
										{
											"begin": 15537,
											"end": 15553,
											"name": "SWAP1",
											"source": 22
										},
										{
											"begin": 15537,
											"end": 15553,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 15572,
											"end": 15575,
											"name": "DUP1",
											"source": 22
										},
										{
											"begin": 15569,
											"end": 15570,
											"name": "DUP3",
											"source": 22
										},
										{
											"begin": 15566,
											"end": 15576,
											"name": "GT",
											"source": 22
										},
										{
											"begin": 15563,
											"end": 15599,
											"name": "ISZERO",
											"source": 22
										},
										{
											"begin": 15563,
											"end": 15599,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "560"
										},
										{
											"begin": 15563,
											"end": 15599,
											"name": "JUMPI",
											"source": 22
										},
										{
											"begin": 15579,
											"end": 15597,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "561"
										},
										{
											"begin": 15579,
											"end": 15597,
											"name": "PUSH [tag]",
											"source": 22,
											"value": "399"
										},
										{
											"begin": 15579,
											"end": 15597,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 22
										},
										{
											"begin": 15579,
											"end": 15597,
											"name": "tag",
											"source": 22,
											"value": "561"
										},
										{
											"begin": 15579,
											"end": 15597,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 15563,
											"end": 15599,
											"name": "tag",
											"source": 22,
											"value": "560"
										},
										{
											"begin": 15563,
											"end": 15599,
											"name": "JUMPDEST",
											"source": 22
										},
										{
											"begin": 15415,
											"end": 15606,
											"name": "SWAP3",
											"source": 22
										},
										{
											"begin": 15415,
											"end": 15606,
											"name": "SWAP2",
											"source": 22
										},
										{
											"begin": 15415,
											"end": 15606,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 15415,
											"end": 15606,
											"name": "POP",
											"source": 22
										},
										{
											"begin": 15415,
											"end": 15606,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 22
										}
									]
								},
								"0D9FEC584A25F4929244DC338DCB423F6E6B1B07580AB8FBD5DD5174210DA996": "4768616e6120436f6d6d756e69636174696f6e20546563686e6f6c6f677920556e697665727369747920"
							},
							"sourceList": [
								"@openzeppelin/contracts/access/Ownable.sol",
								"@openzeppelin/contracts/interfaces/IERC5267.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/Nonces.sol",
								"@openzeppelin/contracts/utils/Pausable.sol",
								"@openzeppelin/contracts/utils/ShortStrings.sol",
								"@openzeppelin/contracts/utils/StorageSlot.sol",
								"@openzeppelin/contracts/utils/Strings.sol",
								"@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts/utils/math/Math.sol",
								"@openzeppelin/contracts/utils/math/SignedMath.sol",
								"contracts/ERC_Token.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"decimals()": "313ce567",
							"eip712Domain()": "84b0196e",
							"mint(address,uint256)": "40c10f19",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"owner()": "8da5cb5b",
							"pause()": "8456cb59",
							"paused()": "5c975abb",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"renounceOwnership()": "715018a6",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b",
							"unpause()": "3f4ba83a"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC2612ExpiredSignature(uint256)\":[{\"details\":\"Permit deadline has expired.\"}],\"ERC2612InvalidSigner(address,address)\":[{\"details\":\"Mismatched signature.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC_Token.sol\":\"GhanaCommunicationTechnologyUniversity\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c345af1b0e7ea28d1216d6a04ab28f5534a5229b9edf9ca3cd0e84950ae58d26\",\"dweb:/ipfs/QmY63jtSrYpLRe8Gj1ep2vMDCKxGNNG3hnNVKBVnrs2nmA\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol\":{\"keccak256\":\"0xb18c53aecf95e53339972e3d496a56c42e6b60a03a49ce8e6a37d3bd9d5d0a67\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4a8e54b0924a1acd92806a843998568d6bec01798c550bc440a85cfcd9cfba99\",\"dweb:/ipfs/QmZ26Y3ibYPbCRVB65NAQrGBF1UKDEu2fB8CHHMhYbBqmV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0xc858a86a35701004d89022a5e98819aac46ccbdc4072fc9dd43928a676b1a2ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://18acebb483c512c0eaafcb437f09c839972c3f0d36f0201ea7baa2926b987dd2\",\"dweb:/ipfs/Qmd9bf2noaDSYDtf6FMSzKu7LPhuf91jsVNmcoCuTCuGic\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1a4b83328c98d518a2699c2cbe9e9b055e78aa57fa8639f1b88deb8b3750b5dc\",\"dweb:/ipfs/QmXdcYj5v7zQxXFPULShHkR5p4Wa2zYuupbHnFdV3cHYtc\"]},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c\",\"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0798def67258d9a3cc20b2b4da7ebf351a5cefe0abfdd665d2d81f8e32f89b21\",\"dweb:/ipfs/QmPEvJosnPfzHNjKvCv2D3891mA2Ww8eUwkqrxBjuYdHCt\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]},\"contracts/ERC_Token.sol\":{\"keccak256\":\"0xd305dea6d9100544043c89fc4789a8cadc083615143316d93a95713c689d2cff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d760a669f47401a09e465d9b59b37cfb485959bb1dfb127760af4105ed9b1175\",\"dweb:/ipfs/QmfXRUHKoDwHKH3WX9z1tWr6W4ekRMujmmWQo8V1N5YWCr\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 332,
								"contract": "contracts/ERC_Token.sol:GhanaCommunicationTechnologyUniversity",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 338,
								"contract": "contracts/ERC_Token.sol:GhanaCommunicationTechnologyUniversity",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 340,
								"contract": "contracts/ERC_Token.sol:GhanaCommunicationTechnologyUniversity",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 342,
								"contract": "contracts/ERC_Token.sol:GhanaCommunicationTechnologyUniversity",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 344,
								"contract": "contracts/ERC_Token.sol:GhanaCommunicationTechnologyUniversity",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 1305,
								"contract": "contracts/ERC_Token.sol:GhanaCommunicationTechnologyUniversity",
								"label": "_paused",
								"offset": 0,
								"slot": "5",
								"type": "t_bool"
							},
							{
								"astId": 8,
								"contract": "contracts/ERC_Token.sol:GhanaCommunicationTechnologyUniversity",
								"label": "_owner",
								"offset": 1,
								"slot": "5",
								"type": "t_address"
							},
							{
								"astId": 2380,
								"contract": "contracts/ERC_Token.sol:GhanaCommunicationTechnologyUniversity",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "6",
								"type": "t_string_storage"
							},
							{
								"astId": 2382,
								"contract": "contracts/ERC_Token.sol:GhanaCommunicationTechnologyUniversity",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "7",
								"type": "t_string_storage"
							},
							{
								"astId": 1242,
								"contract": "contracts/ERC_Token.sol:GhanaCommunicationTechnologyUniversity",
								"label": "_nonces",
								"offset": 0,
								"slot": "8",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							1228
						],
						"Ownable": [
							147
						]
					},
					"id": 148,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 148,
							"sourceUnit": 1229,
							"src": "128:45:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1228,
										"src": "136:7:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Context",
										"nameLocations": [
											"692:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1228,
										"src": "692:7:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "692:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "175:487:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 147,
							"linearizedBaseContracts": [
								147,
								1228
							],
							"name": "Ownable",
							"nameLocation": "681:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 8,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "722:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 147,
									"src": "706:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 7,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "706:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 9,
										"nodeType": "StructuredDocumentation",
										"src": "735:85:0",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 13,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "831:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "866:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "858:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "858:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "857:17:0"
									},
									"src": "825:50:0"
								},
								{
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "881:82:0",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 18,
									"name": "OwnableInvalidOwner",
									"nameLocation": "974:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1002:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "994:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "994:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "993:15:0"
									},
									"src": "968:41:0"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 24,
									"name": "OwnershipTransferred",
									"nameLocation": "1021:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 20,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1058:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1042:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 19,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1042:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 22,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1089:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1073:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1041:57:0"
									},
									"src": "1015:84:0"
								},
								{
									"body": {
										"id": 49,
										"nodeType": "Block",
										"src": "1259:153:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 35,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 30,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "1273:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 33,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1297:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 32,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1289:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 31,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1289:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 34,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1289:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1273:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 44,
												"nodeType": "IfStatement",
												"src": "1269:95:0",
												"trueBody": {
													"id": 43,
													"nodeType": "Block",
													"src": "1301:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 39,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1350:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 38,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1342:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 37,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1342:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 40,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1342:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 36,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "1322:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 41,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1322:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 42,
															"nodeType": "RevertStatement",
															"src": "1315:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 46,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 27,
															"src": "1392:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 45,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "1373:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 47,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1373:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 48,
												"nodeType": "ExpressionStatement",
												"src": "1373:32:0"
											}
										]
									},
									"documentation": {
										"id": 25,
										"nodeType": "StructuredDocumentation",
										"src": "1105:115:0",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 50,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1245:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "1237:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1237:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1236:22:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1259:0:0"
									},
									"scope": 147,
									"src": "1225:187:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 57,
										"nodeType": "Block",
										"src": "1521:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 53,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 84,
														"src": "1531:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 54,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1531:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 55,
												"nodeType": "ExpressionStatement",
												"src": "1531:13:0"
											},
											{
												"id": 56,
												"nodeType": "PlaceholderStatement",
												"src": "1554:1:0"
											}
										]
									},
									"documentation": {
										"id": 51,
										"nodeType": "StructuredDocumentation",
										"src": "1418:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 58,
									"name": "onlyOwner",
									"nameLocation": "1509:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1518:2:0"
									},
									"src": "1500:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 66,
										"nodeType": "Block",
										"src": "1693:30:0",
										"statements": [
											{
												"expression": {
													"id": 64,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "1710:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 63,
												"id": 65,
												"nodeType": "Return",
												"src": "1703:13:0"
											}
										]
									},
									"documentation": {
										"id": 59,
										"nodeType": "StructuredDocumentation",
										"src": "1568:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 67,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1647:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1652:2:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "1684:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 61,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1684:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1683:9:0"
									},
									"scope": 147,
									"src": "1638:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "1841:117:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 75,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 71,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 67,
															"src": "1855:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 72,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1855:7:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 73,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1210,
															"src": "1866:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 74,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1866:12:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1855:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 82,
												"nodeType": "IfStatement",
												"src": "1851:101:0",
												"trueBody": {
													"id": 81,
													"nodeType": "Block",
													"src": "1880:72:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 77,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1210,
																			"src": "1928:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 78,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1928:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 76,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 13,
																	"src": "1901:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 79,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1901:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 80,
															"nodeType": "RevertStatement",
															"src": "1894:47:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "1729:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 84,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1805:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1816:2:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1841:0:0"
									},
									"scope": 147,
									"src": "1796:162:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 97,
										"nodeType": "Block",
										"src": "2347:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 93,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2384:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 92,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2376:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 91,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2376:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 94,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2376:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 90,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2357:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2357:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2357:30:0"
											}
										]
									},
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "1964:324:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 98,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 88,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 87,
												"name": "onlyOwner",
												"nameLocations": [
													"2337:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2337:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2337:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "2302:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2319:2:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2347:0:0"
									},
									"scope": 147,
									"src": "2293:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 125,
										"nodeType": "Block",
										"src": "2613:145:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 106,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 101,
														"src": "2627:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 109,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2647:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2639:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 107,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2639:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 110,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2639:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2627:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 120,
												"nodeType": "IfStatement",
												"src": "2623:91:0",
												"trueBody": {
													"id": 119,
													"nodeType": "Block",
													"src": "2651:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 115,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2700:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 114,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2692:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 113,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2692:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 116,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2692:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 112,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "2672:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 117,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2672:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 118,
															"nodeType": "RevertStatement",
															"src": "2665:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 122,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 101,
															"src": "2742:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 121,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2723:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2723:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 124,
												"nodeType": "ExpressionStatement",
												"src": "2723:28:0"
											}
										]
									},
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "2400:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 126,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 104,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 103,
												"name": "onlyOwner",
												"nameLocations": [
													"2603:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2603:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2603:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2552:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2578:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "2570:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:18:0"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2613:0:0"
									},
									"scope": 147,
									"src": "2543:215:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 145,
										"nodeType": "Block",
										"src": "2975:124:0",
										"statements": [
											{
												"assignments": [
													133
												],
												"declarations": [
													{
														"constant": false,
														"id": 133,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2993:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 145,
														"src": "2985:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 132,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2985:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 135,
												"initialValue": {
													"id": 134,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "3004:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2985:25:0"
											},
											{
												"expression": {
													"id": 138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 136,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "3020:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 137,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 129,
														"src": "3029:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3020:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 139,
												"nodeType": "ExpressionStatement",
												"src": "3020:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 141,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 133,
															"src": "3073:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 142,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 129,
															"src": "3083:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 140,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 24,
														"src": "3052:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3052:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 144,
												"nodeType": "EmitStatement",
												"src": "3047:45:0"
											}
										]
									},
									"documentation": {
										"id": 127,
										"nodeType": "StructuredDocumentation",
										"src": "2764:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2921:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2948:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "2940:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2940:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2939:18:0"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2975:0:0"
									},
									"scope": 147,
									"src": "2912:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 148,
							"src": "663:2438:0",
							"usedErrors": [
								13,
								18
							],
							"usedEvents": [
								24
							]
						}
					],
					"src": "102:3000:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/interfaces/IERC5267.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC5267.sol",
					"exportedSymbols": {
						"IERC5267": [
							172
						]
					},
					"id": 173,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 149,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "107:24:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC5267",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 172,
							"linearizedBaseContracts": [
								172
							],
							"name": "IERC5267",
							"nameLocation": "143:8:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 150,
										"nodeType": "StructuredDocumentation",
										"src": "158:84:1",
										"text": " @dev MAY be emitted to signal that the domain could have changed."
									},
									"eventSelector": "0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31",
									"id": 152,
									"name": "EIP712DomainChanged",
									"nameLocation": "253:19:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 151,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "272:2:1"
									},
									"src": "247:28:1"
								},
								{
									"documentation": {
										"id": 153,
										"nodeType": "StructuredDocumentation",
										"src": "281:140:1",
										"text": " @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n signature."
									},
									"functionSelector": "84b0196e",
									"id": 171,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "eip712Domain",
									"nameLocation": "435:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 154,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "447:2:1"
									},
									"returnParameters": {
										"id": 170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "fields",
												"nameLocation": "517:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "510:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes1",
													"typeString": "bytes1"
												},
												"typeName": {
													"id": 155,
													"name": "bytes1",
													"nodeType": "ElementaryTypeName",
													"src": "510:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 158,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "551:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "537:18:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 157,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "537:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 160,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "583:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "569:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 159,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "569:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "chainId",
												"nameLocation": "612:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "604:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 161,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "604:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "verifyingContract",
												"nameLocation": "641:17:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "633:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 163,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "633:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "680:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "672:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 165,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "672:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "extensions",
												"nameLocation": "715:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "698:27:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 167,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "698:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 168,
													"nodeType": "ArrayTypeName",
													"src": "698:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "496:239:1"
									},
									"scope": 172,
									"src": "426:310:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 173,
							"src": "133:605:1",
							"usedErrors": [],
							"usedEvents": [
								152
							]
						}
					],
					"src": "107:632:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							309
						],
						"IERC20Errors": [
							214
						],
						"IERC721Errors": [
							262
						]
					},
					"id": 310,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 174,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 175,
								"nodeType": "StructuredDocumentation",
								"src": "138:139:2",
								"text": " @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."
							},
							"fullyImplemented": true,
							"id": 214,
							"linearizedBaseContracts": [
								214
							],
							"name": "IERC20Errors",
							"nameLocation": "288:12:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 176,
										"nodeType": "StructuredDocumentation",
										"src": "307:309:2",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 184,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "627:24:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 183,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 178,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "660:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 184,
												"src": "652:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 177,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "676:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 184,
												"src": "668:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 179,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 182,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "693:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 184,
												"src": "685:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 181,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "685:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "651:49:2"
									},
									"src": "621:80:2"
								},
								{
									"documentation": {
										"id": 185,
										"nodeType": "StructuredDocumentation",
										"src": "707:152:2",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 189,
									"name": "ERC20InvalidSender",
									"nameLocation": "870:18:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "897:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "889:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 186,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "889:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "888:16:2"
									},
									"src": "864:41:2"
								},
								{
									"documentation": {
										"id": 190,
										"nodeType": "StructuredDocumentation",
										"src": "911:159:2",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 194,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1081:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1110:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 194,
												"src": "1102:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 191,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1101:18:2"
									},
									"src": "1075:45:2"
								},
								{
									"documentation": {
										"id": 195,
										"nodeType": "StructuredDocumentation",
										"src": "1126:345:2",
										"text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 203,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1482:26:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 197,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1517:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "1509:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 196,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1509:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1534:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "1526:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 198,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1526:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1553:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "1545:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 200,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1545:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1508:52:2"
									},
									"src": "1476:85:2"
								},
								{
									"documentation": {
										"id": 204,
										"nodeType": "StructuredDocumentation",
										"src": "1567:174:2",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 208,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1752:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1781:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 208,
												"src": "1773:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 205,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1773:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:18:2"
									},
									"src": "1746:45:2"
								},
								{
									"documentation": {
										"id": 209,
										"nodeType": "StructuredDocumentation",
										"src": "1797:195:2",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 213,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2003:19:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2031:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "2023:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 210,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2023:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2022:17:2"
									},
									"src": "1997:43:2"
								}
							],
							"scope": 310,
							"src": "278:1764:2",
							"usedErrors": [
								184,
								189,
								194,
								203,
								208,
								213
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 215,
								"nodeType": "StructuredDocumentation",
								"src": "2044:141:2",
								"text": " @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."
							},
							"fullyImplemented": true,
							"id": 262,
							"linearizedBaseContracts": [
								262
							],
							"name": "IERC721Errors",
							"nameLocation": "2196:13:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 216,
										"nodeType": "StructuredDocumentation",
										"src": "2216:219:2",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 220,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2446:18:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 219,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 218,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2473:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 220,
												"src": "2465:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 217,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2465:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2464:15:2"
									},
									"src": "2440:40:2"
								},
								{
									"documentation": {
										"id": 221,
										"nodeType": "StructuredDocumentation",
										"src": "2486:132:2",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 225,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2629:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2660:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 225,
												"src": "2652:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 222,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2652:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2651:17:2"
									},
									"src": "2623:46:2"
								},
								{
									"documentation": {
										"id": 226,
										"nodeType": "StructuredDocumentation",
										"src": "2675:289:2",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 234,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "2975:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 233,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3004:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 234,
												"src": "2996:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 227,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2996:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 230,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3020:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 234,
												"src": "3012:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 229,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3012:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 232,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3037:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 234,
												"src": "3029:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 231,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3029:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2995:48:2"
									},
									"src": "2969:75:2"
								},
								{
									"documentation": {
										"id": 235,
										"nodeType": "StructuredDocumentation",
										"src": "3050:152:2",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 239,
									"name": "ERC721InvalidSender",
									"nameLocation": "3213:19:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 237,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3241:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 239,
												"src": "3233:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 236,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3233:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3232:16:2"
									},
									"src": "3207:42:2"
								},
								{
									"documentation": {
										"id": 240,
										"nodeType": "StructuredDocumentation",
										"src": "3255:159:2",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 244,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3425:21:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 242,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3455:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 244,
												"src": "3447:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 241,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3447:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3446:18:2"
									},
									"src": "3419:46:2"
								},
								{
									"documentation": {
										"id": 245,
										"nodeType": "StructuredDocumentation",
										"src": "3471:247:2",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 251,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3729:26:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 247,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3764:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "3756:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 246,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3756:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 249,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3782:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "3774:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 248,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3774:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3755:35:2"
									},
									"src": "3723:68:2"
								},
								{
									"documentation": {
										"id": 252,
										"nodeType": "StructuredDocumentation",
										"src": "3797:174:2",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 256,
									"name": "ERC721InvalidApprover",
									"nameLocation": "3982:21:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 255,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 254,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4012:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 256,
												"src": "4004:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 253,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4004:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4003:18:2"
									},
									"src": "3976:46:2"
								},
								{
									"documentation": {
										"id": 257,
										"nodeType": "StructuredDocumentation",
										"src": "4028:197:2",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 261,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4236:21:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 260,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 259,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4266:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "4258:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 258,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4258:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4257:18:2"
									},
									"src": "4230:46:2"
								}
							],
							"scope": 310,
							"src": "2186:2092:2",
							"usedErrors": [
								220,
								225,
								234,
								239,
								244,
								251,
								256,
								261
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 263,
								"nodeType": "StructuredDocumentation",
								"src": "4280:143:2",
								"text": " @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."
							},
							"fullyImplemented": true,
							"id": 309,
							"linearizedBaseContracts": [
								309
							],
							"name": "IERC1155Errors",
							"nameLocation": "4434:14:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 264,
										"nodeType": "StructuredDocumentation",
										"src": "4455:361:2",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 274,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4827:26:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 273,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 266,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4862:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 274,
												"src": "4854:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 265,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4854:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 268,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4878:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 274,
												"src": "4870:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 267,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4870:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "4895:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 274,
												"src": "4887:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 269,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4887:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 272,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4911:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 274,
												"src": "4903:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 271,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4903:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4853:66:2"
									},
									"src": "4821:99:2"
								},
								{
									"documentation": {
										"id": 275,
										"nodeType": "StructuredDocumentation",
										"src": "4926:152:2",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 279,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5089:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 278,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 277,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5118:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "5110:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 276,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5110:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5109:16:2"
									},
									"src": "5083:43:2"
								},
								{
									"documentation": {
										"id": 280,
										"nodeType": "StructuredDocumentation",
										"src": "5132:159:2",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 284,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5302:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5333:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "5325:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 281,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5325:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5324:18:2"
									},
									"src": "5296:47:2"
								},
								{
									"documentation": {
										"id": 285,
										"nodeType": "StructuredDocumentation",
										"src": "5349:256:2",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 291,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5616:28:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 290,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 287,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5653:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "5645:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 286,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5645:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 289,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5671:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "5663:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 288,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5663:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5644:33:2"
									},
									"src": "5610:68:2"
								},
								{
									"documentation": {
										"id": 292,
										"nodeType": "StructuredDocumentation",
										"src": "5684:174:2",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 296,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "5869:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "5900:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 296,
												"src": "5892:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 293,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5892:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5891:18:2"
									},
									"src": "5863:47:2"
								},
								{
									"documentation": {
										"id": 297,
										"nodeType": "StructuredDocumentation",
										"src": "5916:197:2",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 301,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6124:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 300,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 299,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6155:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 301,
												"src": "6147:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 298,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6147:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6146:18:2"
									},
									"src": "6118:47:2"
								},
								{
									"documentation": {
										"id": 302,
										"nodeType": "StructuredDocumentation",
										"src": "6171:280:2",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 308,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6462:25:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 307,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 304,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6496:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "6488:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 303,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6488:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 306,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6515:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "6507:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 305,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6507:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6487:41:2"
									},
									"src": "6456:73:2"
								}
							],
							"scope": 310,
							"src": "4424:2107:2",
							"usedErrors": [
								274,
								279,
								284,
								291,
								296,
								301,
								308
							],
							"usedEvents": []
						}
					],
					"src": "112:6420:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							1228
						],
						"ERC20": [
							824
						],
						"IERC20": [
							902
						],
						"IERC20Errors": [
							214
						],
						"IERC20Metadata": [
							1162
						]
					},
					"id": 825,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 311,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 313,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 825,
							"sourceUnit": 903,
							"src": "131:36:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 312,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 902,
										"src": "139:6:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 315,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 825,
							"sourceUnit": 1163,
							"src": "168:63:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 314,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1162,
										"src": "176:14:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 317,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 825,
							"sourceUnit": 1229,
							"src": "232:48:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 316,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1228,
										"src": "240:7:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"file": "../../interfaces/draft-IERC6093.sol",
							"id": 319,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 825,
							"sourceUnit": 310,
							"src": "281:65:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 318,
										"name": "IERC20Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 214,
										"src": "289:12:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 321,
										"name": "Context",
										"nameLocations": [
											"1428:7:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1228,
										"src": "1428:7:3"
									},
									"id": 322,
									"nodeType": "InheritanceSpecifier",
									"src": "1428:7:3"
								},
								{
									"baseName": {
										"id": 323,
										"name": "IERC20",
										"nameLocations": [
											"1437:6:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 902,
										"src": "1437:6:3"
									},
									"id": 324,
									"nodeType": "InheritanceSpecifier",
									"src": "1437:6:3"
								},
								{
									"baseName": {
										"id": 325,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1445:14:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1162,
										"src": "1445:14:3"
									},
									"id": 326,
									"nodeType": "InheritanceSpecifier",
									"src": "1445:14:3"
								},
								{
									"baseName": {
										"id": 327,
										"name": "IERC20Errors",
										"nameLocations": [
											"1461:12:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 214,
										"src": "1461:12:3"
									},
									"id": 328,
									"nodeType": "InheritanceSpecifier",
									"src": "1461:12:3"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 320,
								"nodeType": "StructuredDocumentation",
								"src": "348:1052:3",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification."
							},
							"fullyImplemented": true,
							"id": 824,
							"linearizedBaseContracts": [
								824,
								214,
								1162,
								902,
								1228
							],
							"name": "ERC20",
							"nameLocation": "1419:5:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 332,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1524:9:3",
									"nodeType": "VariableDeclaration",
									"scope": 824,
									"src": "1480:53:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 331,
										"keyName": "account",
										"keyNameLocation": "1496:7:3",
										"keyType": {
											"id": 329,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1488:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1480:35:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 330,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1507:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 338,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1612:11:3",
									"nodeType": "VariableDeclaration",
									"scope": 824,
									"src": "1540:83:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 337,
										"keyName": "account",
										"keyNameLocation": "1556:7:3",
										"keyType": {
											"id": 333,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1548:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1540:63:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 336,
											"keyName": "spender",
											"keyNameLocation": "1583:7:3",
											"keyType": {
												"id": 334,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1575:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1567:35:3",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 335,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1594:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 340,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1646:12:3",
									"nodeType": "VariableDeclaration",
									"scope": 824,
									"src": "1630:28:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 339,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1630:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 342,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1680:5:3",
									"nodeType": "VariableDeclaration",
									"scope": 824,
									"src": "1665:20:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 341,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1665:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 344,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1706:7:3",
									"nodeType": "VariableDeclaration",
									"scope": 824,
									"src": "1691:22:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 343,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1691:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 360,
										"nodeType": "Block",
										"src": "1952:57:3",
										"statements": [
											{
												"expression": {
													"id": 354,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 352,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 342,
														"src": "1962:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 353,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 347,
														"src": "1970:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1962:13:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 355,
												"nodeType": "ExpressionStatement",
												"src": "1962:13:3"
											},
											{
												"expression": {
													"id": 358,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 356,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 344,
														"src": "1985:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 357,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 349,
														"src": "1995:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1985:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 359,
												"nodeType": "ExpressionStatement",
												"src": "1985:17:3"
											}
										]
									},
									"documentation": {
										"id": 345,
										"nodeType": "StructuredDocumentation",
										"src": "1720:171:3",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 361,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 350,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 347,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1922:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 361,
												"src": "1908:19:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 346,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1908:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1943:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 361,
												"src": "1929:21:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 348,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1929:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1907:44:3"
									},
									"returnParameters": {
										"id": 351,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1952:0:3"
									},
									"scope": 824,
									"src": "1896:113:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1149
									],
									"body": {
										"id": 369,
										"nodeType": "Block",
										"src": "2134:29:3",
										"statements": [
											{
												"expression": {
													"id": 367,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 342,
													"src": "2151:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 366,
												"id": 368,
												"nodeType": "Return",
												"src": "2144:12:3"
											}
										]
									},
									"documentation": {
										"id": 362,
										"nodeType": "StructuredDocumentation",
										"src": "2015:54:3",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 370,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2083:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 363,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2087:2:3"
									},
									"returnParameters": {
										"id": 366,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 365,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 370,
												"src": "2119:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 364,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2119:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2118:15:3"
									},
									"scope": 824,
									"src": "2074:89:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1155
									],
									"body": {
										"id": 378,
										"nodeType": "Block",
										"src": "2338:31:3",
										"statements": [
											{
												"expression": {
													"id": 376,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 344,
													"src": "2355:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 375,
												"id": 377,
												"nodeType": "Return",
												"src": "2348:14:3"
											}
										]
									},
									"documentation": {
										"id": 371,
										"nodeType": "StructuredDocumentation",
										"src": "2169:102:3",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 379,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2285:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2291:2:3"
									},
									"returnParameters": {
										"id": 375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 374,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 379,
												"src": "2323:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 373,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2323:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2322:15:3"
									},
									"scope": 824,
									"src": "2276:93:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1161
									],
									"body": {
										"id": 387,
										"nodeType": "Block",
										"src": "3058:26:3",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 385,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3075:2:3",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 384,
												"id": 386,
												"nodeType": "Return",
												"src": "3068:9:3"
											}
										]
									},
									"documentation": {
										"id": 380,
										"nodeType": "StructuredDocumentation",
										"src": "2375:622:3",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 388,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3011:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 381,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3019:2:3"
									},
									"returnParameters": {
										"id": 384,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 383,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "3051:5:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 382,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3051:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3050:7:3"
									},
									"scope": 824,
									"src": "3002:82:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										851
									],
									"body": {
										"id": 396,
										"nodeType": "Block",
										"src": "3205:36:3",
										"statements": [
											{
												"expression": {
													"id": 394,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 340,
													"src": "3222:12:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 393,
												"id": 395,
												"nodeType": "Return",
												"src": "3215:19:3"
											}
										]
									},
									"documentation": {
										"id": 389,
										"nodeType": "StructuredDocumentation",
										"src": "3090:49:3",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 397,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3153:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3164:2:3"
									},
									"returnParameters": {
										"id": 393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 392,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 397,
												"src": "3196:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 391,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3196:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3195:9:3"
									},
									"scope": 824,
									"src": "3144:97:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										859
									],
									"body": {
										"id": 409,
										"nodeType": "Block",
										"src": "3373:42:3",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 405,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 332,
														"src": "3390:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 407,
													"indexExpression": {
														"id": 406,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 400,
														"src": "3400:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3390:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 404,
												"id": 408,
												"nodeType": "Return",
												"src": "3383:25:3"
											}
										]
									},
									"documentation": {
										"id": 398,
										"nodeType": "StructuredDocumentation",
										"src": "3247:47:3",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 410,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3308:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 401,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 400,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3326:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 410,
												"src": "3318:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 399,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3318:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3317:17:3"
									},
									"returnParameters": {
										"id": 404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 403,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 410,
												"src": "3364:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 402,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3364:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3363:9:3"
									},
									"scope": 824,
									"src": "3299:116:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										869
									],
									"body": {
										"id": 433,
										"nodeType": "Block",
										"src": "3685:103:3",
										"statements": [
											{
												"assignments": [
													421
												],
												"declarations": [
													{
														"constant": false,
														"id": 421,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3703:5:3",
														"nodeType": "VariableDeclaration",
														"scope": 433,
														"src": "3695:13:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 420,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3695:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 424,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 422,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1210,
														"src": "3711:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 423,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3711:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3695:28:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 426,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 421,
															"src": "3743:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 427,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 413,
															"src": "3750:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 428,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 415,
															"src": "3754:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 425,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 554,
														"src": "3733:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 429,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3733:27:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 430,
												"nodeType": "ExpressionStatement",
												"src": "3733:27:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 431,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3777:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 419,
												"id": 432,
												"nodeType": "Return",
												"src": "3770:11:3"
											}
										]
									},
									"documentation": {
										"id": 411,
										"nodeType": "StructuredDocumentation",
										"src": "3421:184:3",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 434,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3619:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 416,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3636:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 434,
												"src": "3628:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 412,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3628:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3648:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 434,
												"src": "3640:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 414,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3640:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3627:27:3"
									},
									"returnParameters": {
										"id": 419,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 418,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 434,
												"src": "3679:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 417,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3679:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3678:6:3"
									},
									"scope": 824,
									"src": "3610:178:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										879
									],
									"body": {
										"id": 450,
										"nodeType": "Block",
										"src": "3935:51:3",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 444,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 338,
															"src": "3952:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 446,
														"indexExpression": {
															"id": 445,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 437,
															"src": "3964:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3952:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 448,
													"indexExpression": {
														"id": 447,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 439,
														"src": "3971:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3952:27:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 443,
												"id": 449,
												"nodeType": "Return",
												"src": "3945:34:3"
											}
										]
									},
									"documentation": {
										"id": 435,
										"nodeType": "StructuredDocumentation",
										"src": "3794:47:3",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 451,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3855:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 437,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3873:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 451,
												"src": "3865:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 436,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3865:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 439,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3888:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 451,
												"src": "3880:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 438,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3880:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3864:32:3"
									},
									"returnParameters": {
										"id": 443,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 442,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 451,
												"src": "3926:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 441,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3926:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3925:9:3"
									},
									"scope": 824,
									"src": "3846:140:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										889
									],
									"body": {
										"id": 474,
										"nodeType": "Block",
										"src": "4372:107:3",
										"statements": [
											{
												"assignments": [
													462
												],
												"declarations": [
													{
														"constant": false,
														"id": 462,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4390:5:3",
														"nodeType": "VariableDeclaration",
														"scope": 474,
														"src": "4382:13:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 461,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4382:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 465,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 463,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1210,
														"src": "4398:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 464,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4398:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4382:28:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 467,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 462,
															"src": "4429:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 468,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 454,
															"src": "4436:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 469,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 456,
															"src": "4445:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 466,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															715,
															775
														],
														"referencedDeclaration": 715,
														"src": "4420:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 470,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4420:31:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 471,
												"nodeType": "ExpressionStatement",
												"src": "4420:31:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 472,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4468:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 460,
												"id": 473,
												"nodeType": "Return",
												"src": "4461:11:3"
											}
										]
									},
									"documentation": {
										"id": 452,
										"nodeType": "StructuredDocumentation",
										"src": "3992:296:3",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 475,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4302:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 457,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 454,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4318:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 475,
												"src": "4310:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 453,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4310:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 456,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4335:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 475,
												"src": "4327:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 455,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4327:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4309:32:3"
									},
									"returnParameters": {
										"id": 460,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 459,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 475,
												"src": "4366:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 458,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4366:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4365:6:3"
									},
									"scope": 824,
									"src": "4293:186:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										901
									],
									"body": {
										"id": 506,
										"nodeType": "Block",
										"src": "5132:151:3",
										"statements": [
											{
												"assignments": [
													488
												],
												"declarations": [
													{
														"constant": false,
														"id": 488,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5150:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 506,
														"src": "5142:15:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 487,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5142:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 491,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 489,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1210,
														"src": "5160:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 490,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5160:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5142:30:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 493,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 478,
															"src": "5198:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 494,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 488,
															"src": "5204:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 495,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 482,
															"src": "5213:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 492,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 823,
														"src": "5182:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 496,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5182:37:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 497,
												"nodeType": "ExpressionStatement",
												"src": "5182:37:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 499,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 478,
															"src": "5239:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 500,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 480,
															"src": "5245:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 501,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 482,
															"src": "5249:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 498,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 554,
														"src": "5229:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 502,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5229:26:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 503,
												"nodeType": "ExpressionStatement",
												"src": "5229:26:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 504,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5272:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 486,
												"id": 505,
												"nodeType": "Return",
												"src": "5265:11:3"
											}
										]
									},
									"documentation": {
										"id": 476,
										"nodeType": "StructuredDocumentation",
										"src": "4485:549:3",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 507,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5048:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 478,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5069:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "5061:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 477,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5061:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 480,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5083:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "5075:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 479,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5075:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 482,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5095:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "5087:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 481,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5087:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5060:41:3"
									},
									"returnParameters": {
										"id": 486,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 485,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "5126:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 484,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5126:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5125:6:3"
									},
									"scope": 824,
									"src": "5039:244:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 553,
										"nodeType": "Block",
										"src": "5725:231:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 522,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 517,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 510,
														"src": "5739:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 520,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5755:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 519,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5747:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 518,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5747:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 521,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5747:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5739:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 531,
												"nodeType": "IfStatement",
												"src": "5735:86:3",
												"trueBody": {
													"id": 530,
													"nodeType": "Block",
													"src": "5759:62:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 526,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5807:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 525,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5799:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 524,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5799:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 527,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5799:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 523,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 189,
																	"src": "5780:18:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 528,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5780:30:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 529,
															"nodeType": "RevertStatement",
															"src": "5773:37:3"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 537,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 532,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 512,
														"src": "5834:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 535,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5848:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 534,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5840:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 533,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5840:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 536,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5840:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5834:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 546,
												"nodeType": "IfStatement",
												"src": "5830:86:3",
												"trueBody": {
													"id": 545,
													"nodeType": "Block",
													"src": "5852:64:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 541,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5902:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 540,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5894:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 539,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5894:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 542,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5894:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 538,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 194,
																	"src": "5873:20:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 543,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5873:32:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 544,
															"nodeType": "RevertStatement",
															"src": "5866:39:3"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 548,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 510,
															"src": "5933:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 549,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 512,
															"src": "5939:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 550,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 514,
															"src": "5943:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 547,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 631,
														"src": "5925:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 551,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5925:24:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 552,
												"nodeType": "ExpressionStatement",
												"src": "5925:24:3"
											}
										]
									},
									"documentation": {
										"id": 508,
										"nodeType": "StructuredDocumentation",
										"src": "5289:362:3",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 554,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "5665:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 515,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 510,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5683:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 554,
												"src": "5675:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 509,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5675:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 512,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5697:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 554,
												"src": "5689:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 511,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5689:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 514,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5709:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 554,
												"src": "5701:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 513,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5701:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5674:41:3"
									},
									"returnParameters": {
										"id": 516,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5725:0:3"
									},
									"scope": 824,
									"src": "5656:300:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 630,
										"nodeType": "Block",
										"src": "6346:1032:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 569,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 564,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 557,
														"src": "6360:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 567,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6376:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 566,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6368:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 565,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6368:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 568,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6368:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6360:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 601,
													"nodeType": "Block",
													"src": "6534:362:3",
													"statements": [
														{
															"assignments": [
																576
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 576,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "6556:11:3",
																	"nodeType": "VariableDeclaration",
																	"scope": 601,
																	"src": "6548:19:3",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 575,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6548:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 580,
															"initialValue": {
																"baseExpression": {
																	"id": 577,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 332,
																	"src": "6570:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 579,
																"indexExpression": {
																	"id": 578,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 557,
																	"src": "6580:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6570:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6548:37:3"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 583,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 581,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 576,
																	"src": "6603:11:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 582,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 561,
																	"src": "6617:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6603:19:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 591,
															"nodeType": "IfStatement",
															"src": "6599:115:3",
															"trueBody": {
																"id": 590,
																"nodeType": "Block",
																"src": "6624:90:3",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 585,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 557,
																					"src": "6674:4:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 586,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 576,
																					"src": "6680:11:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 587,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 561,
																					"src": "6693:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 584,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 184,
																				"src": "6649:24:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 588,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6649:50:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 589,
																		"nodeType": "RevertStatement",
																		"src": "6642:57:3"
																	}
																]
															}
														},
														{
															"id": 600,
															"nodeType": "UncheckedBlock",
															"src": "6727:159:3",
															"statements": [
																{
																	"expression": {
																		"id": 598,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 592,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 332,
																				"src": "6834:9:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 594,
																			"indexExpression": {
																				"id": 593,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 557,
																				"src": "6844:4:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "6834:15:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 597,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 595,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 576,
																				"src": "6852:11:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 596,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 561,
																				"src": "6866:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6852:19:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6834:37:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 599,
																	"nodeType": "ExpressionStatement",
																	"src": "6834:37:3"
																}
															]
														}
													]
												},
												"id": 602,
												"nodeType": "IfStatement",
												"src": "6356:540:3",
												"trueBody": {
													"id": 574,
													"nodeType": "Block",
													"src": "6380:148:3",
													"statements": [
														{
															"expression": {
																"id": 572,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 570,
																	"name": "_totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 340,
																	"src": "6496:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 571,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 561,
																	"src": "6512:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6496:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 573,
															"nodeType": "ExpressionStatement",
															"src": "6496:21:3"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 608,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 603,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 559,
														"src": "6910:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 606,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6924:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 605,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6916:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 604,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6916:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 607,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6916:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6910:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 622,
													"nodeType": "Block",
													"src": "7125:206:3",
													"statements": [
														{
															"id": 621,
															"nodeType": "UncheckedBlock",
															"src": "7139:182:3",
															"statements": [
																{
																	"expression": {
																		"id": 619,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 615,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 332,
																				"src": "7284:9:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 617,
																			"indexExpression": {
																				"id": 616,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 559,
																				"src": "7294:2:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "7284:13:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 618,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 561,
																			"src": "7301:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7284:22:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 620,
																	"nodeType": "ExpressionStatement",
																	"src": "7284:22:3"
																}
															]
														}
													]
												},
												"id": 623,
												"nodeType": "IfStatement",
												"src": "6906:425:3",
												"trueBody": {
													"id": 614,
													"nodeType": "Block",
													"src": "6928:191:3",
													"statements": [
														{
															"id": 613,
															"nodeType": "UncheckedBlock",
															"src": "6942:167:3",
															"statements": [
																{
																	"expression": {
																		"id": 611,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 609,
																			"name": "_totalSupply",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 340,
																			"src": "7073:12:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 610,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 561,
																			"src": "7089:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7073:21:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 612,
																	"nodeType": "ExpressionStatement",
																	"src": "7073:21:3"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 625,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 557,
															"src": "7355:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 626,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 559,
															"src": "7361:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 627,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 561,
															"src": "7365:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 624,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 836,
														"src": "7346:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 628,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7346:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 629,
												"nodeType": "EmitStatement",
												"src": "7341:30:3"
											}
										]
									},
									"documentation": {
										"id": 555,
										"nodeType": "StructuredDocumentation",
										"src": "5962:304:3",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 631,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "6280:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 562,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 557,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6296:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 631,
												"src": "6288:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 556,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6288:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 559,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6310:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 631,
												"src": "6302:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 558,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6302:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 561,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6322:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 631,
												"src": "6314:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 560,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6314:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6287:41:3"
									},
									"returnParameters": {
										"id": 563,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6346:0:3"
									},
									"scope": 824,
									"src": "6271:1107:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 663,
										"nodeType": "Block",
										"src": "7777:152:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 644,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 639,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 634,
														"src": "7791:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 642,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7810:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 641,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7802:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 640,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7802:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 643,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7802:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7791:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 653,
												"nodeType": "IfStatement",
												"src": "7787:91:3",
												"trueBody": {
													"id": 652,
													"nodeType": "Block",
													"src": "7814:64:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 648,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7864:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 647,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7856:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 646,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7856:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 649,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7856:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 645,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 194,
																	"src": "7835:20:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 650,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7835:32:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 651,
															"nodeType": "RevertStatement",
															"src": "7828:39:3"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 657,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7903:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 656,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7895:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 655,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7895:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 658,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7895:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 659,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 634,
															"src": "7907:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 660,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 636,
															"src": "7916:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 654,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 631,
														"src": "7887:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 661,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7887:35:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 662,
												"nodeType": "ExpressionStatement",
												"src": "7887:35:3"
											}
										]
									},
									"documentation": {
										"id": 632,
										"nodeType": "StructuredDocumentation",
										"src": "7384:332:3",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 664,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "7730:5:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 637,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 634,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7744:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "7736:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 633,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7736:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 636,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7761:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "7753:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 635,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7753:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7735:32:3"
									},
									"returnParameters": {
										"id": 638,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7777:0:3"
									},
									"scope": 824,
									"src": "7721:208:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 696,
										"nodeType": "Block",
										"src": "8303:150:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 677,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 672,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 667,
														"src": "8317:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 675,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8336:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 674,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8328:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 673,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8328:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 676,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8328:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8317:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 686,
												"nodeType": "IfStatement",
												"src": "8313:89:3",
												"trueBody": {
													"id": 685,
													"nodeType": "Block",
													"src": "8340:62:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 681,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "8388:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 680,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8380:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 679,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8380:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 682,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8380:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 678,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 189,
																	"src": "8361:18:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 683,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8361:30:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 684,
															"nodeType": "RevertStatement",
															"src": "8354:37:3"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 688,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 667,
															"src": "8419:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 691,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8436:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 690,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8428:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 689,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8428:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 692,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8428:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 693,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 669,
															"src": "8440:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 687,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 631,
														"src": "8411:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 694,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8411:35:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 695,
												"nodeType": "ExpressionStatement",
												"src": "8411:35:3"
											}
										]
									},
									"documentation": {
										"id": 665,
										"nodeType": "StructuredDocumentation",
										"src": "7935:307:3",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 697,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "8256:5:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 667,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8270:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 697,
												"src": "8262:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 666,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8262:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 669,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8287:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 697,
												"src": "8279:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 668,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8279:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8261:32:3"
									},
									"returnParameters": {
										"id": 671,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8303:0:3"
									},
									"scope": 824,
									"src": "8247:206:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 714,
										"nodeType": "Block",
										"src": "9063:54:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 708,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 700,
															"src": "9082:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 709,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 702,
															"src": "9089:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 710,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 704,
															"src": "9098:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 711,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9105:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 707,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															715,
															775
														],
														"referencedDeclaration": 775,
														"src": "9073:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 712,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9073:37:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 713,
												"nodeType": "ExpressionStatement",
												"src": "9073:37:3"
											}
										]
									},
									"documentation": {
										"id": 698,
										"nodeType": "StructuredDocumentation",
										"src": "8459:525:3",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 715,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "8998:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 705,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 700,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9015:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "9007:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 699,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9007:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 702,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9030:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "9022:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 701,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9022:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 704,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9047:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "9039:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 703,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9039:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9006:47:3"
									},
									"returnParameters": {
										"id": 706,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9063:0:3"
									},
									"scope": 824,
									"src": "8989:128:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 774,
										"nodeType": "Block",
										"src": "10047:334:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 732,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 727,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 718,
														"src": "10061:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 730,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10078:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 729,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10070:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 728,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10070:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 731,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10070:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10061:19:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 741,
												"nodeType": "IfStatement",
												"src": "10057:89:3",
												"trueBody": {
													"id": 740,
													"nodeType": "Block",
													"src": "10082:64:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 736,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10132:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 735,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10124:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 734,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10124:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 737,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10124:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 733,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 208,
																	"src": "10103:20:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 738,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10103:32:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 739,
															"nodeType": "RevertStatement",
															"src": "10096:39:3"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 747,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 742,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 720,
														"src": "10159:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 745,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10178:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 744,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10170:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 743,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10170:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 746,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10170:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10159:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 756,
												"nodeType": "IfStatement",
												"src": "10155:90:3",
												"trueBody": {
													"id": 755,
													"nodeType": "Block",
													"src": "10182:63:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 751,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10231:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 750,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10223:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 749,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10223:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 752,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10223:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 748,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 213,
																	"src": "10203:19:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 753,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10203:31:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 754,
															"nodeType": "RevertStatement",
															"src": "10196:38:3"
														}
													]
												}
											},
											{
												"expression": {
													"id": 763,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 757,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 338,
																"src": "10254:11:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 760,
															"indexExpression": {
																"id": 758,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 718,
																"src": "10266:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10254:18:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 761,
														"indexExpression": {
															"id": 759,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 720,
															"src": "10273:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10254:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 762,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 722,
														"src": "10284:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10254:35:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 764,
												"nodeType": "ExpressionStatement",
												"src": "10254:35:3"
											},
											{
												"condition": {
													"id": 765,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 724,
													"src": "10303:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 773,
												"nodeType": "IfStatement",
												"src": "10299:76:3",
												"trueBody": {
													"id": 772,
													"nodeType": "Block",
													"src": "10314:61:3",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 767,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 718,
																		"src": "10342:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 768,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 720,
																		"src": "10349:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 769,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 722,
																		"src": "10358:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 766,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 845,
																	"src": "10333:8:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 770,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10333:31:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 771,
															"nodeType": "EmitStatement",
															"src": "10328:36:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 716,
										"nodeType": "StructuredDocumentation",
										"src": "9123:821:3",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 775,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "9958:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 725,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 718,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9975:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 775,
												"src": "9967:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 717,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9967:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 720,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9990:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 775,
												"src": "9982:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 719,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9982:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 722,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10007:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 775,
												"src": "9999:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 721,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9999:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 724,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "10019:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 775,
												"src": "10014:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 723,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10014:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9966:63:3"
									},
									"returnParameters": {
										"id": 726,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10047:0:3"
									},
									"scope": 824,
									"src": "9949:432:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 822,
										"nodeType": "Block",
										"src": "10752:388:3",
										"statements": [
											{
												"assignments": [
													786
												],
												"declarations": [
													{
														"constant": false,
														"id": 786,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10770:16:3",
														"nodeType": "VariableDeclaration",
														"scope": 822,
														"src": "10762:24:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 785,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10762:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 791,
												"initialValue": {
													"arguments": [
														{
															"id": 788,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "10799:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 789,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 780,
															"src": "10806:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 787,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 451,
														"src": "10789:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 790,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10789:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10762:52:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 798,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 792,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 786,
														"src": "10828:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 795,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10853:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 794,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10853:7:3",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 793,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "10848:4:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 796,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10848:13:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 797,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "10862:3:3",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "10848:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10828:37:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 821,
												"nodeType": "IfStatement",
												"src": "10824:310:3",
												"trueBody": {
													"id": 820,
													"nodeType": "Block",
													"src": "10867:267:3",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 801,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 799,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 786,
																	"src": "10885:16:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 800,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 782,
																	"src": "10904:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10885:24:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 809,
															"nodeType": "IfStatement",
															"src": "10881:130:3",
															"trueBody": {
																"id": 808,
																"nodeType": "Block",
																"src": "10911:100:3",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 803,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 780,
																					"src": "10963:7:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 804,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 786,
																					"src": "10972:16:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 805,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 782,
																					"src": "10990:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 802,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 203,
																				"src": "10936:26:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 806,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10936:60:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 807,
																		"nodeType": "RevertStatement",
																		"src": "10929:67:3"
																	}
																]
															}
														},
														{
															"id": 819,
															"nodeType": "UncheckedBlock",
															"src": "11024:100:3",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 811,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 778,
																				"src": "11061:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 812,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 780,
																				"src": "11068:7:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 815,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 813,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 786,
																					"src": "11077:16:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 814,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 782,
																					"src": "11096:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11077:24:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 816,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11103:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 810,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				715,
																				775
																			],
																			"referencedDeclaration": 775,
																			"src": "11052:8:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 817,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11052:57:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 818,
																	"nodeType": "ExpressionStatement",
																	"src": "11052:57:3"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 776,
										"nodeType": "StructuredDocumentation",
										"src": "10387:271:3",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 823,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10672:15:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 783,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 778,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10696:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 823,
												"src": "10688:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 777,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10688:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 780,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10711:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 823,
												"src": "10703:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 779,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10703:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 782,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10728:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 823,
												"src": "10720:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 781,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10720:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10687:47:3"
									},
									"returnParameters": {
										"id": 784,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10752:0:3"
									},
									"scope": 824,
									"src": "10663:477:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 825,
							"src": "1401:9741:3",
							"usedErrors": [
								184,
								189,
								194,
								203,
								208,
								213
							],
							"usedEvents": [
								836,
								845
							]
						}
					],
					"src": "105:11038:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							902
						]
					},
					"id": 903,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 826,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 827,
								"nodeType": "StructuredDocumentation",
								"src": "132:70:4",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 902,
							"linearizedBaseContracts": [
								902
							],
							"name": "IERC20",
							"nameLocation": "213:6:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 828,
										"nodeType": "StructuredDocumentation",
										"src": "226:158:4",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 836,
									"name": "Transfer",
									"nameLocation": "395:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 835,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 830,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "420:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 836,
												"src": "404:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 829,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "404:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 832,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "442:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 836,
												"src": "426:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 831,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 834,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "454:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 836,
												"src": "446:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 833,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "446:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "403:57:4"
									},
									"src": "389:72:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 837,
										"nodeType": "StructuredDocumentation",
										"src": "467:148:4",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 845,
									"name": "Approval",
									"nameLocation": "626:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 844,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 839,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "651:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 845,
												"src": "635:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 838,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "635:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 841,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "674:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 845,
												"src": "658:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 840,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "658:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 843,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "691:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 845,
												"src": "683:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 842,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "634:63:4"
									},
									"src": "620:78:4"
								},
								{
									"documentation": {
										"id": 846,
										"nodeType": "StructuredDocumentation",
										"src": "704:65:4",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 851,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 847,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:4"
									},
									"returnParameters": {
										"id": 850,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 849,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 851,
												"src": "820:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 848,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:4"
									},
									"scope": 902,
									"src": "774:55:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 852,
										"nodeType": "StructuredDocumentation",
										"src": "835:71:4",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 859,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "920:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 855,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 854,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "938:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 859,
												"src": "930:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 853,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "929:17:4"
									},
									"returnParameters": {
										"id": 858,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 857,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 859,
												"src": "970:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 856,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "970:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "969:9:4"
									},
									"scope": 902,
									"src": "911:68:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 860,
										"nodeType": "StructuredDocumentation",
										"src": "985:213:4",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 869,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1212:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 865,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 862,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1229:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 869,
												"src": "1221:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 861,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1221:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 864,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1241:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 869,
												"src": "1233:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 863,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1220:27:4"
									},
									"returnParameters": {
										"id": 868,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 867,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 869,
												"src": "1266:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 866,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1266:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1265:6:4"
									},
									"scope": 902,
									"src": "1203:69:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 870,
										"nodeType": "StructuredDocumentation",
										"src": "1278:264:4",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 879,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1556:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 875,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 872,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1574:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 879,
												"src": "1566:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 871,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1566:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 874,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1589:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 879,
												"src": "1581:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 873,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1581:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1565:32:4"
									},
									"returnParameters": {
										"id": 878,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 877,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 879,
												"src": "1621:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 876,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1620:9:4"
									},
									"scope": 902,
									"src": "1547:83:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 880,
										"nodeType": "StructuredDocumentation",
										"src": "1636:667:4",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 889,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2317:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 885,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 882,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2333:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "2325:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 881,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2325:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 884,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "2342:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 883,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2324:32:4"
									},
									"returnParameters": {
										"id": 888,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 887,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "2375:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 886,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:4"
									},
									"scope": 902,
									"src": "2308:73:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 890,
										"nodeType": "StructuredDocumentation",
										"src": "2387:297:4",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 901,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2698:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 897,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 892,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2719:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "2711:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 891,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2711:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 894,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2733:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "2725:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 893,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2725:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 896,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2745:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "2737:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 895,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2737:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2710:41:4"
									},
									"returnParameters": {
										"id": 900,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 899,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "2770:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 898,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2770:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2769:6:4"
									},
									"scope": 902,
									"src": "2689:87:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 903,
							"src": "203:2575:4",
							"usedErrors": [],
							"usedEvents": [
								836,
								845
							]
						}
					],
					"src": "106:2673:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
					"exportedSymbols": {
						"Context": [
							1228
						],
						"ERC20": [
							824
						],
						"ERC20Burnable": [
							948
						]
					},
					"id": 949,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 904,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "124:24:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "../ERC20.sol",
							"id": 906,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 949,
							"sourceUnit": 825,
							"src": "150:35:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 905,
										"name": "ERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 824,
										"src": "158:5:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../../utils/Context.sol",
							"id": 908,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 949,
							"sourceUnit": 1229,
							"src": "186:51:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 907,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1228,
										"src": "194:7:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 910,
										"name": "Context",
										"nameLocations": [
											"483:7:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1228,
										"src": "483:7:5"
									},
									"id": 911,
									"nodeType": "InheritanceSpecifier",
									"src": "483:7:5"
								},
								{
									"baseName": {
										"id": 912,
										"name": "ERC20",
										"nameLocations": [
											"492:5:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 824,
										"src": "492:5:5"
									},
									"id": 913,
									"nodeType": "InheritanceSpecifier",
									"src": "492:5:5"
								}
							],
							"canonicalName": "ERC20Burnable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 909,
								"nodeType": "StructuredDocumentation",
								"src": "239:208:5",
								"text": " @dev Extension of {ERC20} that allows token holders to destroy both their own\n tokens and those that they have an allowance for, in a way that can be\n recognized off-chain (via event analysis)."
							},
							"fullyImplemented": true,
							"id": 948,
							"linearizedBaseContracts": [
								948,
								824,
								214,
								1162,
								902,
								1228
							],
							"name": "ERC20Burnable",
							"nameLocation": "466:13:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 925,
										"nodeType": "Block",
										"src": "662:43:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 920,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1210,
																"src": "678:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 921,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "678:12:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 922,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 916,
															"src": "692:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 919,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 697,
														"src": "672:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 923,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "672:26:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 924,
												"nodeType": "ExpressionStatement",
												"src": "672:26:5"
											}
										]
									},
									"documentation": {
										"id": 914,
										"nodeType": "StructuredDocumentation",
										"src": "504:109:5",
										"text": " @dev Destroys a `value` amount of tokens from the caller.\n See {ERC20-_burn}."
									},
									"functionSelector": "42966c68",
									"id": 926,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "627:4:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 917,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 916,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "640:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 926,
												"src": "632:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 915,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "632:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "631:15:5"
									},
									"returnParameters": {
										"id": 918,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "662:0:5"
									},
									"scope": 948,
									"src": "618:87:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 946,
										"nodeType": "Block",
										"src": "1086:93:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 935,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 929,
															"src": "1112:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 936,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1210,
																"src": "1121:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 937,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1121:12:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 938,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 931,
															"src": "1135:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 934,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 823,
														"src": "1096:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 939,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1096:45:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 940,
												"nodeType": "ExpressionStatement",
												"src": "1096:45:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 942,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 929,
															"src": "1157:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 943,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 931,
															"src": "1166:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 941,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 697,
														"src": "1151:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 944,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1151:21:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 945,
												"nodeType": "ExpressionStatement",
												"src": "1151:21:5"
											}
										]
									},
									"documentation": {
										"id": 927,
										"nodeType": "StructuredDocumentation",
										"src": "711:305:5",
										"text": " @dev Destroys a `value` amount of tokens from `account`, deducting from\n the caller's allowance.\n See {ERC20-_burn} and {ERC20-allowance}.\n Requirements:\n - the caller must have allowance for ``accounts``'s tokens of at least\n `value`."
									},
									"functionSelector": "79cc6790",
									"id": 947,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burnFrom",
									"nameLocation": "1030:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 932,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 929,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1047:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 947,
												"src": "1039:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 928,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1039:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 931,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1064:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 947,
												"src": "1056:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 930,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1056:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1038:32:5"
									},
									"returnParameters": {
										"id": 933,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1086:0:5"
									},
									"scope": 948,
									"src": "1021:158:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 949,
							"src": "448:733:5",
							"usedErrors": [
								184,
								189,
								194,
								203,
								208,
								213
							],
							"usedEvents": [
								836,
								845
							]
						}
					],
					"src": "124:1058:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol",
					"exportedSymbols": {
						"ERC20": [
							824
						],
						"ERC20Pausable": [
							982
						],
						"Pausable": [
							1413
						]
					},
					"id": 983,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 950,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "124:24:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "../ERC20.sol",
							"id": 952,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 983,
							"sourceUnit": 825,
							"src": "150:35:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 951,
										"name": "ERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 824,
										"src": "158:5:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Pausable.sol",
							"file": "../../../utils/Pausable.sol",
							"id": 954,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 983,
							"sourceUnit": 1414,
							"src": "186:53:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 953,
										"name": "Pausable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1413,
										"src": "194:8:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 956,
										"name": "ERC20",
										"nameLocations": [
											"964:5:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 824,
										"src": "964:5:6"
									},
									"id": 957,
									"nodeType": "InheritanceSpecifier",
									"src": "964:5:6"
								},
								{
									"baseName": {
										"id": 958,
										"name": "Pausable",
										"nameLocations": [
											"971:8:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1413,
										"src": "971:8:6"
									},
									"id": 959,
									"nodeType": "InheritanceSpecifier",
									"src": "971:8:6"
								}
							],
							"canonicalName": "ERC20Pausable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 955,
								"nodeType": "StructuredDocumentation",
								"src": "241:687:6",
								"text": " @dev ERC20 token with pausable token transfers, minting and burning.\n Useful for scenarios such as preventing trades until the end of an evaluation\n period, or having an emergency switch for freezing all token transfers in the\n event of a large bug.\n IMPORTANT: This contract does not include public pause and unpause functions. In\n addition to inheriting this contract, you must define both functions, invoking the\n {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\n access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\n make the contract pause mechanism of the contract unreachable, and thus unusable."
							},
							"fullyImplemented": true,
							"id": 982,
							"linearizedBaseContracts": [
								982,
								1413,
								824,
								214,
								1162,
								902,
								1228
							],
							"name": "ERC20Pausable",
							"nameLocation": "947:13:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										631
									],
									"body": {
										"id": 980,
										"nodeType": "Block",
										"src": "1210:47:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 975,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 962,
															"src": "1234:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 976,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 964,
															"src": "1240:2:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 977,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 966,
															"src": "1244:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 972,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "1220:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_ERC20Pausable_$982_$",
																"typeString": "type(contract super ERC20Pausable)"
															}
														},
														"id": 974,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1226:7:6",
														"memberName": "_update",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 631,
														"src": "1220:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 978,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1220:30:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 979,
												"nodeType": "ExpressionStatement",
												"src": "1220:30:6"
											}
										]
									},
									"documentation": {
										"id": 960,
										"nodeType": "StructuredDocumentation",
										"src": "986:121:6",
										"text": " @dev See {ERC20-_update}.\n Requirements:\n - the contract must not be paused."
									},
									"id": 981,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 970,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 969,
												"name": "whenNotPaused",
												"nameLocations": [
													"1196:13:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1338,
												"src": "1196:13:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "1196:13:6"
										}
									],
									"name": "_update",
									"nameLocation": "1121:7:6",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 968,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "1187:8:6"
									},
									"parameters": {
										"id": 967,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 962,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1137:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "1129:12:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 961,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1129:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 964,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1151:2:6",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "1143:10:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 963,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1143:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 966,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1163:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 981,
												"src": "1155:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 965,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1155:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1128:41:6"
									},
									"returnParameters": {
										"id": 971,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1210:0:6"
									},
									"scope": 982,
									"src": "1112:145:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 983,
							"src": "929:330:6",
							"usedErrors": [
								184,
								189,
								194,
								203,
								208,
								213,
								1318,
								1321
							],
							"usedEvents": [
								836,
								845,
								1310,
								1315
							]
						}
					],
					"src": "124:1136:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
					"exportedSymbols": {
						"ECDSA": [
							2343
						],
						"EIP712": [
							2570
						],
						"ERC20": [
							824
						],
						"ERC20Permit": [
							1136
						],
						"IERC20Permit": [
							1198
						],
						"Nonces": [
							1296
						]
					},
					"id": 1137,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 984,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "122:24:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
							"file": "./IERC20Permit.sol",
							"id": 986,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1137,
							"sourceUnit": 1199,
							"src": "148:48:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 985,
										"name": "IERC20Permit",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1198,
										"src": "156:12:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "../ERC20.sol",
							"id": 988,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1137,
							"sourceUnit": 825,
							"src": "197:35:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 987,
										"name": "ERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 824,
										"src": "205:5:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
							"file": "../../../utils/cryptography/ECDSA.sol",
							"id": 990,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1137,
							"sourceUnit": 2344,
							"src": "233:60:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 989,
										"name": "ECDSA",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2343,
										"src": "241:5:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/EIP712.sol",
							"file": "../../../utils/cryptography/EIP712.sol",
							"id": 992,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1137,
							"sourceUnit": 2571,
							"src": "294:62:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 991,
										"name": "EIP712",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2570,
										"src": "302:6:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Nonces.sol",
							"file": "../../../utils/Nonces.sol",
							"id": 994,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1137,
							"sourceUnit": 1297,
							"src": "357:49:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 993,
										"name": "Nonces",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1296,
										"src": "365:6:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 996,
										"name": "ERC20",
										"nameLocations": [
											"929:5:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 824,
										"src": "929:5:7"
									},
									"id": 997,
									"nodeType": "InheritanceSpecifier",
									"src": "929:5:7"
								},
								{
									"baseName": {
										"id": 998,
										"name": "IERC20Permit",
										"nameLocations": [
											"936:12:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1198,
										"src": "936:12:7"
									},
									"id": 999,
									"nodeType": "InheritanceSpecifier",
									"src": "936:12:7"
								},
								{
									"baseName": {
										"id": 1000,
										"name": "EIP712",
										"nameLocations": [
											"950:6:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2570,
										"src": "950:6:7"
									},
									"id": 1001,
									"nodeType": "InheritanceSpecifier",
									"src": "950:6:7"
								},
								{
									"baseName": {
										"id": 1002,
										"name": "Nonces",
										"nameLocations": [
											"958:6:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1296,
										"src": "958:6:7"
									},
									"id": 1003,
									"nodeType": "InheritanceSpecifier",
									"src": "958:6:7"
								}
							],
							"canonicalName": "ERC20Permit",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 995,
								"nodeType": "StructuredDocumentation",
								"src": "408:487:7",
								"text": " @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": true,
							"id": 1136,
							"linearizedBaseContracts": [
								1136,
								1296,
								2570,
								172,
								1198,
								824,
								214,
								1162,
								902,
								1228
							],
							"name": "ERC20Permit",
							"nameLocation": "914:11:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1008,
									"mutability": "constant",
									"name": "PERMIT_TYPEHASH",
									"nameLocation": "996:15:7",
									"nodeType": "VariableDeclaration",
									"scope": 1136,
									"src": "971:146:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1004,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "971:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "5065726d69742861646472657373206f776e65722c61646472657373207370656e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529",
												"id": 1006,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "1032:84:7",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												},
												"value": "Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												}
											],
											"id": 1005,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "1022:9:7",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 1007,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1022:95:7",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 1009,
										"nodeType": "StructuredDocumentation",
										"src": "1124:52:7",
										"text": " @dev Permit deadline has expired."
									},
									"errorSelector": "62791302",
									"id": 1013,
									"name": "ERC2612ExpiredSignature",
									"nameLocation": "1187:23:7",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1012,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1011,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1219:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1013,
												"src": "1211:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1010,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:18:7"
									},
									"src": "1181:48:7"
								},
								{
									"documentation": {
										"id": 1014,
										"nodeType": "StructuredDocumentation",
										"src": "1235:45:7",
										"text": " @dev Mismatched signature."
									},
									"errorSelector": "4b800e46",
									"id": 1020,
									"name": "ERC2612InvalidSigner",
									"nameLocation": "1291:20:7",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1019,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1016,
												"mutability": "mutable",
												"name": "signer",
												"nameLocation": "1320:6:7",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "1312:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1015,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1312:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1018,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1336:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1020,
												"src": "1328:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1017,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1328:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1311:31:7"
									},
									"src": "1285:58:7"
								},
								{
									"body": {
										"id": 1030,
										"nodeType": "Block",
										"src": "1624:2:7",
										"statements": []
									},
									"documentation": {
										"id": 1021,
										"nodeType": "StructuredDocumentation",
										"src": "1349:220:7",
										"text": " @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n It's a good idea to use the same `name` that is defined as the ERC20 token name."
									},
									"id": 1031,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1026,
													"name": "name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1023,
													"src": "1613:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												{
													"hexValue": "31",
													"id": 1027,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1619:3:7",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6",
														"typeString": "literal_string \"1\""
													},
													"value": "1"
												}
											],
											"id": 1028,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 1025,
												"name": "EIP712",
												"nameLocations": [
													"1606:6:7"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2570,
												"src": "1606:6:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "1606:17:7"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1024,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1023,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "1600:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1031,
												"src": "1586:18:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1022,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1586:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1585:20:7"
									},
									"returnParameters": {
										"id": 1029,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1624:0:7"
									},
									"scope": 1136,
									"src": "1574:52:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1183
									],
									"body": {
										"id": 1107,
										"nodeType": "Block",
										"src": "1869:483:7",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1052,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1049,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "1883:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1050,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1889:9:7",
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "1883:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1051,
														"name": "deadline",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1040,
														"src": "1901:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1883:26:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1058,
												"nodeType": "IfStatement",
												"src": "1879:97:7",
												"trueBody": {
													"id": 1057,
													"nodeType": "Block",
													"src": "1911:65:7",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1054,
																		"name": "deadline",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1040,
																		"src": "1956:8:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1053,
																	"name": "ERC2612ExpiredSignature",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1013,
																	"src": "1932:23:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (uint256) pure returns (error)"
																	}
																},
																"id": 1055,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1932:33:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1056,
															"nodeType": "RevertStatement",
															"src": "1925:40:7"
														}
													]
												}
											},
											{
												"assignments": [
													1060
												],
												"declarations": [
													{
														"constant": false,
														"id": 1060,
														"mutability": "mutable",
														"name": "structHash",
														"nameLocation": "1994:10:7",
														"nodeType": "VariableDeclaration",
														"scope": 1107,
														"src": "1986:18:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1059,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "1986:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1074,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1064,
																	"name": "PERMIT_TYPEHASH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1008,
																	"src": "2028:15:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 1065,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1034,
																	"src": "2045:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1066,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1036,
																	"src": "2052:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1067,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1038,
																	"src": "2061:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 1069,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1034,
																			"src": "2078:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1068,
																		"name": "_useNonce",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1270,
																		"src": "2068:9:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address) returns (uint256)"
																		}
																	},
																	"id": 1070,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2068:16:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1071,
																	"name": "deadline",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1040,
																	"src": "2086:8:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1062,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2017:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1063,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2021:6:7",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "2017:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1072,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2017:78:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1061,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2007:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1073,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2007:89:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1986:110:7"
											},
											{
												"assignments": [
													1076
												],
												"declarations": [
													{
														"constant": false,
														"id": 1076,
														"mutability": "mutable",
														"name": "hash",
														"nameLocation": "2115:4:7",
														"nodeType": "VariableDeclaration",
														"scope": 1107,
														"src": "2107:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1075,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2107:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1080,
												"initialValue": {
													"arguments": [
														{
															"id": 1078,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1060,
															"src": "2139:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1077,
														"name": "_hashTypedDataV4",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2503,
														"src": "2122:16:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 1079,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2122:28:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2107:43:7"
											},
											{
												"assignments": [
													1082
												],
												"declarations": [
													{
														"constant": false,
														"id": 1082,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "2169:6:7",
														"nodeType": "VariableDeclaration",
														"scope": 1107,
														"src": "2161:14:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1081,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2161:7:7",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1090,
												"initialValue": {
													"arguments": [
														{
															"id": 1085,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1076,
															"src": "2192:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1086,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1042,
															"src": "2198:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1087,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1044,
															"src": "2201:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1088,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1046,
															"src": "2204:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 1083,
															"name": "ECDSA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2343,
															"src": "2178:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSA_$2343_$",
																"typeString": "type(library ECDSA)"
															}
														},
														"id": 1084,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2184:7:7",
														"memberName": "recover",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2293,
														"src": "2178:13:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 1089,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2178:28:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2161:45:7"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1093,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1091,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1082,
														"src": "2220:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1092,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1034,
														"src": "2230:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2220:15:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1100,
												"nodeType": "IfStatement",
												"src": "2216:88:7",
												"trueBody": {
													"id": 1099,
													"nodeType": "Block",
													"src": "2237:67:7",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1095,
																		"name": "signer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1082,
																		"src": "2279:6:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1096,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1034,
																		"src": "2287:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1094,
																	"name": "ERC2612InvalidSigner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1020,
																	"src": "2258:20:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_address_$returns$_t_error_$",
																		"typeString": "function (address,address) pure returns (error)"
																	}
																},
																"id": 1097,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2258:35:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1098,
															"nodeType": "RevertStatement",
															"src": "2251:42:7"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1102,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1034,
															"src": "2323:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1103,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1036,
															"src": "2330:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1104,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1038,
															"src": "2339:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1101,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															715,
															775
														],
														"referencedDeclaration": 715,
														"src": "2314:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1105,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2314:31:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1106,
												"nodeType": "ExpressionStatement",
												"src": "2314:31:7"
											}
										]
									},
									"documentation": {
										"id": 1032,
										"nodeType": "StructuredDocumentation",
										"src": "1632:43:7",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "d505accf",
									"id": 1108,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1689:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1047,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1034,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1713:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1108,
												"src": "1705:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1033,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1705:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1036,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1736:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1108,
												"src": "1728:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1035,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1728:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1038,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1761:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1108,
												"src": "1753:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1037,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1753:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1040,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1784:8:7",
												"nodeType": "VariableDeclaration",
												"scope": 1108,
												"src": "1776:16:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1039,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1776:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1042,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1808:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1108,
												"src": "1802:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1041,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1802:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1044,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1827:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1108,
												"src": "1819:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1043,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1819:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1046,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1846:1:7",
												"nodeType": "VariableDeclaration",
												"scope": 1108,
												"src": "1838:9:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1045,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1838:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1695:158:7"
									},
									"returnParameters": {
										"id": 1048,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1869:0:7"
									},
									"scope": 1136,
									"src": "1680:672:7",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1191,
										1255
									],
									"body": {
										"id": 1124,
										"nodeType": "Block",
										"src": "2506:43:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1121,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1111,
															"src": "2536:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1119,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "2523:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_ERC20Permit_$1136_$",
																"typeString": "type(contract super ERC20Permit)"
															}
														},
														"id": 1120,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2529:6:7",
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1255,
														"src": "2523:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1122,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2523:19:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1118,
												"id": 1123,
												"nodeType": "Return",
												"src": "2516:26:7"
											}
										]
									},
									"documentation": {
										"id": 1109,
										"nodeType": "StructuredDocumentation",
										"src": "2358:43:7",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "7ecebe00",
									"id": 1125,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "2415:6:7",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1115,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1113,
												"name": "IERC20Permit",
												"nameLocations": [
													"2466:12:7"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1198,
												"src": "2466:12:7"
											},
											{
												"id": 1114,
												"name": "Nonces",
												"nameLocations": [
													"2480:6:7"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1296,
												"src": "2480:6:7"
											}
										],
										"src": "2457:30:7"
									},
									"parameters": {
										"id": 1112,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1111,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2430:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1125,
												"src": "2422:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1110,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2422:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2421:15:7"
									},
									"returnParameters": {
										"id": 1118,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1117,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1125,
												"src": "2497:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1116,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2497:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2496:9:7"
									},
									"scope": 1136,
									"src": "2406:143:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1197
									],
									"body": {
										"id": 1134,
										"nodeType": "Block",
										"src": "2724:44:7",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1131,
														"name": "_domainSeparatorV4",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2466,
														"src": "2741:18:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
															"typeString": "function () view returns (bytes32)"
														}
													},
													"id": 1132,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2741:20:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1130,
												"id": 1133,
												"nodeType": "Return",
												"src": "2734:27:7"
											}
										]
									},
									"documentation": {
										"id": 1126,
										"nodeType": "StructuredDocumentation",
										"src": "2555:43:7",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "3644e515",
									"id": 1135,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "2665:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1127,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2681:2:7"
									},
									"returnParameters": {
										"id": 1130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1129,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1135,
												"src": "2715:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1128,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2715:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2714:9:7"
									},
									"scope": 1136,
									"src": "2656:112:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								}
							],
							"scope": 1137,
							"src": "896:1874:7",
							"usedErrors": [
								184,
								189,
								194,
								203,
								208,
								213,
								1013,
								1020,
								1238,
								1427,
								1429,
								2006,
								2011,
								2016
							],
							"usedEvents": [
								152,
								836,
								845
							]
						}
					],
					"src": "122:2649:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							902
						],
						"IERC20Metadata": [
							1162
						]
					},
					"id": 1163,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1138,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:8"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 1140,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1163,
							"sourceUnit": 903,
							"src": "151:37:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1139,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 902,
										"src": "159:6:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1142,
										"name": "IERC20",
										"nameLocations": [
											"305:6:8"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 902,
										"src": "305:6:8"
									},
									"id": 1143,
									"nodeType": "InheritanceSpecifier",
									"src": "305:6:8"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1141,
								"nodeType": "StructuredDocumentation",
								"src": "190:86:8",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard."
							},
							"fullyImplemented": false,
							"id": 1162,
							"linearizedBaseContracts": [
								1162,
								902
							],
							"name": "IERC20Metadata",
							"nameLocation": "287:14:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1144,
										"nodeType": "StructuredDocumentation",
										"src": "318:54:8",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1149,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "386:4:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1145,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "390:2:8"
									},
									"returnParameters": {
										"id": 1148,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1147,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1149,
												"src": "416:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1146,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "416:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "415:15:8"
									},
									"scope": 1162,
									"src": "377:54:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1150,
										"nodeType": "StructuredDocumentation",
										"src": "437:56:8",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 1155,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "507:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1151,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:8"
									},
									"returnParameters": {
										"id": 1154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1153,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1155,
												"src": "539:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1152,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "539:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "538:15:8"
									},
									"scope": 1162,
									"src": "498:56:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1156,
										"nodeType": "StructuredDocumentation",
										"src": "560:65:8",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 1161,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "639:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1157,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "647:2:8"
									},
									"returnParameters": {
										"id": 1160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1159,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1161,
												"src": "673:5:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1158,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "673:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "672:7:8"
									},
									"scope": 1162,
									"src": "630:50:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1163,
							"src": "277:405:8",
							"usedErrors": [],
							"usedEvents": [
								836,
								845
							]
						}
					],
					"src": "125:558:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							1198
						]
					},
					"id": 1199,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1164,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "123:24:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1165,
								"nodeType": "StructuredDocumentation",
								"src": "149:1963:9",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."
							},
							"fullyImplemented": false,
							"id": 1198,
							"linearizedBaseContracts": [
								1198
							],
							"name": "IERC20Permit",
							"nameLocation": "2123:12:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1166,
										"nodeType": "StructuredDocumentation",
										"src": "2142:850:9",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."
									},
									"functionSelector": "d505accf",
									"id": 1183,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "3006:6:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1168,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3030:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1183,
												"src": "3022:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1167,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3022:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1170,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3053:7:9",
												"nodeType": "VariableDeclaration",
												"scope": 1183,
												"src": "3045:15:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1169,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3045:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1172,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3078:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1183,
												"src": "3070:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1171,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3070:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1174,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3101:8:9",
												"nodeType": "VariableDeclaration",
												"scope": 1183,
												"src": "3093:16:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1173,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3093:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1176,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3125:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1183,
												"src": "3119:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1175,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3119:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1178,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3144:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1183,
												"src": "3136:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1177,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3136:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1180,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3163:1:9",
												"nodeType": "VariableDeclaration",
												"scope": 1183,
												"src": "3155:9:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1179,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3155:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3012:158:9"
									},
									"returnParameters": {
										"id": 1182,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3179:0:9"
									},
									"scope": 1198,
									"src": "2997:183:9",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1184,
										"nodeType": "StructuredDocumentation",
										"src": "3186:294:9",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 1191,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "3494:6:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1187,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1186,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3509:5:9",
												"nodeType": "VariableDeclaration",
												"scope": 1191,
												"src": "3501:13:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1185,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3501:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3500:15:9"
									},
									"returnParameters": {
										"id": 1190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1189,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1191,
												"src": "3539:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1188,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3539:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3538:9:9"
									},
									"scope": 1198,
									"src": "3485:63:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1192,
										"nodeType": "StructuredDocumentation",
										"src": "3554:128:9",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 1197,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "3749:16:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1193,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3765:2:9"
									},
									"returnParameters": {
										"id": 1196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1195,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1197,
												"src": "3791:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1194,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3791:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3790:9:9"
									},
									"scope": 1198,
									"src": "3740:60:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1199,
							"src": "2113:1689:9",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "123:3680:9"
				},
				"id": 9
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1228
						]
					},
					"id": 1229,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1200,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:10"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1201,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:10",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1228,
							"linearizedBaseContracts": [
								1228
							],
							"name": "Context",
							"nameLocation": "642:7:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1209,
										"nodeType": "Block",
										"src": "718:34:10",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1206,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:10",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1207,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:10",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1205,
												"id": 1208,
												"nodeType": "Return",
												"src": "728:17:10"
											}
										]
									},
									"id": 1210,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1202,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:10"
									},
									"returnParameters": {
										"id": 1205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1204,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1210,
												"src": "709:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1203,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:10"
									},
									"scope": 1228,
									"src": "656:96:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1218,
										"nodeType": "Block",
										"src": "825:32:10",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1215,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:10",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1216,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:10",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1214,
												"id": 1217,
												"nodeType": "Return",
												"src": "835:15:10"
											}
										]
									},
									"id": 1219,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1211,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:10"
									},
									"returnParameters": {
										"id": 1214,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1213,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1219,
												"src": "809:14:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1212,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:10"
									},
									"scope": 1228,
									"src": "758:99:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1226,
										"nodeType": "Block",
										"src": "935:25:10",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 1224,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:10",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 1223,
												"id": 1225,
												"nodeType": "Return",
												"src": "945:8:10"
											}
										]
									},
									"id": 1227,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1220,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:10"
									},
									"returnParameters": {
										"id": 1223,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1222,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1227,
												"src": "926:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1221,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:10"
									},
									"scope": 1228,
									"src": "863:97:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1229,
							"src": "624:338:10",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:10"
				},
				"id": 10
			},
			"@openzeppelin/contracts/utils/Nonces.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Nonces.sol",
					"exportedSymbols": {
						"Nonces": [
							1296
						]
					},
					"id": 1297,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1230,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "99:24:11"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Nonces",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1231,
								"nodeType": "StructuredDocumentation",
								"src": "125:83:11",
								"text": " @dev Provides tracking nonces for addresses. Nonces will only increment."
							},
							"fullyImplemented": true,
							"id": 1296,
							"linearizedBaseContracts": [
								1296
							],
							"name": "Nonces",
							"nameLocation": "227:6:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1232,
										"nodeType": "StructuredDocumentation",
										"src": "240:90:11",
										"text": " @dev The nonce used for an `account` is not the expected current nonce."
									},
									"errorSelector": "752d88c0",
									"id": 1238,
									"name": "InvalidAccountNonce",
									"nameLocation": "341:19:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1237,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1234,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "369:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 1238,
												"src": "361:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1233,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "361:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1236,
												"mutability": "mutable",
												"name": "currentNonce",
												"nameLocation": "386:12:11",
												"nodeType": "VariableDeclaration",
												"scope": 1238,
												"src": "378:20:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1235,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "378:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "360:39:11"
									},
									"src": "335:65:11"
								},
								{
									"constant": false,
									"id": 1242,
									"mutability": "mutable",
									"name": "_nonces",
									"nameLocation": "450:7:11",
									"nodeType": "VariableDeclaration",
									"scope": 1296,
									"src": "406:51:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1241,
										"keyName": "account",
										"keyNameLocation": "422:7:11",
										"keyType": {
											"id": 1239,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "414:7:11",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "406:35:11",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1240,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "433:7:11",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1254,
										"nodeType": "Block",
										"src": "607:38:11",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 1250,
														"name": "_nonces",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1242,
														"src": "624:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1252,
													"indexExpression": {
														"id": 1251,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1245,
														"src": "632:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "624:14:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1249,
												"id": 1253,
												"nodeType": "Return",
												"src": "617:21:11"
											}
										]
									},
									"documentation": {
										"id": 1243,
										"nodeType": "StructuredDocumentation",
										"src": "464:69:11",
										"text": " @dev Returns the next unused nonce for an address."
									},
									"functionSelector": "7ecebe00",
									"id": 1255,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "547:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1245,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "562:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1255,
												"src": "554:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1244,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "554:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "553:15:11"
									},
									"returnParameters": {
										"id": 1249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1248,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1255,
												"src": "598:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1247,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "598:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "597:9:11"
									},
									"scope": 1296,
									"src": "538:107:11",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1269,
										"nodeType": "Block",
										"src": "828:326:11",
										"statements": [
											{
												"id": 1268,
												"nodeType": "UncheckedBlock",
												"src": "1031:117:11",
												"statements": [
													{
														"expression": {
															"id": 1266,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "++",
															"prefix": false,
															"src": "1121:16:11",
															"subExpression": {
																"baseExpression": {
																	"id": 1263,
																	"name": "_nonces",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1242,
																	"src": "1121:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1265,
																"indexExpression": {
																	"id": 1264,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1258,
																	"src": "1129:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "1121:14:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1262,
														"id": 1267,
														"nodeType": "Return",
														"src": "1114:23:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1256,
										"nodeType": "StructuredDocumentation",
										"src": "651:103:11",
										"text": " @dev Consumes a nonce.\n Returns the current value and increments nonce."
									},
									"id": 1270,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_useNonce",
									"nameLocation": "768:9:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1259,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1258,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "786:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "778:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1257,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "778:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "777:15:11"
									},
									"returnParameters": {
										"id": 1262,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1261,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1270,
												"src": "819:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1260,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "819:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "818:9:11"
									},
									"scope": 1296,
									"src": "759:395:11",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1294,
										"nodeType": "Block",
										"src": "1338:149:11",
										"statements": [
											{
												"assignments": [
													1279
												],
												"declarations": [
													{
														"constant": false,
														"id": 1279,
														"mutability": "mutable",
														"name": "current",
														"nameLocation": "1356:7:11",
														"nodeType": "VariableDeclaration",
														"scope": 1294,
														"src": "1348:15:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1278,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1348:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1283,
												"initialValue": {
													"arguments": [
														{
															"id": 1281,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1273,
															"src": "1376:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1280,
														"name": "_useNonce",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1270,
														"src": "1366:9:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) returns (uint256)"
														}
													},
													"id": 1282,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1366:16:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1348:34:11"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1286,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1284,
														"name": "nonce",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1275,
														"src": "1396:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1285,
														"name": "current",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1279,
														"src": "1405:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1396:16:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1293,
												"nodeType": "IfStatement",
												"src": "1392:89:11",
												"trueBody": {
													"id": 1292,
													"nodeType": "Block",
													"src": "1414:67:11",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1288,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1273,
																		"src": "1455:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1289,
																		"name": "current",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1279,
																		"src": "1462:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1287,
																	"name": "InvalidAccountNonce",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1238,
																	"src": "1435:19:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (address,uint256) pure returns (error)"
																	}
																},
																"id": 1290,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1435:35:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1291,
															"nodeType": "RevertStatement",
															"src": "1428:42:11"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1271,
										"nodeType": "StructuredDocumentation",
										"src": "1160:100:11",
										"text": " @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`."
									},
									"id": 1295,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_useCheckedNonce",
									"nameLocation": "1274:16:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1276,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1273,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1299:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1295,
												"src": "1291:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1272,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1291:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1275,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "1314:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1295,
												"src": "1306:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1274,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1306:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1290:30:11"
									},
									"returnParameters": {
										"id": 1277,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1338:0:11"
									},
									"scope": 1296,
									"src": "1265:222:11",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1297,
							"src": "209:1280:11",
							"usedErrors": [
								1238
							],
							"usedEvents": []
						}
					],
					"src": "99:1391:11"
				},
				"id": 11
			},
			"@openzeppelin/contracts/utils/Pausable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Pausable.sol",
					"exportedSymbols": {
						"Context": [
							1228
						],
						"Pausable": [
							1413
						]
					},
					"id": 1414,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1298,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:12"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 1300,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1414,
							"sourceUnit": 1229,
							"src": "128:45:12",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1299,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1228,
										"src": "136:7:12",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1302,
										"name": "Context",
										"nameLocations": [
											"645:7:12"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1228,
										"src": "645:7:12"
									},
									"id": 1303,
									"nodeType": "InheritanceSpecifier",
									"src": "645:7:12"
								}
							],
							"canonicalName": "Pausable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1301,
								"nodeType": "StructuredDocumentation",
								"src": "175:439:12",
								"text": " @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."
							},
							"fullyImplemented": true,
							"id": 1413,
							"linearizedBaseContracts": [
								1413,
								1228
							],
							"name": "Pausable",
							"nameLocation": "633:8:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 1305,
									"mutability": "mutable",
									"name": "_paused",
									"nameLocation": "672:7:12",
									"nodeType": "VariableDeclaration",
									"scope": 1413,
									"src": "659:20:12",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 1304,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "659:4:12",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1306,
										"nodeType": "StructuredDocumentation",
										"src": "686:73:12",
										"text": " @dev Emitted when the pause is triggered by `account`."
									},
									"eventSelector": "62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258",
									"id": 1310,
									"name": "Paused",
									"nameLocation": "770:6:12",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1309,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1308,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "785:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1310,
												"src": "777:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1307,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "777:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "776:17:12"
									},
									"src": "764:30:12"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1311,
										"nodeType": "StructuredDocumentation",
										"src": "800:70:12",
										"text": " @dev Emitted when the pause is lifted by `account`."
									},
									"eventSelector": "5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa",
									"id": 1315,
									"name": "Unpaused",
									"nameLocation": "881:8:12",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1314,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1313,
												"indexed": false,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "898:7:12",
												"nodeType": "VariableDeclaration",
												"scope": 1315,
												"src": "890:15:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1312,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "890:7:12",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "889:17:12"
									},
									"src": "875:32:12"
								},
								{
									"documentation": {
										"id": 1316,
										"nodeType": "StructuredDocumentation",
										"src": "913:76:12",
										"text": " @dev The operation failed because the contract is paused."
									},
									"errorSelector": "d93c0665",
									"id": 1318,
									"name": "EnforcedPause",
									"nameLocation": "1000:13:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1317,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1013:2:12"
									},
									"src": "994:22:12"
								},
								{
									"documentation": {
										"id": 1319,
										"nodeType": "StructuredDocumentation",
										"src": "1022:80:12",
										"text": " @dev The operation failed because the contract is not paused."
									},
									"errorSelector": "8dfc202b",
									"id": 1321,
									"name": "ExpectedPause",
									"nameLocation": "1113:13:12",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1320,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1126:2:12"
									},
									"src": "1107:22:12"
								},
								{
									"body": {
										"id": 1329,
										"nodeType": "Block",
										"src": "1221:32:12",
										"statements": [
											{
												"expression": {
													"id": 1327,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1325,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1305,
														"src": "1231:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 1326,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1241:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "1231:15:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1328,
												"nodeType": "ExpressionStatement",
												"src": "1231:15:12"
											}
										]
									},
									"documentation": {
										"id": 1322,
										"nodeType": "StructuredDocumentation",
										"src": "1135:67:12",
										"text": " @dev Initializes the contract in unpaused state."
									},
									"id": 1330,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1323,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1218:2:12"
									},
									"returnParameters": {
										"id": 1324,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1221:0:12"
									},
									"scope": 1413,
									"src": "1207:46:12",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1337,
										"nodeType": "Block",
										"src": "1464:47:12",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1333,
														"name": "_requireNotPaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1367,
														"src": "1474:17:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 1334,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1474:19:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1335,
												"nodeType": "ExpressionStatement",
												"src": "1474:19:12"
											},
											{
												"id": 1336,
												"nodeType": "PlaceholderStatement",
												"src": "1503:1:12"
											}
										]
									},
									"documentation": {
										"id": 1331,
										"nodeType": "StructuredDocumentation",
										"src": "1259:175:12",
										"text": " @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."
									},
									"id": 1338,
									"name": "whenNotPaused",
									"nameLocation": "1448:13:12",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1332,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1461:2:12"
									},
									"src": "1439:72:12",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1345,
										"nodeType": "Block",
										"src": "1711:44:12",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1341,
														"name": "_requirePaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1380,
														"src": "1721:14:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 1342,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1721:16:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1343,
												"nodeType": "ExpressionStatement",
												"src": "1721:16:12"
											},
											{
												"id": 1344,
												"nodeType": "PlaceholderStatement",
												"src": "1747:1:12"
											}
										]
									},
									"documentation": {
										"id": 1339,
										"nodeType": "StructuredDocumentation",
										"src": "1517:167:12",
										"text": " @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."
									},
									"id": 1346,
									"name": "whenPaused",
									"nameLocation": "1698:10:12",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1340,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1708:2:12"
									},
									"src": "1689:66:12",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1354,
										"nodeType": "Block",
										"src": "1903:31:12",
										"statements": [
											{
												"expression": {
													"id": 1352,
													"name": "_paused",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1305,
													"src": "1920:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1351,
												"id": 1353,
												"nodeType": "Return",
												"src": "1913:14:12"
											}
										]
									},
									"documentation": {
										"id": 1347,
										"nodeType": "StructuredDocumentation",
										"src": "1761:84:12",
										"text": " @dev Returns true if the contract is paused, and false otherwise."
									},
									"functionSelector": "5c975abb",
									"id": 1355,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "paused",
									"nameLocation": "1859:6:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1348,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1865:2:12"
									},
									"returnParameters": {
										"id": 1351,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1350,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1355,
												"src": "1897:4:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1349,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1897:4:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1896:6:12"
									},
									"scope": 1413,
									"src": "1850:84:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1366,
										"nodeType": "Block",
										"src": "2053:77:12",
										"statements": [
											{
												"condition": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1359,
														"name": "paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1355,
														"src": "2067:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
															"typeString": "function () view returns (bool)"
														}
													},
													"id": 1360,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2067:8:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1365,
												"nodeType": "IfStatement",
												"src": "2063:61:12",
												"trueBody": {
													"id": 1364,
													"nodeType": "Block",
													"src": "2077:47:12",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1361,
																	"name": "EnforcedPause",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1318,
																	"src": "2098:13:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1362,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2098:15:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1363,
															"nodeType": "RevertStatement",
															"src": "2091:22:12"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1356,
										"nodeType": "StructuredDocumentation",
										"src": "1940:57:12",
										"text": " @dev Throws if the contract is paused."
									},
									"id": 1367,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requireNotPaused",
									"nameLocation": "2011:17:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1357,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2028:2:12"
									},
									"returnParameters": {
										"id": 1358,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2053:0:12"
									},
									"scope": 1413,
									"src": "2002:128:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1379,
										"nodeType": "Block",
										"src": "2250:78:12",
										"statements": [
											{
												"condition": {
													"id": 1373,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "2264:9:12",
													"subExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 1371,
															"name": "paused",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1355,
															"src": "2265:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																"typeString": "function () view returns (bool)"
															}
														},
														"id": 1372,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2265:8:12",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1378,
												"nodeType": "IfStatement",
												"src": "2260:62:12",
												"trueBody": {
													"id": 1377,
													"nodeType": "Block",
													"src": "2275:47:12",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1374,
																	"name": "ExpectedPause",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1321,
																	"src": "2296:13:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1375,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2296:15:12",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1376,
															"nodeType": "RevertStatement",
															"src": "2289:22:12"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1368,
										"nodeType": "StructuredDocumentation",
										"src": "2136:61:12",
										"text": " @dev Throws if the contract is not paused."
									},
									"id": 1380,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requirePaused",
									"nameLocation": "2211:14:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1369,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2225:2:12"
									},
									"returnParameters": {
										"id": 1370,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2250:0:12"
									},
									"scope": 1413,
									"src": "2202:126:12",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1395,
										"nodeType": "Block",
										"src": "2512:66:12",
										"statements": [
											{
												"expression": {
													"id": 1388,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1386,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1305,
														"src": "2522:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1387,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2532:4:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "2522:14:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1389,
												"nodeType": "ExpressionStatement",
												"src": "2522:14:12"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1391,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1210,
																"src": "2558:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1392,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2558:12:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1390,
														"name": "Paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1310,
														"src": "2551:6:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1393,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2551:20:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1394,
												"nodeType": "EmitStatement",
												"src": "2546:25:12"
											}
										]
									},
									"documentation": {
										"id": 1381,
										"nodeType": "StructuredDocumentation",
										"src": "2334:124:12",
										"text": " @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."
									},
									"id": 1396,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1384,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1383,
												"name": "whenNotPaused",
												"nameLocations": [
													"2498:13:12"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1338,
												"src": "2498:13:12"
											},
											"nodeType": "ModifierInvocation",
											"src": "2498:13:12"
										}
									],
									"name": "_pause",
									"nameLocation": "2472:6:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1382,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2478:2:12"
									},
									"returnParameters": {
										"id": 1385,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2512:0:12"
									},
									"scope": 1413,
									"src": "2463:115:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1411,
										"nodeType": "Block",
										"src": "2758:69:12",
										"statements": [
											{
												"expression": {
													"id": 1404,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1402,
														"name": "_paused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1305,
														"src": "2768:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 1403,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2778:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "2768:15:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1405,
												"nodeType": "ExpressionStatement",
												"src": "2768:15:12"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 1407,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1210,
																"src": "2807:10:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 1408,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2807:12:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1406,
														"name": "Unpaused",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1315,
														"src": "2798:8:12",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 1409,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2798:22:12",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1410,
												"nodeType": "EmitStatement",
												"src": "2793:27:12"
											}
										]
									},
									"documentation": {
										"id": 1397,
										"nodeType": "StructuredDocumentation",
										"src": "2584:121:12",
										"text": " @dev Returns to normal state.\n Requirements:\n - The contract must be paused."
									},
									"id": 1412,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1400,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1399,
												"name": "whenPaused",
												"nameLocations": [
													"2747:10:12"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1346,
												"src": "2747:10:12"
											},
											"nodeType": "ModifierInvocation",
											"src": "2747:10:12"
										}
									],
									"name": "_unpause",
									"nameLocation": "2719:8:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1398,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2727:2:12"
									},
									"returnParameters": {
										"id": 1401,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2758:0:12"
									},
									"scope": 1413,
									"src": "2710:117:12",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1414,
							"src": "615:2214:12",
							"usedErrors": [
								1318,
								1321
							],
							"usedEvents": [
								1310,
								1315
							]
						}
					],
					"src": "102:2728:12"
				},
				"id": 12
			},
			"@openzeppelin/contracts/utils/ShortStrings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/ShortStrings.sol",
					"exportedSymbols": {
						"ShortString": [
							1419
						],
						"ShortStrings": [
							1630
						],
						"StorageSlot": [
							1740
						]
					},
					"id": 1631,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1415,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:13"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/StorageSlot.sol",
							"file": "./StorageSlot.sol",
							"id": 1417,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1631,
							"sourceUnit": 1741,
							"src": "132:46:13",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1416,
										"name": "StorageSlot",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1740,
										"src": "140:11:13",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"canonicalName": "ShortString",
							"id": 1419,
							"name": "ShortString",
							"nameLocation": "353:11:13",
							"nodeType": "UserDefinedValueTypeDefinition",
							"src": "348:28:13",
							"underlyingType": {
								"id": 1418,
								"name": "bytes32",
								"nodeType": "ElementaryTypeName",
								"src": "368:7:13",
								"typeDescriptions": {
									"typeIdentifier": "t_bytes32",
									"typeString": "bytes32"
								}
							}
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ShortStrings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1420,
								"nodeType": "StructuredDocumentation",
								"src": "378:876:13",
								"text": " @dev This library provides functions to convert short memory strings\n into a `ShortString` type that can be used as an immutable variable.\n Strings of arbitrary length can be optimized using this library if\n they are short enough (up to 31 bytes) by packing them with their\n length (1 byte) in a single EVM word (32 bytes). Additionally, a\n fallback mechanism can be used for every other case.\n Usage example:\n ```solidity\n contract Named {\n     using ShortStrings for *;\n     ShortString private immutable _name;\n     string private _nameFallback;\n     constructor(string memory contractName) {\n         _name = contractName.toShortStringWithFallback(_nameFallback);\n     }\n     function name() external view returns (string memory) {\n         return _name.toStringWithFallback(_nameFallback);\n     }\n }\n ```"
							},
							"fullyImplemented": true,
							"id": 1630,
							"linearizedBaseContracts": [
								1630
							],
							"name": "ShortStrings",
							"nameLocation": "1263:12:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1423,
									"mutability": "constant",
									"name": "FALLBACK_SENTINEL",
									"nameLocation": "1370:17:13",
									"nodeType": "VariableDeclaration",
									"scope": 1630,
									"src": "1345:111:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1421,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1345:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030304646",
										"id": 1422,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1390:66:13",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_255_by_1",
											"typeString": "int_const 255"
										},
										"value": "0x00000000000000000000000000000000000000000000000000000000000000FF"
									},
									"visibility": "private"
								},
								{
									"errorSelector": "305a27a9",
									"id": 1427,
									"name": "StringTooLong",
									"nameLocation": "1469:13:13",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1426,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1425,
												"mutability": "mutable",
												"name": "str",
												"nameLocation": "1490:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1427,
												"src": "1483:10:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1424,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1483:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1482:12:13"
									},
									"src": "1463:32:13"
								},
								{
									"errorSelector": "b3512b0c",
									"id": 1429,
									"name": "InvalidShortString",
									"nameLocation": "1506:18:13",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1428,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1524:2:13"
									},
									"src": "1500:27:13"
								},
								{
									"body": {
										"id": 1472,
										"nodeType": "Block",
										"src": "1786:208:13",
										"statements": [
											{
												"assignments": [
													1439
												],
												"declarations": [
													{
														"constant": false,
														"id": 1439,
														"mutability": "mutable",
														"name": "bstr",
														"nameLocation": "1809:4:13",
														"nodeType": "VariableDeclaration",
														"scope": 1472,
														"src": "1796:17:13",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1438,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1796:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1444,
												"initialValue": {
													"arguments": [
														{
															"id": 1442,
															"name": "str",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1432,
															"src": "1822:3:13",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1441,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1816:5:13",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
															"typeString": "type(bytes storage pointer)"
														},
														"typeName": {
															"id": 1440,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1816:5:13",
															"typeDescriptions": {}
														}
													},
													"id": 1443,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1816:10:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1796:30:13"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1448,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1445,
															"name": "bstr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1439,
															"src": "1840:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1446,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1845:6:13",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1840:11:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3331",
														"id": 1447,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1854:2:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31_by_1",
															"typeString": "int_const 31"
														},
														"value": "31"
													},
													"src": "1840:16:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1454,
												"nodeType": "IfStatement",
												"src": "1836:72:13",
												"trueBody": {
													"id": 1453,
													"nodeType": "Block",
													"src": "1858:50:13",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1450,
																		"name": "str",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1432,
																		"src": "1893:3:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1449,
																	"name": "StringTooLong",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1427,
																	"src": "1879:13:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_string_memory_ptr_$returns$_t_error_$",
																		"typeString": "function (string memory) pure returns (error)"
																	}
																},
																"id": 1451,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1879:18:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1452,
															"nodeType": "RevertStatement",
															"src": "1872:25:13"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1468,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 1463,
																						"name": "bstr",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1439,
																						"src": "1965:4:13",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					],
																					"id": 1462,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "1957:7:13",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bytes32_$",
																						"typeString": "type(bytes32)"
																					},
																					"typeName": {
																						"id": 1461,
																						"name": "bytes32",
																						"nodeType": "ElementaryTypeName",
																						"src": "1957:7:13",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 1464,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1957:13:13",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			],
																			"id": 1460,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1949:7:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 1459,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "1949:7:13",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1465,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1949:22:13",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "|",
																	"rightExpression": {
																		"expression": {
																			"id": 1466,
																			"name": "bstr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1439,
																			"src": "1974:4:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 1467,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1979:6:13",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "1974:11:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1949:36:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1458,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1941:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1457,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "1941:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 1469,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1941:45:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 1455,
															"name": "ShortString",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1419,
															"src": "1924:11:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1419_$",
																"typeString": "type(ShortString)"
															}
														},
														"id": 1456,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "1936:4:13",
														"memberName": "wrap",
														"nodeType": "MemberAccess",
														"src": "1924:16:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$1419_$",
															"typeString": "function (bytes32) pure returns (ShortString)"
														}
													},
													"id": 1470,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1924:63:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
														"typeString": "ShortString"
													}
												},
												"functionReturnParameters": 1437,
												"id": 1471,
												"nodeType": "Return",
												"src": "1917:70:13"
											}
										]
									},
									"documentation": {
										"id": 1430,
										"nodeType": "StructuredDocumentation",
										"src": "1533:170:13",
										"text": " @dev Encode a string of at most 31 chars into a `ShortString`.\n This will trigger a `StringTooLong` error is the input string is too long."
									},
									"id": 1473,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toShortString",
									"nameLocation": "1717:13:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1433,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1432,
												"mutability": "mutable",
												"name": "str",
												"nameLocation": "1745:3:13",
												"nodeType": "VariableDeclaration",
												"scope": 1473,
												"src": "1731:17:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1431,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1731:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1730:19:13"
									},
									"returnParameters": {
										"id": 1437,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1436,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1473,
												"src": "1773:11:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1435,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1434,
														"name": "ShortString",
														"nameLocations": [
															"1773:11:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1419,
														"src": "1773:11:13"
													},
													"referencedDeclaration": 1419,
													"src": "1773:11:13",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:13:13"
									},
									"scope": 1630,
									"src": "1708:286:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1498,
										"nodeType": "Block",
										"src": "2152:331:13",
										"statements": [
											{
												"assignments": [
													1483
												],
												"declarations": [
													{
														"constant": false,
														"id": 1483,
														"mutability": "mutable",
														"name": "len",
														"nameLocation": "2170:3:13",
														"nodeType": "VariableDeclaration",
														"scope": 1498,
														"src": "2162:11:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1482,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2162:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1487,
												"initialValue": {
													"arguments": [
														{
															"id": 1485,
															"name": "sstr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1477,
															"src": "2187:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
																"typeString": "ShortString"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
																"typeString": "ShortString"
															}
														],
														"id": 1484,
														"name": "byteLength",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1531,
														"src": "2176:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1419_$returns$_t_uint256_$",
															"typeString": "function (ShortString) pure returns (uint256)"
														}
													},
													"id": 1486,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2176:16:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2162:30:13"
											},
											{
												"assignments": [
													1489
												],
												"declarations": [
													{
														"constant": false,
														"id": 1489,
														"mutability": "mutable",
														"name": "str",
														"nameLocation": "2294:3:13",
														"nodeType": "VariableDeclaration",
														"scope": 1498,
														"src": "2280:17:13",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 1488,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2280:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1494,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "3332",
															"id": 1492,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2311:2:13",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "32"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															}
														],
														"id": 1491,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "2300:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256) pure returns (string memory)"
														},
														"typeName": {
															"id": 1490,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2304:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														}
													},
													"id": 1493,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2300:14:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2280:34:13"
											},
											{
												"AST": {
													"nativeSrc": "2376:81:13",
													"nodeType": "YulBlock",
													"src": "2376:81:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "str",
																		"nativeSrc": "2397:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "2397:3:13"
																	},
																	{
																		"name": "len",
																		"nativeSrc": "2402:3:13",
																		"nodeType": "YulIdentifier",
																		"src": "2402:3:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2390:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "2390:6:13"
																},
																"nativeSrc": "2390:16:13",
																"nodeType": "YulFunctionCall",
																"src": "2390:16:13"
															},
															"nativeSrc": "2390:16:13",
															"nodeType": "YulExpressionStatement",
															"src": "2390:16:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "str",
																				"nativeSrc": "2430:3:13",
																				"nodeType": "YulIdentifier",
																				"src": "2430:3:13"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2435:4:13",
																				"nodeType": "YulLiteral",
																				"src": "2435:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2426:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "2426:3:13"
																		},
																		"nativeSrc": "2426:14:13",
																		"nodeType": "YulFunctionCall",
																		"src": "2426:14:13"
																	},
																	{
																		"name": "sstr",
																		"nativeSrc": "2442:4:13",
																		"nodeType": "YulIdentifier",
																		"src": "2442:4:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2419:6:13",
																	"nodeType": "YulIdentifier",
																	"src": "2419:6:13"
																},
																"nativeSrc": "2419:28:13",
																"nodeType": "YulFunctionCall",
																"src": "2419:28:13"
															},
															"nativeSrc": "2419:28:13",
															"nodeType": "YulExpressionStatement",
															"src": "2419:28:13"
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1483,
														"isOffset": false,
														"isSlot": false,
														"src": "2402:3:13",
														"valueSize": 1
													},
													{
														"declaration": 1477,
														"isOffset": false,
														"isSlot": false,
														"src": "2442:4:13",
														"valueSize": 1
													},
													{
														"declaration": 1489,
														"isOffset": false,
														"isSlot": false,
														"src": "2397:3:13",
														"valueSize": 1
													},
													{
														"declaration": 1489,
														"isOffset": false,
														"isSlot": false,
														"src": "2430:3:13",
														"valueSize": 1
													}
												],
												"id": 1495,
												"nodeType": "InlineAssembly",
												"src": "2367:90:13"
											},
											{
												"expression": {
													"id": 1496,
													"name": "str",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1489,
													"src": "2473:3:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1481,
												"id": 1497,
												"nodeType": "Return",
												"src": "2466:10:13"
											}
										]
									},
									"documentation": {
										"id": 1474,
										"nodeType": "StructuredDocumentation",
										"src": "2000:73:13",
										"text": " @dev Decode a `ShortString` back to a \"normal\" string."
									},
									"id": 1499,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "2087:8:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1478,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1477,
												"mutability": "mutable",
												"name": "sstr",
												"nameLocation": "2108:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 1499,
												"src": "2096:16:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1476,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1475,
														"name": "ShortString",
														"nameLocations": [
															"2096:11:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1419,
														"src": "2096:11:13"
													},
													"referencedDeclaration": 1419,
													"src": "2096:11:13",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2095:18:13"
									},
									"returnParameters": {
										"id": 1481,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1480,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1499,
												"src": "2137:13:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1479,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2137:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2136:15:13"
									},
									"scope": 1630,
									"src": "2078:405:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1530,
										"nodeType": "Block",
										"src": "2625:175:13",
										"statements": [
											{
												"assignments": [
													1509
												],
												"declarations": [
													{
														"constant": false,
														"id": 1509,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "2643:6:13",
														"nodeType": "VariableDeclaration",
														"scope": 1530,
														"src": "2635:14:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1508,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2635:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1519,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1518,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1514,
																		"name": "sstr",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1503,
																		"src": "2679:4:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
																			"typeString": "ShortString"
																		}
																	],
																	"expression": {
																		"id": 1512,
																		"name": "ShortString",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1419,
																		"src": "2660:11:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1419_$",
																			"typeString": "type(ShortString)"
																		}
																	},
																	"id": 1513,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "2672:6:13",
																	"memberName": "unwrap",
																	"nodeType": "MemberAccess",
																	"src": "2660:18:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1419_$returns$_t_bytes32_$",
																		"typeString": "function (ShortString) pure returns (bytes32)"
																	}
																},
																"id": 1515,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2660:24:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1511,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2652:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1510,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2652:7:13",
																"typeDescriptions": {}
															}
														},
														"id": 1516,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2652:33:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&",
													"rightExpression": {
														"hexValue": "30784646",
														"id": 1517,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2688:4:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_255_by_1",
															"typeString": "int_const 255"
														},
														"value": "0xFF"
													},
													"src": "2652:40:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2635:57:13"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1522,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1520,
														"name": "result",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1509,
														"src": "2706:6:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3331",
														"id": 1521,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2715:2:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31_by_1",
															"typeString": "int_const 31"
														},
														"value": "31"
													},
													"src": "2706:11:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1527,
												"nodeType": "IfStatement",
												"src": "2702:69:13",
												"trueBody": {
													"id": 1526,
													"nodeType": "Block",
													"src": "2719:52:13",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1523,
																	"name": "InvalidShortString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1429,
																	"src": "2740:18:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1524,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2740:20:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1525,
															"nodeType": "RevertStatement",
															"src": "2733:27:13"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1528,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1509,
													"src": "2787:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1507,
												"id": 1529,
												"nodeType": "Return",
												"src": "2780:13:13"
											}
										]
									},
									"documentation": {
										"id": 1500,
										"nodeType": "StructuredDocumentation",
										"src": "2489:61:13",
										"text": " @dev Return the length of a `ShortString`."
									},
									"id": 1531,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "byteLength",
									"nameLocation": "2564:10:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1503,
												"mutability": "mutable",
												"name": "sstr",
												"nameLocation": "2587:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 1531,
												"src": "2575:16:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1502,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1501,
														"name": "ShortString",
														"nameLocations": [
															"2575:11:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1419,
														"src": "2575:11:13"
													},
													"referencedDeclaration": 1419,
													"src": "2575:11:13",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2574:18:13"
									},
									"returnParameters": {
										"id": 1507,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1506,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1531,
												"src": "2616:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1505,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2616:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2615:9:13"
									},
									"scope": 1630,
									"src": "2555:245:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1570,
										"nodeType": "Block",
										"src": "3023:231:13",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1548,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1544,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1534,
																	"src": "3043:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1543,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3037:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																	"typeString": "type(bytes storage pointer)"
																},
																"typeName": {
																	"id": 1542,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "3037:5:13",
																	"typeDescriptions": {}
																}
															},
															"id": 1545,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3037:12:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1546,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3050:6:13",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3037:19:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"hexValue": "3332",
														"id": 1547,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3059:2:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"src": "3037:24:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1568,
													"nodeType": "Block",
													"src": "3121:127:13",
													"statements": [
														{
															"expression": {
																"id": 1561,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 1557,
																				"name": "store",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1536,
																				"src": "3161:5:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_string_storage_ptr",
																					"typeString": "string storage pointer"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_string_storage_ptr",
																					"typeString": "string storage pointer"
																				}
																			],
																			"expression": {
																				"id": 1554,
																				"name": "StorageSlot",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1740,
																				"src": "3135:11:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_StorageSlot_$1740_$",
																					"typeString": "type(library StorageSlot)"
																				}
																			},
																			"id": 1556,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "3147:13:13",
																			"memberName": "getStringSlot",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1717,
																			"src": "3135:25:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_string_storage_ptr_$returns$_t_struct$_StringSlot_$1648_storage_ptr_$",
																				"typeString": "function (string storage pointer) pure returns (struct StorageSlot.StringSlot storage pointer)"
																			}
																		},
																		"id": 1558,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3135:32:13",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_StringSlot_$1648_storage_ptr",
																			"typeString": "struct StorageSlot.StringSlot storage pointer"
																		}
																	},
																	"id": 1559,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "3168:5:13",
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1647,
																	"src": "3135:38:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage",
																		"typeString": "string storage ref"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1560,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1534,
																	"src": "3176:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																"src": "3135:46:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															},
															"id": 1562,
															"nodeType": "ExpressionStatement",
															"src": "3135:46:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1565,
																		"name": "FALLBACK_SENTINEL",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1423,
																		"src": "3219:17:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"expression": {
																		"id": 1563,
																		"name": "ShortString",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1419,
																		"src": "3202:11:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1419_$",
																			"typeString": "type(ShortString)"
																		}
																	},
																	"id": 1564,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "3214:4:13",
																	"memberName": "wrap",
																	"nodeType": "MemberAccess",
																	"src": "3202:16:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$1419_$",
																		"typeString": "function (bytes32) pure returns (ShortString)"
																	}
																},
																"id": 1566,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3202:35:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
																	"typeString": "ShortString"
																}
															},
															"functionReturnParameters": 1541,
															"id": 1567,
															"nodeType": "Return",
															"src": "3195:42:13"
														}
													]
												},
												"id": 1569,
												"nodeType": "IfStatement",
												"src": "3033:215:13",
												"trueBody": {
													"id": 1553,
													"nodeType": "Block",
													"src": "3063:52:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1550,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1534,
																		"src": "3098:5:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1549,
																	"name": "toShortString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1473,
																	"src": "3084:13:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_userDefinedValueType$_ShortString_$1419_$",
																		"typeString": "function (string memory) pure returns (ShortString)"
																	}
																},
																"id": 1551,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3084:20:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
																	"typeString": "ShortString"
																}
															},
															"functionReturnParameters": 1541,
															"id": 1552,
															"nodeType": "Return",
															"src": "3077:27:13"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1532,
										"nodeType": "StructuredDocumentation",
										"src": "2806:103:13",
										"text": " @dev Encode a string into a `ShortString`, or write it to storage if it is too long."
									},
									"id": 1571,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toShortStringWithFallback",
									"nameLocation": "2923:25:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1537,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1534,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2963:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1571,
												"src": "2949:19:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1533,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2949:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1536,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "2985:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1571,
												"src": "2970:20:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1535,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2970:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2948:43:13"
									},
									"returnParameters": {
										"id": 1541,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1540,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1571,
												"src": "3010:11:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1539,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1538,
														"name": "ShortString",
														"nameLocations": [
															"3010:11:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1419,
														"src": "3010:11:13"
													},
													"referencedDeclaration": 1419,
													"src": "3010:11:13",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3009:13:13"
									},
									"scope": 1630,
									"src": "2914:340:13",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1597,
										"nodeType": "Block",
										"src": "3494:158:13",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1587,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1584,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1575,
																"src": "3527:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
																	"typeString": "ShortString"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
																	"typeString": "ShortString"
																}
															],
															"expression": {
																"id": 1582,
																"name": "ShortString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1419,
																"src": "3508:11:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1419_$",
																	"typeString": "type(ShortString)"
																}
															},
															"id": 1583,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "3520:6:13",
															"memberName": "unwrap",
															"nodeType": "MemberAccess",
															"src": "3508:18:13",
															"typeDescriptions": {
																"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1419_$returns$_t_bytes32_$",
																"typeString": "function (ShortString) pure returns (bytes32)"
															}
														},
														"id": 1585,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3508:25:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1586,
														"name": "FALLBACK_SENTINEL",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1423,
														"src": "3537:17:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3508:46:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1595,
													"nodeType": "Block",
													"src": "3609:37:13",
													"statements": [
														{
															"expression": {
																"id": 1593,
																"name": "store",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1577,
																"src": "3630:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage_ptr",
																	"typeString": "string storage pointer"
																}
															},
															"functionReturnParameters": 1581,
															"id": 1594,
															"nodeType": "Return",
															"src": "3623:12:13"
														}
													]
												},
												"id": 1596,
												"nodeType": "IfStatement",
												"src": "3504:142:13",
												"trueBody": {
													"id": 1592,
													"nodeType": "Block",
													"src": "3556:47:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1589,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1575,
																		"src": "3586:5:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
																			"typeString": "ShortString"
																		}
																	],
																	"id": 1588,
																	"name": "toString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1499,
																	"src": "3577:8:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1419_$returns$_t_string_memory_ptr_$",
																		"typeString": "function (ShortString) pure returns (string memory)"
																	}
																},
																"id": 1590,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3577:15:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"functionReturnParameters": 1581,
															"id": 1591,
															"nodeType": "Return",
															"src": "3570:22:13"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1572,
										"nodeType": "StructuredDocumentation",
										"src": "3260:120:13",
										"text": " @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}."
									},
									"id": 1598,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toStringWithFallback",
									"nameLocation": "3394:20:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1578,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1575,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3427:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1598,
												"src": "3415:17:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1574,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1573,
														"name": "ShortString",
														"nameLocations": [
															"3415:11:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1419,
														"src": "3415:11:13"
													},
													"referencedDeclaration": 1419,
													"src": "3415:11:13",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1577,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3449:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1598,
												"src": "3434:20:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1576,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3434:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3414:41:13"
									},
									"returnParameters": {
										"id": 1581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1580,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1598,
												"src": "3479:13:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1579,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3479:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3478:15:13"
									},
									"scope": 1630,
									"src": "3385:267:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1628,
										"nodeType": "Block",
										"src": "4132:174:13",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1614,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1611,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1602,
																"src": "4165:5:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
																	"typeString": "ShortString"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
																	"typeString": "ShortString"
																}
															],
															"expression": {
																"id": 1609,
																"name": "ShortString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1419,
																"src": "4146:11:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1419_$",
																	"typeString": "type(ShortString)"
																}
															},
															"id": 1610,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "4158:6:13",
															"memberName": "unwrap",
															"nodeType": "MemberAccess",
															"src": "4146:18:13",
															"typeDescriptions": {
																"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1419_$returns$_t_bytes32_$",
																"typeString": "function (ShortString) pure returns (bytes32)"
															}
														},
														"id": 1612,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4146:25:13",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1613,
														"name": "FALLBACK_SENTINEL",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1423,
														"src": "4175:17:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "4146:46:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1626,
													"nodeType": "Block",
													"src": "4249:51:13",
													"statements": [
														{
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1622,
																			"name": "store",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1604,
																			"src": "4276:5:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_storage_ptr",
																				"typeString": "string storage pointer"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_storage_ptr",
																				"typeString": "string storage pointer"
																			}
																		],
																		"id": 1621,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4270:5:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 1620,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "4270:5:13",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1623,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4270:12:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_storage_ptr",
																		"typeString": "bytes storage pointer"
																	}
																},
																"id": 1624,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4283:6:13",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "4270:19:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1608,
															"id": 1625,
															"nodeType": "Return",
															"src": "4263:26:13"
														}
													]
												},
												"id": 1627,
												"nodeType": "IfStatement",
												"src": "4142:158:13",
												"trueBody": {
													"id": 1619,
													"nodeType": "Block",
													"src": "4194:49:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1616,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1602,
																		"src": "4226:5:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
																			"typeString": "ShortString"
																		}
																	],
																	"id": 1615,
																	"name": "byteLength",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1531,
																	"src": "4215:10:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1419_$returns$_t_uint256_$",
																		"typeString": "function (ShortString) pure returns (uint256)"
																	}
																},
																"id": 1617,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4215:17:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1608,
															"id": 1618,
															"nodeType": "Return",
															"src": "4208:24:13"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1599,
										"nodeType": "StructuredDocumentation",
										"src": "3658:364:13",
										"text": " @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n {setWithFallback}.\n WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n actual characters as the UTF-8 encoding of a single character can span over multiple bytes."
									},
									"id": 1629,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "byteLengthWithFallback",
									"nameLocation": "4036:22:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1605,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1602,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4071:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1629,
												"src": "4059:17:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1601,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1600,
														"name": "ShortString",
														"nameLocations": [
															"4059:11:13"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1419,
														"src": "4059:11:13"
													},
													"referencedDeclaration": 1419,
													"src": "4059:11:13",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1604,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "4093:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1629,
												"src": "4078:20:13",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1603,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4078:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4058:41:13"
									},
									"returnParameters": {
										"id": 1608,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1607,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1629,
												"src": "4123:7:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1606,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4123:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4122:9:13"
									},
									"scope": 1630,
									"src": "4027:279:13",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1631,
							"src": "1255:3053:13",
							"usedErrors": [
								1427,
								1429
							],
							"usedEvents": []
						}
					],
					"src": "106:4203:13"
				},
				"id": 13
			},
			"@openzeppelin/contracts/utils/StorageSlot.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/StorageSlot.sol",
					"exportedSymbols": {
						"StorageSlot": [
							1740
						]
					},
					"id": 1741,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1632,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "193:24:14"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "StorageSlot",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1633,
								"nodeType": "StructuredDocumentation",
								"src": "219:1025:14",
								"text": " @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(newImplementation.code.length > 0);\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```"
							},
							"fullyImplemented": true,
							"id": 1740,
							"linearizedBaseContracts": [
								1740
							],
							"name": "StorageSlot",
							"nameLocation": "1253:11:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "StorageSlot.AddressSlot",
									"id": 1636,
									"members": [
										{
											"constant": false,
											"id": 1635,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1308:5:14",
											"nodeType": "VariableDeclaration",
											"scope": 1636,
											"src": "1300:13:14",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1634,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1300:7:14",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AddressSlot",
									"nameLocation": "1278:11:14",
									"nodeType": "StructDefinition",
									"scope": 1740,
									"src": "1271:49:14",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.BooleanSlot",
									"id": 1639,
									"members": [
										{
											"constant": false,
											"id": 1638,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1360:5:14",
											"nodeType": "VariableDeclaration",
											"scope": 1639,
											"src": "1355:10:14",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1637,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1355:4:14",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BooleanSlot",
									"nameLocation": "1333:11:14",
									"nodeType": "StructDefinition",
									"scope": 1740,
									"src": "1326:46:14",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.Bytes32Slot",
									"id": 1642,
									"members": [
										{
											"constant": false,
											"id": 1641,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1415:5:14",
											"nodeType": "VariableDeclaration",
											"scope": 1642,
											"src": "1407:13:14",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 1640,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1407:7:14",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Bytes32Slot",
									"nameLocation": "1385:11:14",
									"nodeType": "StructDefinition",
									"scope": 1740,
									"src": "1378:49:14",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.Uint256Slot",
									"id": 1645,
									"members": [
										{
											"constant": false,
											"id": 1644,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1470:5:14",
											"nodeType": "VariableDeclaration",
											"scope": 1645,
											"src": "1462:13:14",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1643,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1462:7:14",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Uint256Slot",
									"nameLocation": "1440:11:14",
									"nodeType": "StructDefinition",
									"scope": 1740,
									"src": "1433:49:14",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.StringSlot",
									"id": 1648,
									"members": [
										{
											"constant": false,
											"id": 1647,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1523:5:14",
											"nodeType": "VariableDeclaration",
											"scope": 1648,
											"src": "1516:12:14",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 1646,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "1516:6:14",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StringSlot",
									"nameLocation": "1495:10:14",
									"nodeType": "StructDefinition",
									"scope": 1740,
									"src": "1488:47:14",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.BytesSlot",
									"id": 1651,
									"members": [
										{
											"constant": false,
											"id": 1650,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1574:5:14",
											"nodeType": "VariableDeclaration",
											"scope": 1651,
											"src": "1568:11:14",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 1649,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "1568:5:14",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BytesSlot",
									"nameLocation": "1548:9:14",
									"nodeType": "StructDefinition",
									"scope": 1740,
									"src": "1541:45:14",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1661,
										"nodeType": "Block",
										"src": "1768:106:14",
										"statements": [
											{
												"AST": {
													"nativeSrc": "1830:38:14",
													"nodeType": "YulBlock",
													"src": "1830:38:14",
													"statements": [
														{
															"nativeSrc": "1844:14:14",
															"nodeType": "YulAssignment",
															"src": "1844:14:14",
															"value": {
																"name": "slot",
																"nativeSrc": "1854:4:14",
																"nodeType": "YulIdentifier",
																"src": "1854:4:14"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "1844:6:14",
																	"nodeType": "YulIdentifier",
																	"src": "1844:6:14"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1658,
														"isOffset": false,
														"isSlot": true,
														"src": "1844:6:14",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1654,
														"isOffset": false,
														"isSlot": false,
														"src": "1854:4:14",
														"valueSize": 1
													}
												],
												"id": 1660,
												"nodeType": "InlineAssembly",
												"src": "1821:47:14"
											}
										]
									},
									"documentation": {
										"id": 1652,
										"nodeType": "StructuredDocumentation",
										"src": "1592:87:14",
										"text": " @dev Returns an `AddressSlot` with member `value` located at `slot`."
									},
									"id": 1662,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAddressSlot",
									"nameLocation": "1693:14:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1655,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1654,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "1716:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 1662,
												"src": "1708:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1653,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1708:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1707:14:14"
									},
									"returnParameters": {
										"id": 1659,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1658,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1765:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 1662,
												"src": "1745:21:14",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSlot_$1636_storage_ptr",
													"typeString": "struct StorageSlot.AddressSlot"
												},
												"typeName": {
													"id": 1657,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1656,
														"name": "AddressSlot",
														"nameLocations": [
															"1745:11:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1636,
														"src": "1745:11:14"
													},
													"referencedDeclaration": 1636,
													"src": "1745:11:14",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSlot_$1636_storage_ptr",
														"typeString": "struct StorageSlot.AddressSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1744:23:14"
									},
									"scope": 1740,
									"src": "1684:190:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1672,
										"nodeType": "Block",
										"src": "2056:106:14",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2118:38:14",
													"nodeType": "YulBlock",
													"src": "2118:38:14",
													"statements": [
														{
															"nativeSrc": "2132:14:14",
															"nodeType": "YulAssignment",
															"src": "2132:14:14",
															"value": {
																"name": "slot",
																"nativeSrc": "2142:4:14",
																"nodeType": "YulIdentifier",
																"src": "2142:4:14"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "2132:6:14",
																	"nodeType": "YulIdentifier",
																	"src": "2132:6:14"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1669,
														"isOffset": false,
														"isSlot": true,
														"src": "2132:6:14",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1665,
														"isOffset": false,
														"isSlot": false,
														"src": "2142:4:14",
														"valueSize": 1
													}
												],
												"id": 1671,
												"nodeType": "InlineAssembly",
												"src": "2109:47:14"
											}
										]
									},
									"documentation": {
										"id": 1663,
										"nodeType": "StructuredDocumentation",
										"src": "1880:87:14",
										"text": " @dev Returns an `BooleanSlot` with member `value` located at `slot`."
									},
									"id": 1673,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBooleanSlot",
									"nameLocation": "1981:14:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1666,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1665,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2004:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 1673,
												"src": "1996:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1664,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1996:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1995:14:14"
									},
									"returnParameters": {
										"id": 1670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1669,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2053:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 1673,
												"src": "2033:21:14",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BooleanSlot_$1639_storage_ptr",
													"typeString": "struct StorageSlot.BooleanSlot"
												},
												"typeName": {
													"id": 1668,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1667,
														"name": "BooleanSlot",
														"nameLocations": [
															"2033:11:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1639,
														"src": "2033:11:14"
													},
													"referencedDeclaration": 1639,
													"src": "2033:11:14",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BooleanSlot_$1639_storage_ptr",
														"typeString": "struct StorageSlot.BooleanSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2032:23:14"
									},
									"scope": 1740,
									"src": "1972:190:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1683,
										"nodeType": "Block",
										"src": "2344:106:14",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2406:38:14",
													"nodeType": "YulBlock",
													"src": "2406:38:14",
													"statements": [
														{
															"nativeSrc": "2420:14:14",
															"nodeType": "YulAssignment",
															"src": "2420:14:14",
															"value": {
																"name": "slot",
																"nativeSrc": "2430:4:14",
																"nodeType": "YulIdentifier",
																"src": "2430:4:14"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "2420:6:14",
																	"nodeType": "YulIdentifier",
																	"src": "2420:6:14"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1680,
														"isOffset": false,
														"isSlot": true,
														"src": "2420:6:14",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1676,
														"isOffset": false,
														"isSlot": false,
														"src": "2430:4:14",
														"valueSize": 1
													}
												],
												"id": 1682,
												"nodeType": "InlineAssembly",
												"src": "2397:47:14"
											}
										]
									},
									"documentation": {
										"id": 1674,
										"nodeType": "StructuredDocumentation",
										"src": "2168:87:14",
										"text": " @dev Returns an `Bytes32Slot` with member `value` located at `slot`."
									},
									"id": 1684,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytes32Slot",
									"nameLocation": "2269:14:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1677,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1676,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2292:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 1684,
												"src": "2284:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1675,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2284:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2283:14:14"
									},
									"returnParameters": {
										"id": 1681,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1680,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2341:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 1684,
												"src": "2321:21:14",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Slot_$1642_storage_ptr",
													"typeString": "struct StorageSlot.Bytes32Slot"
												},
												"typeName": {
													"id": 1679,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1678,
														"name": "Bytes32Slot",
														"nameLocations": [
															"2321:11:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1642,
														"src": "2321:11:14"
													},
													"referencedDeclaration": 1642,
													"src": "2321:11:14",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Slot_$1642_storage_ptr",
														"typeString": "struct StorageSlot.Bytes32Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2320:23:14"
									},
									"scope": 1740,
									"src": "2260:190:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1694,
										"nodeType": "Block",
										"src": "2632:106:14",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2694:38:14",
													"nodeType": "YulBlock",
													"src": "2694:38:14",
													"statements": [
														{
															"nativeSrc": "2708:14:14",
															"nodeType": "YulAssignment",
															"src": "2708:14:14",
															"value": {
																"name": "slot",
																"nativeSrc": "2718:4:14",
																"nodeType": "YulIdentifier",
																"src": "2718:4:14"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "2708:6:14",
																	"nodeType": "YulIdentifier",
																	"src": "2708:6:14"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1691,
														"isOffset": false,
														"isSlot": true,
														"src": "2708:6:14",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1687,
														"isOffset": false,
														"isSlot": false,
														"src": "2718:4:14",
														"valueSize": 1
													}
												],
												"id": 1693,
												"nodeType": "InlineAssembly",
												"src": "2685:47:14"
											}
										]
									},
									"documentation": {
										"id": 1685,
										"nodeType": "StructuredDocumentation",
										"src": "2456:87:14",
										"text": " @dev Returns an `Uint256Slot` with member `value` located at `slot`."
									},
									"id": 1695,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getUint256Slot",
									"nameLocation": "2557:14:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1688,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1687,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2580:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 1695,
												"src": "2572:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1686,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2572:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2571:14:14"
									},
									"returnParameters": {
										"id": 1692,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1691,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2629:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 1695,
												"src": "2609:21:14",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Uint256Slot_$1645_storage_ptr",
													"typeString": "struct StorageSlot.Uint256Slot"
												},
												"typeName": {
													"id": 1690,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1689,
														"name": "Uint256Slot",
														"nameLocations": [
															"2609:11:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1645,
														"src": "2609:11:14"
													},
													"referencedDeclaration": 1645,
													"src": "2609:11:14",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Uint256Slot_$1645_storage_ptr",
														"typeString": "struct StorageSlot.Uint256Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2608:23:14"
									},
									"scope": 1740,
									"src": "2548:190:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1705,
										"nodeType": "Block",
										"src": "2917:106:14",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2979:38:14",
													"nodeType": "YulBlock",
													"src": "2979:38:14",
													"statements": [
														{
															"nativeSrc": "2993:14:14",
															"nodeType": "YulAssignment",
															"src": "2993:14:14",
															"value": {
																"name": "slot",
																"nativeSrc": "3003:4:14",
																"nodeType": "YulIdentifier",
																"src": "3003:4:14"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "2993:6:14",
																	"nodeType": "YulIdentifier",
																	"src": "2993:6:14"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1702,
														"isOffset": false,
														"isSlot": true,
														"src": "2993:6:14",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1698,
														"isOffset": false,
														"isSlot": false,
														"src": "3003:4:14",
														"valueSize": 1
													}
												],
												"id": 1704,
												"nodeType": "InlineAssembly",
												"src": "2970:47:14"
											}
										]
									},
									"documentation": {
										"id": 1696,
										"nodeType": "StructuredDocumentation",
										"src": "2744:86:14",
										"text": " @dev Returns an `StringSlot` with member `value` located at `slot`."
									},
									"id": 1706,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStringSlot",
									"nameLocation": "2844:13:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1699,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1698,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2866:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 1706,
												"src": "2858:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1697,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2858:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2857:14:14"
									},
									"returnParameters": {
										"id": 1703,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1702,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2914:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 1706,
												"src": "2895:20:14",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StringSlot_$1648_storage_ptr",
													"typeString": "struct StorageSlot.StringSlot"
												},
												"typeName": {
													"id": 1701,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1700,
														"name": "StringSlot",
														"nameLocations": [
															"2895:10:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1648,
														"src": "2895:10:14"
													},
													"referencedDeclaration": 1648,
													"src": "2895:10:14",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StringSlot_$1648_storage_ptr",
														"typeString": "struct StorageSlot.StringSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2894:22:14"
									},
									"scope": 1740,
									"src": "2835:188:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1716,
										"nodeType": "Block",
										"src": "3225:112:14",
										"statements": [
											{
												"AST": {
													"nativeSrc": "3287:44:14",
													"nodeType": "YulBlock",
													"src": "3287:44:14",
													"statements": [
														{
															"nativeSrc": "3301:20:14",
															"nodeType": "YulAssignment",
															"src": "3301:20:14",
															"value": {
																"name": "store.slot",
																"nativeSrc": "3311:10:14",
																"nodeType": "YulIdentifier",
																"src": "3311:10:14"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "3301:6:14",
																	"nodeType": "YulIdentifier",
																	"src": "3301:6:14"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1713,
														"isOffset": false,
														"isSlot": true,
														"src": "3301:6:14",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1709,
														"isOffset": false,
														"isSlot": true,
														"src": "3311:10:14",
														"suffix": "slot",
														"valueSize": 1
													}
												],
												"id": 1715,
												"nodeType": "InlineAssembly",
												"src": "3278:53:14"
											}
										]
									},
									"documentation": {
										"id": 1707,
										"nodeType": "StructuredDocumentation",
										"src": "3029:101:14",
										"text": " @dev Returns an `StringSlot` representation of the string storage pointer `store`."
									},
									"id": 1717,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStringSlot",
									"nameLocation": "3144:13:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1710,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1709,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3173:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 1717,
												"src": "3158:20:14",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1708,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3158:6:14",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3157:22:14"
									},
									"returnParameters": {
										"id": 1714,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1713,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3222:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 1717,
												"src": "3203:20:14",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StringSlot_$1648_storage_ptr",
													"typeString": "struct StorageSlot.StringSlot"
												},
												"typeName": {
													"id": 1712,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1711,
														"name": "StringSlot",
														"nameLocations": [
															"3203:10:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1648,
														"src": "3203:10:14"
													},
													"referencedDeclaration": 1648,
													"src": "3203:10:14",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StringSlot_$1648_storage_ptr",
														"typeString": "struct StorageSlot.StringSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3202:22:14"
									},
									"scope": 1740,
									"src": "3135:202:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1727,
										"nodeType": "Block",
										"src": "3513:106:14",
										"statements": [
											{
												"AST": {
													"nativeSrc": "3575:38:14",
													"nodeType": "YulBlock",
													"src": "3575:38:14",
													"statements": [
														{
															"nativeSrc": "3589:14:14",
															"nodeType": "YulAssignment",
															"src": "3589:14:14",
															"value": {
																"name": "slot",
																"nativeSrc": "3599:4:14",
																"nodeType": "YulIdentifier",
																"src": "3599:4:14"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "3589:6:14",
																	"nodeType": "YulIdentifier",
																	"src": "3589:6:14"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1724,
														"isOffset": false,
														"isSlot": true,
														"src": "3589:6:14",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1720,
														"isOffset": false,
														"isSlot": false,
														"src": "3599:4:14",
														"valueSize": 1
													}
												],
												"id": 1726,
												"nodeType": "InlineAssembly",
												"src": "3566:47:14"
											}
										]
									},
									"documentation": {
										"id": 1718,
										"nodeType": "StructuredDocumentation",
										"src": "3343:85:14",
										"text": " @dev Returns an `BytesSlot` with member `value` located at `slot`."
									},
									"id": 1728,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytesSlot",
									"nameLocation": "3442:12:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1721,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1720,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "3463:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 1728,
												"src": "3455:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1719,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3455:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3454:14:14"
									},
									"returnParameters": {
										"id": 1725,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1724,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3510:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 1728,
												"src": "3492:19:14",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BytesSlot_$1651_storage_ptr",
													"typeString": "struct StorageSlot.BytesSlot"
												},
												"typeName": {
													"id": 1723,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1722,
														"name": "BytesSlot",
														"nameLocations": [
															"3492:9:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1651,
														"src": "3492:9:14"
													},
													"referencedDeclaration": 1651,
													"src": "3492:9:14",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BytesSlot_$1651_storage_ptr",
														"typeString": "struct StorageSlot.BytesSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3491:21:14"
									},
									"scope": 1740,
									"src": "3433:186:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1738,
										"nodeType": "Block",
										"src": "3816:112:14",
										"statements": [
											{
												"AST": {
													"nativeSrc": "3878:44:14",
													"nodeType": "YulBlock",
													"src": "3878:44:14",
													"statements": [
														{
															"nativeSrc": "3892:20:14",
															"nodeType": "YulAssignment",
															"src": "3892:20:14",
															"value": {
																"name": "store.slot",
																"nativeSrc": "3902:10:14",
																"nodeType": "YulIdentifier",
																"src": "3902:10:14"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "3892:6:14",
																	"nodeType": "YulIdentifier",
																	"src": "3892:6:14"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1735,
														"isOffset": false,
														"isSlot": true,
														"src": "3892:6:14",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1731,
														"isOffset": false,
														"isSlot": true,
														"src": "3902:10:14",
														"suffix": "slot",
														"valueSize": 1
													}
												],
												"id": 1737,
												"nodeType": "InlineAssembly",
												"src": "3869:53:14"
											}
										]
									},
									"documentation": {
										"id": 1729,
										"nodeType": "StructuredDocumentation",
										"src": "3625:99:14",
										"text": " @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."
									},
									"id": 1739,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytesSlot",
									"nameLocation": "3738:12:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1732,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1731,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3765:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 1739,
												"src": "3751:19:14",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1730,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3751:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3750:21:14"
									},
									"returnParameters": {
										"id": 1736,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1735,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3813:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 1739,
												"src": "3795:19:14",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BytesSlot_$1651_storage_ptr",
													"typeString": "struct StorageSlot.BytesSlot"
												},
												"typeName": {
													"id": 1734,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1733,
														"name": "BytesSlot",
														"nameLocations": [
															"3795:9:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1651,
														"src": "3795:9:14"
													},
													"referencedDeclaration": 1651,
													"src": "3795:9:14",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BytesSlot_$1651_storage_ptr",
														"typeString": "struct StorageSlot.BytesSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3794:21:14"
									},
									"scope": 1740,
									"src": "3729:199:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1741,
							"src": "1245:2685:14",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "193:3738:14"
				},
				"id": 14
			},
			"@openzeppelin/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Math": [
							3698
						],
						"SignedMath": [
							3803
						],
						"Strings": [
							1995
						]
					},
					"id": 1996,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1742,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:15"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
							"file": "./math/Math.sol",
							"id": 1744,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1996,
							"sourceUnit": 3699,
							"src": "127:37:15",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1743,
										"name": "Math",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3698,
										"src": "135:4:15",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/math/SignedMath.sol",
							"file": "./math/SignedMath.sol",
							"id": 1746,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1996,
							"sourceUnit": 3804,
							"src": "165:49:15",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1745,
										"name": "SignedMath",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3803,
										"src": "173:10:15",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1747,
								"nodeType": "StructuredDocumentation",
								"src": "216:34:15",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 1995,
							"linearizedBaseContracts": [
								1995
							],
							"name": "Strings",
							"nameLocation": "259:7:15",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1750,
									"mutability": "constant",
									"name": "HEX_DIGITS",
									"nameLocation": "298:10:15",
									"nodeType": "VariableDeclaration",
									"scope": 1995,
									"src": "273:56:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 1748,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "273:7:15",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 1749,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "311:18:15",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1753,
									"mutability": "constant",
									"name": "ADDRESS_LENGTH",
									"nameLocation": "358:14:15",
									"nodeType": "VariableDeclaration",
									"scope": 1995,
									"src": "335:42:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1751,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "335:5:15",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 1752,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "375:2:15",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 1754,
										"nodeType": "StructuredDocumentation",
										"src": "384:81:15",
										"text": " @dev The `value` string doesn't fit in the specified `length`."
									},
									"errorSelector": "e22e27eb",
									"id": 1760,
									"name": "StringsInsufficientHexLength",
									"nameLocation": "476:28:15",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1759,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1756,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "513:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 1760,
												"src": "505:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1755,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "505:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1758,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "528:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 1760,
												"src": "520:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1757,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "520:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "504:31:15"
									},
									"src": "470:66:15"
								},
								{
									"body": {
										"id": 1807,
										"nodeType": "Block",
										"src": "708:627:15",
										"statements": [
											{
												"id": 1806,
												"nodeType": "UncheckedBlock",
												"src": "718:611:15",
												"statements": [
													{
														"assignments": [
															1769
														],
														"declarations": [
															{
																"constant": false,
																"id": 1769,
																"mutability": "mutable",
																"name": "length",
																"nameLocation": "750:6:15",
																"nodeType": "VariableDeclaration",
																"scope": 1806,
																"src": "742:14:15",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1768,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "742:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1776,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1775,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 1772,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1763,
																		"src": "770:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1770,
																		"name": "Math",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3698,
																		"src": "759:4:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Math_$3698_$",
																			"typeString": "type(library Math)"
																		}
																	},
																	"id": 1771,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "764:5:15",
																	"memberName": "log10",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3518,
																	"src": "759:10:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint256)"
																	}
																},
																"id": 1773,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "759:17:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 1774,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "779:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "759:21:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "742:38:15"
													},
													{
														"assignments": [
															1778
														],
														"declarations": [
															{
																"constant": false,
																"id": 1778,
																"mutability": "mutable",
																"name": "buffer",
																"nameLocation": "808:6:15",
																"nodeType": "VariableDeclaration",
																"scope": 1806,
																"src": "794:20:15",
																"stateVariable": false,
																"storageLocation": "memory",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string"
																},
																"typeName": {
																	"id": 1777,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "794:6:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1783,
														"initialValue": {
															"arguments": [
																{
																	"id": 1781,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1769,
																	"src": "828:6:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1780,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "817:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																},
																"typeName": {
																	"id": 1779,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "821:6:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																}
															},
															"id": 1782,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "817:18:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "794:41:15"
													},
													{
														"assignments": [
															1785
														],
														"declarations": [
															{
																"constant": false,
																"id": 1785,
																"mutability": "mutable",
																"name": "ptr",
																"nameLocation": "857:3:15",
																"nodeType": "VariableDeclaration",
																"scope": 1806,
																"src": "849:11:15",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1784,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "849:7:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1786,
														"nodeType": "VariableDeclarationStatement",
														"src": "849:11:15"
													},
													{
														"AST": {
															"nativeSrc": "930:67:15",
															"nodeType": "YulBlock",
															"src": "930:67:15",
															"statements": [
																{
																	"nativeSrc": "948:35:15",
																	"nodeType": "YulAssignment",
																	"src": "948:35:15",
																	"value": {
																		"arguments": [
																			{
																				"name": "buffer",
																				"nativeSrc": "959:6:15",
																				"nodeType": "YulIdentifier",
																				"src": "959:6:15"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "971:2:15",
																						"nodeType": "YulLiteral",
																						"src": "971:2:15",
																						"type": "",
																						"value": "32"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "975:6:15",
																						"nodeType": "YulIdentifier",
																						"src": "975:6:15"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "967:3:15",
																					"nodeType": "YulIdentifier",
																					"src": "967:3:15"
																				},
																				"nativeSrc": "967:15:15",
																				"nodeType": "YulFunctionCall",
																				"src": "967:15:15"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "955:3:15",
																			"nodeType": "YulIdentifier",
																			"src": "955:3:15"
																		},
																		"nativeSrc": "955:28:15",
																		"nodeType": "YulFunctionCall",
																		"src": "955:28:15"
																	},
																	"variableNames": [
																		{
																			"name": "ptr",
																			"nativeSrc": "948:3:15",
																			"nodeType": "YulIdentifier",
																			"src": "948:3:15"
																		}
																	]
																}
															]
														},
														"documentation": "@solidity memory-safe-assembly",
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 1778,
																"isOffset": false,
																"isSlot": false,
																"src": "959:6:15",
																"valueSize": 1
															},
															{
																"declaration": 1769,
																"isOffset": false,
																"isSlot": false,
																"src": "975:6:15",
																"valueSize": 1
															},
															{
																"declaration": 1785,
																"isOffset": false,
																"isSlot": false,
																"src": "948:3:15",
																"valueSize": 1
															}
														],
														"id": 1787,
														"nodeType": "InlineAssembly",
														"src": "921:76:15"
													},
													{
														"body": {
															"id": 1802,
															"nodeType": "Block",
															"src": "1023:269:15",
															"statements": [
																{
																	"expression": {
																		"id": 1790,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "--",
																		"prefix": false,
																		"src": "1041:5:15",
																		"subExpression": {
																			"id": 1789,
																			"name": "ptr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1785,
																			"src": "1041:3:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1791,
																	"nodeType": "ExpressionStatement",
																	"src": "1041:5:15"
																},
																{
																	"AST": {
																		"nativeSrc": "1124:86:15",
																		"nodeType": "YulBlock",
																		"src": "1124:86:15",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "ptr",
																							"nativeSrc": "1154:3:15",
																							"nodeType": "YulIdentifier",
																							"src": "1154:3:15"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value",
																											"nativeSrc": "1168:5:15",
																											"nodeType": "YulIdentifier",
																											"src": "1168:5:15"
																										},
																										{
																											"kind": "number",
																											"nativeSrc": "1175:2:15",
																											"nodeType": "YulLiteral",
																											"src": "1175:2:15",
																											"type": "",
																											"value": "10"
																										}
																									],
																									"functionName": {
																										"name": "mod",
																										"nativeSrc": "1164:3:15",
																										"nodeType": "YulIdentifier",
																										"src": "1164:3:15"
																									},
																									"nativeSrc": "1164:14:15",
																									"nodeType": "YulFunctionCall",
																									"src": "1164:14:15"
																								},
																								{
																									"name": "HEX_DIGITS",
																									"nativeSrc": "1180:10:15",
																									"nodeType": "YulIdentifier",
																									"src": "1180:10:15"
																								}
																							],
																							"functionName": {
																								"name": "byte",
																								"nativeSrc": "1159:4:15",
																								"nodeType": "YulIdentifier",
																								"src": "1159:4:15"
																							},
																							"nativeSrc": "1159:32:15",
																							"nodeType": "YulFunctionCall",
																							"src": "1159:32:15"
																						}
																					],
																					"functionName": {
																						"name": "mstore8",
																						"nativeSrc": "1146:7:15",
																						"nodeType": "YulIdentifier",
																						"src": "1146:7:15"
																					},
																					"nativeSrc": "1146:46:15",
																					"nodeType": "YulFunctionCall",
																					"src": "1146:46:15"
																				},
																				"nativeSrc": "1146:46:15",
																				"nodeType": "YulExpressionStatement",
																				"src": "1146:46:15"
																			}
																		]
																	},
																	"documentation": "@solidity memory-safe-assembly",
																	"evmVersion": "cancun",
																	"externalReferences": [
																		{
																			"declaration": 1750,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1180:10:15",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1785,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1154:3:15",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1763,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1168:5:15",
																			"valueSize": 1
																		}
																	],
																	"id": 1792,
																	"nodeType": "InlineAssembly",
																	"src": "1115:95:15"
																},
																{
																	"expression": {
																		"id": 1795,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1793,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1763,
																			"src": "1227:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"hexValue": "3130",
																			"id": 1794,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1236:2:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10_by_1",
																				"typeString": "int_const 10"
																			},
																			"value": "10"
																		},
																		"src": "1227:11:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1796,
																	"nodeType": "ExpressionStatement",
																	"src": "1227:11:15"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1799,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1797,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1763,
																			"src": "1260:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1798,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1269:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1260:10:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1801,
																	"nodeType": "IfStatement",
																	"src": "1256:21:15",
																	"trueBody": {
																		"id": 1800,
																		"nodeType": "Break",
																		"src": "1272:5:15"
																	}
																}
															]
														},
														"condition": {
															"hexValue": "74727565",
															"id": 1788,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1017:4:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														"id": 1803,
														"nodeType": "WhileStatement",
														"src": "1010:282:15"
													},
													{
														"expression": {
															"id": 1804,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1778,
															"src": "1312:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1767,
														"id": 1805,
														"nodeType": "Return",
														"src": "1305:13:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1761,
										"nodeType": "StructuredDocumentation",
										"src": "542:90:15",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 1808,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "646:8:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1764,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1763,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "663:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 1808,
												"src": "655:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1762,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "655:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "654:15:15"
									},
									"returnParameters": {
										"id": 1767,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1766,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1808,
												"src": "693:13:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1765,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "693:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:15:15"
									},
									"scope": 1995,
									"src": "637:698:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1833,
										"nodeType": "Block",
										"src": "1511:92:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1821,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1819,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1811,
																	"src": "1542:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1820,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1550:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1542:9:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"hexValue": "",
																"id": 1823,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1560:2:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																},
																"value": ""
															},
															"id": 1824,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "1542:20:15",
															"trueExpression": {
																"hexValue": "2d",
																"id": 1822,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1554:3:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561",
																	"typeString": "literal_string \"-\""
																},
																"value": "-"
															},
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1828,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1811,
																			"src": "1588:5:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		],
																		"expression": {
																			"id": 1826,
																			"name": "SignedMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3803,
																			"src": "1573:10:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_SignedMath_$3803_$",
																				"typeString": "type(library SignedMath)"
																			}
																		},
																		"id": 1827,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1584:3:15",
																		"memberName": "abs",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3802,
																		"src": "1573:14:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_uint256_$",
																			"typeString": "function (int256) pure returns (uint256)"
																		}
																	},
																	"id": 1829,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1573:21:15",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1825,
																"name": "toString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1808,
																"src": "1564:8:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																}
															},
															"id": 1830,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1564:31:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"expression": {
															"id": 1817,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1528:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																"typeString": "type(string storage pointer)"
															},
															"typeName": {
																"id": 1816,
																"name": "string",
																"nodeType": "ElementaryTypeName",
																"src": "1528:6:15",
																"typeDescriptions": {}
															}
														},
														"id": 1818,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1535:6:15",
														"memberName": "concat",
														"nodeType": "MemberAccess",
														"src": "1528:13:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$",
															"typeString": "function () pure returns (string memory)"
														}
													},
													"id": 1831,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1528:68:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1815,
												"id": 1832,
												"nodeType": "Return",
												"src": "1521:75:15"
											}
										]
									},
									"documentation": {
										"id": 1809,
										"nodeType": "StructuredDocumentation",
										"src": "1341:89:15",
										"text": " @dev Converts a `int256` to its ASCII `string` decimal representation."
									},
									"id": 1834,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toStringSigned",
									"nameLocation": "1444:14:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1812,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1811,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1466:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 1834,
												"src": "1459:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1810,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1459:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1458:14:15"
									},
									"returnParameters": {
										"id": 1815,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1814,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1834,
												"src": "1496:13:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1813,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1496:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1495:15:15"
									},
									"scope": 1995,
									"src": "1435:168:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1853,
										"nodeType": "Block",
										"src": "1782:100:15",
										"statements": [
											{
												"id": 1852,
												"nodeType": "UncheckedBlock",
												"src": "1792:84:15",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 1843,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1837,
																	"src": "1835:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1849,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 1846,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1837,
																				"src": "1854:5:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 1844,
																				"name": "Math",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3698,
																				"src": "1842:4:15",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_Math_$3698_$",
																					"typeString": "type(library Math)"
																				}
																			},
																			"id": 1845,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "1847:6:15",
																			"memberName": "log256",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 3640,
																			"src": "1842:11:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1847,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1842:18:15",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 1848,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1863:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "1842:22:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1842,
																"name": "toHexString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1854,
																	1937,
																	1957
																],
																"referencedDeclaration": 1937,
																"src": "1823:11:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256,uint256) pure returns (string memory)"
																}
															},
															"id": 1850,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1823:42:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1841,
														"id": 1851,
														"nodeType": "Return",
														"src": "1816:49:15"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1835,
										"nodeType": "StructuredDocumentation",
										"src": "1609:94:15",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 1854,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1717:11:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1838,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1837,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1737:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 1854,
												"src": "1729:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1836,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1729:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1728:15:15"
									},
									"returnParameters": {
										"id": 1841,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1840,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1854,
												"src": "1767:13:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1839,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1767:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1766:15:15"
									},
									"scope": 1995,
									"src": "1708:174:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1936,
										"nodeType": "Block",
										"src": "2095:435:15",
										"statements": [
											{
												"assignments": [
													1865
												],
												"declarations": [
													{
														"constant": false,
														"id": 1865,
														"mutability": "mutable",
														"name": "localValue",
														"nameLocation": "2113:10:15",
														"nodeType": "VariableDeclaration",
														"scope": 1936,
														"src": "2105:18:15",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1864,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2105:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1867,
												"initialValue": {
													"id": 1866,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1857,
													"src": "2126:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2105:26:15"
											},
											{
												"assignments": [
													1869
												],
												"declarations": [
													{
														"constant": false,
														"id": 1869,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "2154:6:15",
														"nodeType": "VariableDeclaration",
														"scope": 1936,
														"src": "2141:19:15",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1868,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2141:5:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1878,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1876,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1874,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1872,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2173:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1873,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1859,
																	"src": "2177:6:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2173:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 1875,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2186:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "2173:14:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1871,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "2163:9:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 1870,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2167:5:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 1877,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2163:25:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2141:47:15"
											},
											{
												"expression": {
													"id": 1883,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1879,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1869,
															"src": "2198:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1881,
														"indexExpression": {
															"hexValue": "30",
															"id": 1880,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2205:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2198:9:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1882,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2210:3:15",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "2198:15:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1884,
												"nodeType": "ExpressionStatement",
												"src": "2198:15:15"
											},
											{
												"expression": {
													"id": 1889,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1885,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1869,
															"src": "2223:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1887,
														"indexExpression": {
															"hexValue": "31",
															"id": 1886,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2230:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2223:9:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 1888,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2235:3:15",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "2223:15:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1890,
												"nodeType": "ExpressionStatement",
												"src": "2223:15:15"
											},
											{
												"body": {
													"id": 1919,
													"nodeType": "Block",
													"src": "2293:95:15",
													"statements": [
														{
															"expression": {
																"id": 1913,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1905,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1869,
																		"src": "2307:6:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1907,
																	"indexExpression": {
																		"id": 1906,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1892,
																		"src": "2314:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "2307:9:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 1908,
																		"name": "HEX_DIGITS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1750,
																		"src": "2319:10:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 1912,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1911,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1909,
																			"name": "localValue",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1865,
																			"src": "2330:10:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 1910,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2343:3:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "2330:16:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2319:28:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "2307:40:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 1914,
															"nodeType": "ExpressionStatement",
															"src": "2307:40:15"
														},
														{
															"expression": {
																"id": 1917,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1915,
																	"name": "localValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1865,
																	"src": "2361:10:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 1916,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2376:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "2361:16:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1918,
															"nodeType": "ExpressionStatement",
															"src": "2361:16:15"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1901,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1899,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1892,
														"src": "2281:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 1900,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2285:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "2281:5:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1920,
												"initializationExpression": {
													"assignments": [
														1892
													],
													"declarations": [
														{
															"constant": false,
															"id": 1892,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2261:1:15",
															"nodeType": "VariableDeclaration",
															"scope": 1920,
															"src": "2253:9:15",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1891,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2253:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1898,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1897,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1895,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 1893,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2265:1:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1894,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1859,
																"src": "2269:6:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2265:10:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1896,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2278:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "2265:14:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2253:26:15"
												},
												"isSimpleCounterLoop": false,
												"loopExpression": {
													"expression": {
														"id": 1903,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "2288:3:15",
														"subExpression": {
															"id": 1902,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1892,
															"src": "2290:1:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1904,
													"nodeType": "ExpressionStatement",
													"src": "2288:3:15"
												},
												"nodeType": "ForStatement",
												"src": "2248:140:15"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1923,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1921,
														"name": "localValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1865,
														"src": "2401:10:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1922,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2415:1:15",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2401:15:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1930,
												"nodeType": "IfStatement",
												"src": "2397:96:15",
												"trueBody": {
													"id": 1929,
													"nodeType": "Block",
													"src": "2418:75:15",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1925,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1857,
																		"src": "2468:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1926,
																		"name": "length",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1859,
																		"src": "2475:6:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1924,
																	"name": "StringsInsufficientHexLength",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1760,
																	"src": "2439:28:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (uint256,uint256) pure returns (error)"
																	}
																},
																"id": 1927,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2439:43:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1928,
															"nodeType": "RevertStatement",
															"src": "2432:50:15"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1933,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1869,
															"src": "2516:6:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1932,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2509:6:15",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 1931,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2509:6:15",
															"typeDescriptions": {}
														}
													},
													"id": 1934,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2509:14:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1863,
												"id": 1935,
												"nodeType": "Return",
												"src": "2502:21:15"
											}
										]
									},
									"documentation": {
										"id": 1855,
										"nodeType": "StructuredDocumentation",
										"src": "1888:112:15",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 1937,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2014:11:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1860,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1857,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2034:5:15",
												"nodeType": "VariableDeclaration",
												"scope": 1937,
												"src": "2026:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1856,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2026:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1859,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "2049:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 1937,
												"src": "2041:14:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1858,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2041:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2025:31:15"
									},
									"returnParameters": {
										"id": 1863,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1862,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1937,
												"src": "2080:13:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1861,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2080:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2079:15:15"
									},
									"scope": 1995,
									"src": "2005:525:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1956,
										"nodeType": "Block",
										"src": "2762:75:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1950,
																			"name": "addr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1940,
																			"src": "2807:4:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1949,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2799:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint160_$",
																			"typeString": "type(uint160)"
																		},
																		"typeName": {
																			"id": 1948,
																			"name": "uint160",
																			"nodeType": "ElementaryTypeName",
																			"src": "2799:7:15",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1951,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2799:13:15",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"id": 1947,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2791:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 1946,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2791:7:15",
																	"typeDescriptions": {}
																}
															},
															"id": 1952,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2791:22:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1953,
															"name": "ADDRESS_LENGTH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1753,
															"src": "2815:14:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 1945,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1854,
															1937,
															1957
														],
														"referencedDeclaration": 1937,
														"src": "2779:11:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 1954,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2779:51:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1944,
												"id": 1955,
												"nodeType": "Return",
												"src": "2772:58:15"
											}
										]
									},
									"documentation": {
										"id": 1938,
										"nodeType": "StructuredDocumentation",
										"src": "2536:148:15",
										"text": " @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."
									},
									"id": 1957,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2698:11:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1941,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1940,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "2718:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 1957,
												"src": "2710:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1939,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2710:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2709:14:15"
									},
									"returnParameters": {
										"id": 1944,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1943,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1957,
												"src": "2747:13:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1942,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2747:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2746:15:15"
									},
									"scope": 1995,
									"src": "2689:148:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1993,
										"nodeType": "Block",
										"src": "2992:104:15",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1991,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1977,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1969,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1960,
																		"src": "3015:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1968,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3009:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1967,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3009:5:15",
																		"typeDescriptions": {}
																	}
																},
																"id": 1970,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3009:8:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1971,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3018:6:15",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "3009:15:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1974,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1962,
																		"src": "3034:1:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1973,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3028:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1972,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3028:5:15",
																		"typeDescriptions": {}
																	}
																},
																"id": 1975,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3028:8:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1976,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3037:6:15",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "3028:15:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3009:34:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"id": 1990,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1981,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1960,
																			"src": "3063:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 1980,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3057:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 1979,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "3057:5:15",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1982,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3057:8:15",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 1978,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "3047:9:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 1983,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3047:19:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1987,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1962,
																			"src": "3086:1:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 1986,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3080:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 1985,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "3080:5:15",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1988,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3080:8:15",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 1984,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "3070:9:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 1989,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3070:19:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"src": "3047:42:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3009:80:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1966,
												"id": 1992,
												"nodeType": "Return",
												"src": "3002:87:15"
											}
										]
									},
									"documentation": {
										"id": 1958,
										"nodeType": "StructuredDocumentation",
										"src": "2843:66:15",
										"text": " @dev Returns true if the two strings are equal."
									},
									"id": 1994,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "equal",
									"nameLocation": "2923:5:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1963,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1960,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2943:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1994,
												"src": "2929:15:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1959,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2929:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1962,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2960:1:15",
												"nodeType": "VariableDeclaration",
												"scope": 1994,
												"src": "2946:15:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1961,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2946:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2928:34:15"
									},
									"returnParameters": {
										"id": 1966,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1965,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1994,
												"src": "2986:4:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1964,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2986:4:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2985:6:15"
									},
									"scope": 1995,
									"src": "2914:182:15",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1996,
							"src": "251:2847:15",
							"usedErrors": [
								1760
							],
							"usedEvents": []
						}
					],
					"src": "101:2998:15"
				},
				"id": 15
			},
			"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/ECDSA.sol",
					"exportedSymbols": {
						"ECDSA": [
							2343
						]
					},
					"id": 2344,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1997,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:16"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ECDSA",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1998,
								"nodeType": "StructuredDocumentation",
								"src": "138:205:16",
								"text": " @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."
							},
							"fullyImplemented": true,
							"id": 2343,
							"linearizedBaseContracts": [
								2343
							],
							"name": "ECDSA",
							"nameLocation": "352:5:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ECDSA.RecoverError",
									"id": 2003,
									"members": [
										{
											"id": 1999,
											"name": "NoError",
											"nameLocation": "392:7:16",
											"nodeType": "EnumValue",
											"src": "392:7:16"
										},
										{
											"id": 2000,
											"name": "InvalidSignature",
											"nameLocation": "409:16:16",
											"nodeType": "EnumValue",
											"src": "409:16:16"
										},
										{
											"id": 2001,
											"name": "InvalidSignatureLength",
											"nameLocation": "435:22:16",
											"nodeType": "EnumValue",
											"src": "435:22:16"
										},
										{
											"id": 2002,
											"name": "InvalidSignatureS",
											"nameLocation": "467:17:16",
											"nodeType": "EnumValue",
											"src": "467:17:16"
										}
									],
									"name": "RecoverError",
									"nameLocation": "369:12:16",
									"nodeType": "EnumDefinition",
									"src": "364:126:16"
								},
								{
									"documentation": {
										"id": 2004,
										"nodeType": "StructuredDocumentation",
										"src": "496:63:16",
										"text": " @dev The signature derives the `address(0)`."
									},
									"errorSelector": "f645eedf",
									"id": 2006,
									"name": "ECDSAInvalidSignature",
									"nameLocation": "570:21:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2005,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "591:2:16"
									},
									"src": "564:30:16"
								},
								{
									"documentation": {
										"id": 2007,
										"nodeType": "StructuredDocumentation",
										"src": "600:60:16",
										"text": " @dev The signature has an invalid length."
									},
									"errorSelector": "fce698f7",
									"id": 2011,
									"name": "ECDSAInvalidSignatureLength",
									"nameLocation": "671:27:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2010,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2009,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "707:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2011,
												"src": "699:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2008,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "699:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "698:16:16"
									},
									"src": "665:50:16"
								},
								{
									"documentation": {
										"id": 2012,
										"nodeType": "StructuredDocumentation",
										"src": "721:85:16",
										"text": " @dev The signature has an S value that is in the upper half order."
									},
									"errorSelector": "d78bce0c",
									"id": 2016,
									"name": "ECDSAInvalidSignatureS",
									"nameLocation": "817:22:16",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2015,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2014,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "848:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2016,
												"src": "840:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2013,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "840:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "839:11:16"
									},
									"src": "811:40:16"
								},
								{
									"body": {
										"id": 2068,
										"nodeType": "Block",
										"src": "2242:653:16",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2034,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 2031,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2021,
															"src": "2256:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 2032,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2266:6:16",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2256:16:16",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "3635",
														"id": 2033,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2276:2:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_65_by_1",
															"typeString": "int_const 65"
														},
														"value": "65"
													},
													"src": "2256:22:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2066,
													"nodeType": "Block",
													"src": "2781:108:16",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 2055,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2811:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 2054,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2803:7:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2053,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2803:7:16",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2056,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2803:10:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 2057,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2003,
																			"src": "2815:12:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$2003_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 2058,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "2828:22:16",
																		"memberName": "InvalidSignatureLength",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2001,
																		"src": "2815:35:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$2003",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 2061,
																					"name": "signature",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2021,
																					"src": "2860:9:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 2062,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2870:6:16",
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "2860:16:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 2060,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2852:7:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 2059,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "2852:7:16",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2063,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2852:25:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 2064,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2802:76:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2003_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 2030,
															"id": 2065,
															"nodeType": "Return",
															"src": "2795:83:16"
														}
													]
												},
												"id": 2067,
												"nodeType": "IfStatement",
												"src": "2252:637:16",
												"trueBody": {
													"id": 2052,
													"nodeType": "Block",
													"src": "2280:495:16",
													"statements": [
														{
															"assignments": [
																2036
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2036,
																	"mutability": "mutable",
																	"name": "r",
																	"nameLocation": "2302:1:16",
																	"nodeType": "VariableDeclaration",
																	"scope": 2052,
																	"src": "2294:9:16",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 2035,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2294:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2037,
															"nodeType": "VariableDeclarationStatement",
															"src": "2294:9:16"
														},
														{
															"assignments": [
																2039
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2039,
																	"mutability": "mutable",
																	"name": "s",
																	"nameLocation": "2325:1:16",
																	"nodeType": "VariableDeclaration",
																	"scope": 2052,
																	"src": "2317:9:16",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 2038,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2317:7:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2040,
															"nodeType": "VariableDeclarationStatement",
															"src": "2317:9:16"
														},
														{
															"assignments": [
																2042
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2042,
																	"mutability": "mutable",
																	"name": "v",
																	"nameLocation": "2346:1:16",
																	"nodeType": "VariableDeclaration",
																	"scope": 2052,
																	"src": "2340:7:16",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 2041,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "2340:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2043,
															"nodeType": "VariableDeclarationStatement",
															"src": "2340:7:16"
														},
														{
															"AST": {
																"nativeSrc": "2548:171:16",
																"nodeType": "YulBlock",
																"src": "2548:171:16",
																"statements": [
																	{
																		"nativeSrc": "2566:32:16",
																		"nodeType": "YulAssignment",
																		"src": "2566:32:16",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nativeSrc": "2581:9:16",
																							"nodeType": "YulIdentifier",
																							"src": "2581:9:16"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2592:4:16",
																							"nodeType": "YulLiteral",
																							"src": "2592:4:16",
																							"type": "",
																							"value": "0x20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "2577:3:16",
																						"nodeType": "YulIdentifier",
																						"src": "2577:3:16"
																					},
																					"nativeSrc": "2577:20:16",
																					"nodeType": "YulFunctionCall",
																					"src": "2577:20:16"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "2571:5:16",
																				"nodeType": "YulIdentifier",
																				"src": "2571:5:16"
																			},
																			"nativeSrc": "2571:27:16",
																			"nodeType": "YulFunctionCall",
																			"src": "2571:27:16"
																		},
																		"variableNames": [
																			{
																				"name": "r",
																				"nativeSrc": "2566:1:16",
																				"nodeType": "YulIdentifier",
																				"src": "2566:1:16"
																			}
																		]
																	},
																	{
																		"nativeSrc": "2615:32:16",
																		"nodeType": "YulAssignment",
																		"src": "2615:32:16",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nativeSrc": "2630:9:16",
																							"nodeType": "YulIdentifier",
																							"src": "2630:9:16"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2641:4:16",
																							"nodeType": "YulLiteral",
																							"src": "2641:4:16",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "2626:3:16",
																						"nodeType": "YulIdentifier",
																						"src": "2626:3:16"
																					},
																					"nativeSrc": "2626:20:16",
																					"nodeType": "YulFunctionCall",
																					"src": "2626:20:16"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "2620:5:16",
																				"nodeType": "YulIdentifier",
																				"src": "2620:5:16"
																			},
																			"nativeSrc": "2620:27:16",
																			"nodeType": "YulFunctionCall",
																			"src": "2620:27:16"
																		},
																		"variableNames": [
																			{
																				"name": "s",
																				"nativeSrc": "2615:1:16",
																				"nodeType": "YulIdentifier",
																				"src": "2615:1:16"
																			}
																		]
																	},
																	{
																		"nativeSrc": "2664:41:16",
																		"nodeType": "YulAssignment",
																		"src": "2664:41:16",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2674:1:16",
																					"nodeType": "YulLiteral",
																					"src": "2674:1:16",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "signature",
																									"nativeSrc": "2687:9:16",
																									"nodeType": "YulIdentifier",
																									"src": "2687:9:16"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "2698:4:16",
																									"nodeType": "YulLiteral",
																									"src": "2698:4:16",
																									"type": "",
																									"value": "0x60"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "2683:3:16",
																								"nodeType": "YulIdentifier",
																								"src": "2683:3:16"
																							},
																							"nativeSrc": "2683:20:16",
																							"nodeType": "YulFunctionCall",
																							"src": "2683:20:16"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "2677:5:16",
																						"nodeType": "YulIdentifier",
																						"src": "2677:5:16"
																					},
																					"nativeSrc": "2677:27:16",
																					"nodeType": "YulFunctionCall",
																					"src": "2677:27:16"
																				}
																			],
																			"functionName": {
																				"name": "byte",
																				"nativeSrc": "2669:4:16",
																				"nodeType": "YulIdentifier",
																				"src": "2669:4:16"
																			},
																			"nativeSrc": "2669:36:16",
																			"nodeType": "YulFunctionCall",
																			"src": "2669:36:16"
																		},
																		"variableNames": [
																			{
																				"name": "v",
																				"nativeSrc": "2664:1:16",
																				"nodeType": "YulIdentifier",
																				"src": "2664:1:16"
																			}
																		]
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "cancun",
															"externalReferences": [
																{
																	"declaration": 2036,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2566:1:16",
																	"valueSize": 1
																},
																{
																	"declaration": 2039,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2615:1:16",
																	"valueSize": 1
																},
																{
																	"declaration": 2021,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2581:9:16",
																	"valueSize": 1
																},
																{
																	"declaration": 2021,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2630:9:16",
																	"valueSize": 1
																},
																{
																	"declaration": 2021,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2687:9:16",
																	"valueSize": 1
																},
																{
																	"declaration": 2042,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2664:1:16",
																	"valueSize": 1
																}
															],
															"id": 2044,
															"nodeType": "InlineAssembly",
															"src": "2539:180:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 2046,
																		"name": "hash",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2019,
																		"src": "2750:4:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 2047,
																		"name": "v",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2042,
																		"src": "2756:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	{
																		"id": 2048,
																		"name": "r",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2036,
																		"src": "2759:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 2049,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2039,
																		"src": "2762:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 2045,
																	"name": "tryRecover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		2069,
																		2149,
																		2257
																	],
																	"referencedDeclaration": 2257,
																	"src": "2739:10:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2003_$_t_bytes32_$",
																		"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
																	}
																},
																"id": 2050,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2739:25:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2003_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 2030,
															"id": 2051,
															"nodeType": "Return",
															"src": "2732:32:16"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2017,
										"nodeType": "StructuredDocumentation",
										"src": "857:1267:16",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n return address(0) without also returning an error description. Errors are documented using an enum (error type)\n and a bytes32 providing additional information about the error.\n If no error is returned, then the address can be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]"
									},
									"id": 2069,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "2138:10:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2022,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2019,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "2157:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2069,
												"src": "2149:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2018,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2149:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2021,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "2176:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 2069,
												"src": "2163:22:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2020,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2163:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2148:38:16"
									},
									"returnParameters": {
										"id": 2030,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2024,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2069,
												"src": "2210:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2023,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2210:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2027,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2069,
												"src": "2219:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$2003",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 2026,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2025,
														"name": "RecoverError",
														"nameLocations": [
															"2219:12:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2003,
														"src": "2219:12:16"
													},
													"referencedDeclaration": 2003,
													"src": "2219:12:16",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$2003",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2029,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2069,
												"src": "2233:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2028,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2233:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2209:32:16"
									},
									"scope": 2343,
									"src": "2129:766:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2098,
										"nodeType": "Block",
										"src": "3789:168:16",
										"statements": [
											{
												"assignments": [
													2080,
													2083,
													2085
												],
												"declarations": [
													{
														"constant": false,
														"id": 2080,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "3808:9:16",
														"nodeType": "VariableDeclaration",
														"scope": 2098,
														"src": "3800:17:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2079,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3800:7:16",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2083,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "3832:5:16",
														"nodeType": "VariableDeclaration",
														"scope": 2098,
														"src": "3819:18:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$2003",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 2082,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2081,
																"name": "RecoverError",
																"nameLocations": [
																	"3819:12:16"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 2003,
																"src": "3819:12:16"
															},
															"referencedDeclaration": 2003,
															"src": "3819:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2003",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2085,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "3847:8:16",
														"nodeType": "VariableDeclaration",
														"scope": 2098,
														"src": "3839:16:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 2084,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "3839:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2090,
												"initialValue": {
													"arguments": [
														{
															"id": 2087,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2072,
															"src": "3870:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2088,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2074,
															"src": "3876:9:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2086,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2069,
															2149,
															2257
														],
														"referencedDeclaration": 2069,
														"src": "3859:10:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$2003_$_t_bytes32_$",
															"typeString": "function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 2089,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3859:27:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2003_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3799:87:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2092,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2083,
															"src": "3908:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2003",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 2093,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2085,
															"src": "3915:8:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$2003",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2091,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2342,
														"src": "3896:11:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$2003_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 2094,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3896:28:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2095,
												"nodeType": "ExpressionStatement",
												"src": "3896:28:16"
											},
											{
												"expression": {
													"id": 2096,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2080,
													"src": "3941:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2078,
												"id": 2097,
												"nodeType": "Return",
												"src": "3934:16:16"
											}
										]
									},
									"documentation": {
										"id": 2070,
										"nodeType": "StructuredDocumentation",
										"src": "2901:796:16",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it."
									},
									"id": 2099,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "3711:7:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2075,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2072,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "3727:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2099,
												"src": "3719:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2071,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3719:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2074,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "3746:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 2099,
												"src": "3733:22:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2073,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3733:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3718:38:16"
									},
									"returnParameters": {
										"id": 2078,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2077,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2099,
												"src": "3780:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2076,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3780:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3779:9:16"
									},
									"scope": 2343,
									"src": "3702:255:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2148,
										"nodeType": "Block",
										"src": "4285:342:16",
										"statements": [
											{
												"id": 2147,
												"nodeType": "UncheckedBlock",
												"src": "4295:326:16",
												"statements": [
													{
														"assignments": [
															2117
														],
														"declarations": [
															{
																"constant": false,
																"id": 2117,
																"mutability": "mutable",
																"name": "s",
																"nameLocation": "4327:1:16",
																"nodeType": "VariableDeclaration",
																"scope": 2147,
																"src": "4319:9:16",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 2116,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "4319:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2124,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															"id": 2123,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2118,
																"name": "vs",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2106,
																"src": "4331:2:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
																		"id": 2121,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4344:66:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																			"typeString": "int_const 5789...(69 digits omitted)...9967"
																		},
																		"value": "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																			"typeString": "int_const 5789...(69 digits omitted)...9967"
																		}
																	],
																	"id": 2120,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4336:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes32_$",
																		"typeString": "type(bytes32)"
																	},
																	"typeName": {
																		"id": 2119,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "4336:7:16",
																		"typeDescriptions": {}
																	}
																},
																"id": 2122,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4336:75:16",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"src": "4331:80:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4319:92:16"
													},
													{
														"assignments": [
															2126
														],
														"declarations": [
															{
																"constant": false,
																"id": 2126,
																"mutability": "mutable",
																"name": "v",
																"nameLocation": "4528:1:16",
																"nodeType": "VariableDeclaration",
																"scope": 2147,
																"src": "4522:7:16",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"typeName": {
																	"id": 2125,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "4522:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2139,
														"initialValue": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2137,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2134,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"arguments": [
																						{
																							"id": 2131,
																							"name": "vs",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 2106,
																							"src": "4547:2:16",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						],
																						"id": 2130,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4539:7:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						},
																						"typeName": {
																							"id": 2129,
																							"name": "uint256",
																							"nodeType": "ElementaryTypeName",
																							"src": "4539:7:16",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 2132,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "4539:11:16",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": ">>",
																				"rightExpression": {
																					"hexValue": "323535",
																					"id": 2133,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "4554:3:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_255_by_1",
																						"typeString": "int_const 255"
																					},
																					"value": "255"
																				},
																				"src": "4539:18:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 2135,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "4538:20:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "3237",
																		"id": 2136,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4561:2:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_27_by_1",
																			"typeString": "int_const 27"
																		},
																		"value": "27"
																	},
																	"src": "4538:25:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2128,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4532:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 2127,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "4532:5:16",
																	"typeDescriptions": {}
																}
															},
															"id": 2138,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4532:32:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4522:42:16"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 2141,
																	"name": "hash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2102,
																	"src": "4596:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2142,
																	"name": "v",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2126,
																	"src": "4602:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																{
																	"id": 2143,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2104,
																	"src": "4605:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2144,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2117,
																	"src": "4608:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 2140,
																"name": "tryRecover",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2069,
																	2149,
																	2257
																],
																"referencedDeclaration": 2257,
																"src": "4585:10:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2003_$_t_bytes32_$",
																	"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"id": 2145,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4585:25:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2003_$_t_bytes32_$",
																"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
															}
														},
														"functionReturnParameters": 2115,
														"id": 2146,
														"nodeType": "Return",
														"src": "4578:32:16"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2100,
										"nodeType": "StructuredDocumentation",
										"src": "3963:205:16",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]"
									},
									"id": 2149,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "4182:10:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2107,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2102,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4201:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2149,
												"src": "4193:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2101,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4193:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2104,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4215:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2149,
												"src": "4207:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2103,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4207:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2106,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4226:2:16",
												"nodeType": "VariableDeclaration",
												"scope": 2149,
												"src": "4218:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2105,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4218:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4192:37:16"
									},
									"returnParameters": {
										"id": 2115,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2109,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2149,
												"src": "4253:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2108,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4253:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2112,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2149,
												"src": "4262:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$2003",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 2111,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2110,
														"name": "RecoverError",
														"nameLocations": [
															"4262:12:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2003,
														"src": "4262:12:16"
													},
													"referencedDeclaration": 2003,
													"src": "4262:12:16",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$2003",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2114,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2149,
												"src": "4276:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2113,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4276:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4252:32:16"
									},
									"scope": 2343,
									"src": "4173:454:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2181,
										"nodeType": "Block",
										"src": "4840:164:16",
										"statements": [
											{
												"assignments": [
													2162,
													2165,
													2167
												],
												"declarations": [
													{
														"constant": false,
														"id": 2162,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "4859:9:16",
														"nodeType": "VariableDeclaration",
														"scope": 2181,
														"src": "4851:17:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2161,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4851:7:16",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2165,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "4883:5:16",
														"nodeType": "VariableDeclaration",
														"scope": 2181,
														"src": "4870:18:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$2003",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 2164,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2163,
																"name": "RecoverError",
																"nameLocations": [
																	"4870:12:16"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 2003,
																"src": "4870:12:16"
															},
															"referencedDeclaration": 2003,
															"src": "4870:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2003",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2167,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "4898:8:16",
														"nodeType": "VariableDeclaration",
														"scope": 2181,
														"src": "4890:16:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 2166,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "4890:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2173,
												"initialValue": {
													"arguments": [
														{
															"id": 2169,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2152,
															"src": "4921:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2170,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2154,
															"src": "4927:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2171,
															"name": "vs",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2156,
															"src": "4930:2:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2168,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2069,
															2149,
															2257
														],
														"referencedDeclaration": 2149,
														"src": "4910:10:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2003_$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 2172,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4910:23:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2003_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4850:83:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2175,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2165,
															"src": "4955:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2003",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 2176,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2167,
															"src": "4962:8:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$2003",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2174,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2342,
														"src": "4943:11:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$2003_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 2177,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4943:28:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2178,
												"nodeType": "ExpressionStatement",
												"src": "4943:28:16"
											},
											{
												"expression": {
													"id": 2179,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2162,
													"src": "4988:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2160,
												"id": 2180,
												"nodeType": "Return",
												"src": "4981:16:16"
											}
										]
									},
									"documentation": {
										"id": 2150,
										"nodeType": "StructuredDocumentation",
										"src": "4633:116:16",
										"text": " @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately."
									},
									"id": 2182,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "4763:7:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2152,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4779:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2182,
												"src": "4771:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2151,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4771:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2154,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4793:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2182,
												"src": "4785:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2153,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4785:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2156,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4804:2:16",
												"nodeType": "VariableDeclaration",
												"scope": 2182,
												"src": "4796:10:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2155,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4796:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4770:37:16"
									},
									"returnParameters": {
										"id": 2160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2159,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2182,
												"src": "4831:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2158,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4831:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4830:9:16"
									},
									"scope": 2343,
									"src": "4754:250:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2256,
										"nodeType": "Block",
										"src": "5298:1372:16",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2206,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 2203,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2191,
																"src": "6194:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 2202,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6186:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 2201,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6186:7:16",
																"typeDescriptions": {}
															}
														},
														"id": 2204,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6186:10:16",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130",
														"id": 2205,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6199:66:16",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1",
															"typeString": "int_const 5789...(69 digits omitted)...7168"
														},
														"value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
													},
													"src": "6186:79:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2217,
												"nodeType": "IfStatement",
												"src": "6182:164:16",
												"trueBody": {
													"id": 2216,
													"nodeType": "Block",
													"src": "6267:79:16",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 2209,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6297:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 2208,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6289:7:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2207,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6289:7:16",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2210,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6289:10:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 2211,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2003,
																			"src": "6301:12:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$2003_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 2212,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6314:17:16",
																		"memberName": "InvalidSignatureS",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2002,
																		"src": "6301:30:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$2003",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"id": 2213,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2191,
																		"src": "6333:1:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 2214,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6288:47:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2003_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 2200,
															"id": 2215,
															"nodeType": "Return",
															"src": "6281:54:16"
														}
													]
												}
											},
											{
												"assignments": [
													2219
												],
												"declarations": [
													{
														"constant": false,
														"id": 2219,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "6448:6:16",
														"nodeType": "VariableDeclaration",
														"scope": 2256,
														"src": "6440:14:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2218,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6440:7:16",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2226,
												"initialValue": {
													"arguments": [
														{
															"id": 2221,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2185,
															"src": "6467:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2222,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2187,
															"src": "6473:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 2223,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2189,
															"src": "6476:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2224,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2191,
															"src": "6479:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2220,
														"name": "ecrecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967290,
														"src": "6457:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 2225,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6457:24:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6440:41:16"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2232,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2227,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2219,
														"src": "6495:6:16",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 2230,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6513:1:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 2229,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6505:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2228,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6505:7:16",
																"typeDescriptions": {}
															}
														},
														"id": 2231,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6505:10:16",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6495:20:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2246,
												"nodeType": "IfStatement",
												"src": "6491:113:16",
												"trueBody": {
													"id": 2245,
													"nodeType": "Block",
													"src": "6517:87:16",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 2235,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6547:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 2234,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6539:7:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2233,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6539:7:16",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2236,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6539:10:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 2237,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2003,
																			"src": "6551:12:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$2003_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 2238,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6564:16:16",
																		"memberName": "InvalidSignature",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 2000,
																		"src": "6551:29:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$2003",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 2241,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6590:1:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 2240,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6582:7:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 2239,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "6582:7:16",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2242,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6582:10:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 2243,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6538:55:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2003_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 2200,
															"id": 2244,
															"nodeType": "Return",
															"src": "6531:62:16"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"id": 2247,
															"name": "signer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2219,
															"src": "6622:6:16",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 2248,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2003,
																"src": "6630:12:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$2003_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 2249,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6643:7:16",
															"memberName": "NoError",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1999,
															"src": "6630:20:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2003",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2252,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6660:1:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2251,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6652:7:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 2250,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6652:7:16",
																	"typeDescriptions": {}
																}
															},
															"id": 2253,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6652:10:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"id": 2254,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "6621:42:16",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2003_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"functionReturnParameters": 2200,
												"id": 2255,
												"nodeType": "Return",
												"src": "6614:49:16"
											}
										]
									},
									"documentation": {
										"id": 2183,
										"nodeType": "StructuredDocumentation",
										"src": "5010:125:16",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 2257,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "5149:10:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2192,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2185,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "5177:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2257,
												"src": "5169:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2184,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5169:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2187,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "5197:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2257,
												"src": "5191:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2186,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5191:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2189,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "5216:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2257,
												"src": "5208:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2188,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5208:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2191,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "5235:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2257,
												"src": "5227:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2190,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5227:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5159:83:16"
									},
									"returnParameters": {
										"id": 2200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2194,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2257,
												"src": "5266:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2193,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5266:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2197,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2257,
												"src": "5275:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$2003",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 2196,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2195,
														"name": "RecoverError",
														"nameLocations": [
															"5275:12:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2003,
														"src": "5275:12:16"
													},
													"referencedDeclaration": 2003,
													"src": "5275:12:16",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$2003",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2199,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2257,
												"src": "5289:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2198,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5289:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5265:32:16"
									},
									"scope": 2343,
									"src": "5140:1530:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2292,
										"nodeType": "Block",
										"src": "6897:166:16",
										"statements": [
											{
												"assignments": [
													2272,
													2275,
													2277
												],
												"declarations": [
													{
														"constant": false,
														"id": 2272,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "6916:9:16",
														"nodeType": "VariableDeclaration",
														"scope": 2292,
														"src": "6908:17:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2271,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6908:7:16",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2275,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "6940:5:16",
														"nodeType": "VariableDeclaration",
														"scope": 2292,
														"src": "6927:18:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$2003",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 2274,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2273,
																"name": "RecoverError",
																"nameLocations": [
																	"6927:12:16"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 2003,
																"src": "6927:12:16"
															},
															"referencedDeclaration": 2003,
															"src": "6927:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2003",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2277,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "6955:8:16",
														"nodeType": "VariableDeclaration",
														"scope": 2292,
														"src": "6947:16:16",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 2276,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "6947:7:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2284,
												"initialValue": {
													"arguments": [
														{
															"id": 2279,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2260,
															"src": "6978:4:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2280,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2262,
															"src": "6984:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 2281,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2264,
															"src": "6987:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2282,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2266,
															"src": "6990:1:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2278,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2069,
															2149,
															2257
														],
														"referencedDeclaration": 2257,
														"src": "6967:10:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2003_$_t_bytes32_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 2283,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6967:25:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$2003_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6907:85:16"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2286,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2275,
															"src": "7014:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2003",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 2287,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2277,
															"src": "7021:8:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$2003",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2285,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2342,
														"src": "7002:11:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$2003_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 2288,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7002:28:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2289,
												"nodeType": "ExpressionStatement",
												"src": "7002:28:16"
											},
											{
												"expression": {
													"id": 2290,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2272,
													"src": "7047:9:16",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2270,
												"id": 2291,
												"nodeType": "Return",
												"src": "7040:16:16"
											}
										]
									},
									"documentation": {
										"id": 2258,
										"nodeType": "StructuredDocumentation",
										"src": "6676:122:16",
										"text": " @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 2293,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "6812:7:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2260,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "6828:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2293,
												"src": "6820:12:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2259,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6820:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2262,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "6840:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2293,
												"src": "6834:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2261,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "6834:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2264,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "6851:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2293,
												"src": "6843:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2263,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6843:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2266,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "6862:1:16",
												"nodeType": "VariableDeclaration",
												"scope": 2293,
												"src": "6854:9:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2265,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6854:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6819:45:16"
									},
									"returnParameters": {
										"id": 2270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2269,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2293,
												"src": "6888:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2268,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6888:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6887:9:16"
									},
									"scope": 2343,
									"src": "6803:260:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2341,
										"nodeType": "Block",
										"src": "7268:460:16",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_enum$_RecoverError_$2003",
														"typeString": "enum ECDSA.RecoverError"
													},
													"id": 2305,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2302,
														"name": "error",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2297,
														"src": "7282:5:16",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$2003",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"id": 2303,
															"name": "RecoverError",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2003,
															"src": "7291:12:16",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_RecoverError_$2003_$",
																"typeString": "type(enum ECDSA.RecoverError)"
															}
														},
														"id": 2304,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "7304:7:16",
														"memberName": "NoError",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1999,
														"src": "7291:20:16",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$2003",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"src": "7282:29:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_enum$_RecoverError_$2003",
															"typeString": "enum ECDSA.RecoverError"
														},
														"id": 2311,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2308,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2297,
															"src": "7378:5:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2003",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 2309,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2003,
																"src": "7387:12:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$2003_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 2310,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7400:16:16",
															"memberName": "InvalidSignature",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 2000,
															"src": "7387:29:16",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$2003",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"src": "7378:38:16",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_enum$_RecoverError_$2003",
																"typeString": "enum ECDSA.RecoverError"
															},
															"id": 2319,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2316,
																"name": "error",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2297,
																"src": "7483:5:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$2003",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 2317,
																	"name": "RecoverError",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2003,
																	"src": "7492:12:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_RecoverError_$2003_$",
																		"typeString": "type(enum ECDSA.RecoverError)"
																	}
																},
																"id": 2318,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "7505:22:16",
																"memberName": "InvalidSignatureLength",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 2001,
																"src": "7492:35:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$2003",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"src": "7483:44:16",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_enum$_RecoverError_$2003",
																	"typeString": "enum ECDSA.RecoverError"
																},
																"id": 2331,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2328,
																	"name": "error",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2297,
																	"src": "7617:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$2003",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 2329,
																		"name": "RecoverError",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2003,
																		"src": "7626:12:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_enum$_RecoverError_$2003_$",
																			"typeString": "type(enum ECDSA.RecoverError)"
																		}
																	},
																	"id": 2330,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "7639:17:16",
																	"memberName": "InvalidSignatureS",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2002,
																	"src": "7626:30:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$2003",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"src": "7617:39:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2337,
															"nodeType": "IfStatement",
															"src": "7613:109:16",
															"trueBody": {
																"id": 2336,
																"nodeType": "Block",
																"src": "7658:64:16",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 2333,
																					"name": "errorArg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2299,
																					"src": "7702:8:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				],
																				"id": 2332,
																				"name": "ECDSAInvalidSignatureS",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2016,
																				"src": "7679:22:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_bytes32_$returns$_t_error_$",
																					"typeString": "function (bytes32) pure returns (error)"
																				}
																			},
																			"id": 2334,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7679:32:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 2335,
																		"nodeType": "RevertStatement",
																		"src": "7672:39:16"
																	}
																]
															}
														},
														"id": 2338,
														"nodeType": "IfStatement",
														"src": "7479:243:16",
														"trueBody": {
															"id": 2327,
															"nodeType": "Block",
															"src": "7529:78:16",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 2323,
																						"name": "errorArg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2299,
																						"src": "7586:8:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"id": 2322,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "7578:7:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 2321,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "7578:7:16",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 2324,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "7578:17:16",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 2320,
																			"name": "ECDSAInvalidSignatureLength",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2011,
																			"src": "7550:27:16",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$_t_error_$",
																				"typeString": "function (uint256) pure returns (error)"
																			}
																		},
																		"id": 2325,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7550:46:16",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_error",
																			"typeString": "error"
																		}
																	},
																	"id": 2326,
																	"nodeType": "RevertStatement",
																	"src": "7543:53:16"
																}
															]
														}
													},
													"id": 2339,
													"nodeType": "IfStatement",
													"src": "7374:348:16",
													"trueBody": {
														"id": 2315,
														"nodeType": "Block",
														"src": "7418:55:16",
														"statements": [
															{
																"errorCall": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 2312,
																		"name": "ECDSAInvalidSignature",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2006,
																		"src": "7439:21:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																			"typeString": "function () pure returns (error)"
																		}
																	},
																	"id": 2313,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7439:23:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_error",
																		"typeString": "error"
																	}
																},
																"id": 2314,
																"nodeType": "RevertStatement",
																"src": "7432:30:16"
															}
														]
													}
												},
												"id": 2340,
												"nodeType": "IfStatement",
												"src": "7278:444:16",
												"trueBody": {
													"id": 2307,
													"nodeType": "Block",
													"src": "7313:55:16",
													"statements": [
														{
															"functionReturnParameters": 2301,
															"id": 2306,
															"nodeType": "Return",
															"src": "7327:7:16"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2294,
										"nodeType": "StructuredDocumentation",
										"src": "7069:122:16",
										"text": " @dev Optionally reverts with the corresponding custom error according to the `error` argument provided."
									},
									"id": 2342,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_throwError",
									"nameLocation": "7205:11:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2300,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2297,
												"mutability": "mutable",
												"name": "error",
												"nameLocation": "7230:5:16",
												"nodeType": "VariableDeclaration",
												"scope": 2342,
												"src": "7217:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$2003",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 2296,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2295,
														"name": "RecoverError",
														"nameLocations": [
															"7217:12:16"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2003,
														"src": "7217:12:16"
													},
													"referencedDeclaration": 2003,
													"src": "7217:12:16",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$2003",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2299,
												"mutability": "mutable",
												"name": "errorArg",
												"nameLocation": "7245:8:16",
												"nodeType": "VariableDeclaration",
												"scope": 2342,
												"src": "7237:16:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2298,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7237:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7216:38:16"
									},
									"returnParameters": {
										"id": 2301,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7268:0:16"
									},
									"scope": 2343,
									"src": "7196:532:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 2344,
							"src": "344:7386:16",
							"usedErrors": [
								2006,
								2011,
								2016
							],
							"usedEvents": []
						}
					],
					"src": "112:7619:16"
				},
				"id": 16
			},
			"@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/EIP712.sol",
					"exportedSymbols": {
						"EIP712": [
							2570
						],
						"IERC5267": [
							172
						],
						"MessageHashUtils": [
							2644
						],
						"ShortString": [
							1419
						],
						"ShortStrings": [
							1630
						]
					},
					"id": 2571,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2345,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "113:24:17"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
							"file": "./MessageHashUtils.sol",
							"id": 2347,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2571,
							"sourceUnit": 2645,
							"src": "139:56:17",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2346,
										"name": "MessageHashUtils",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2644,
										"src": "147:16:17",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/ShortStrings.sol",
							"file": "../ShortStrings.sol",
							"id": 2350,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2571,
							"sourceUnit": 1631,
							"src": "196:62:17",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2348,
										"name": "ShortStrings",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1630,
										"src": "204:12:17",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 2349,
										"name": "ShortString",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1419,
										"src": "218:11:17",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC5267.sol",
							"file": "../../interfaces/IERC5267.sol",
							"id": 2352,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2571,
							"sourceUnit": 173,
							"src": "259:55:17",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2351,
										"name": "IERC5267",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 172,
										"src": "267:8:17",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 2354,
										"name": "IERC5267",
										"nameLocations": [
											"1988:8:17"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 172,
										"src": "1988:8:17"
									},
									"id": 2355,
									"nodeType": "InheritanceSpecifier",
									"src": "1988:8:17"
								}
							],
							"canonicalName": "EIP712",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2353,
								"nodeType": "StructuredDocumentation",
								"src": "316:1643:17",
								"text": " @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n @custom:oz-upgrades-unsafe-allow state-variable-immutable"
							},
							"fullyImplemented": true,
							"id": 2570,
							"linearizedBaseContracts": [
								2570,
								172
							],
							"name": "EIP712",
							"nameLocation": "1978:6:17",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 2357,
									"libraryName": {
										"id": 2356,
										"name": "ShortStrings",
										"nameLocations": [
											"2009:12:17"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1630,
										"src": "2009:12:17"
									},
									"nodeType": "UsingForDirective",
									"src": "2003:25:17"
								},
								{
									"constant": true,
									"id": 2362,
									"mutability": "constant",
									"name": "TYPE_HASH",
									"nameLocation": "2059:9:17",
									"nodeType": "VariableDeclaration",
									"scope": 2570,
									"src": "2034:140:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2358,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2034:7:17",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429",
												"id": 2360,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "2089:84:17",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
													"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
												},
												"value": "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
													"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
												}
											],
											"id": 2359,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "2079:9:17",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 2361,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "2079:95:17",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2364,
									"mutability": "immutable",
									"name": "_cachedDomainSeparator",
									"nameLocation": "2399:22:17",
									"nodeType": "VariableDeclaration",
									"scope": 2570,
									"src": "2373:48:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2363,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2373:7:17",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2366,
									"mutability": "immutable",
									"name": "_cachedChainId",
									"nameLocation": "2453:14:17",
									"nodeType": "VariableDeclaration",
									"scope": 2570,
									"src": "2427:40:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2365,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2427:7:17",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2368,
									"mutability": "immutable",
									"name": "_cachedThis",
									"nameLocation": "2499:11:17",
									"nodeType": "VariableDeclaration",
									"scope": 2570,
									"src": "2473:37:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2367,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "2473:7:17",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2370,
									"mutability": "immutable",
									"name": "_hashedName",
									"nameLocation": "2543:11:17",
									"nodeType": "VariableDeclaration",
									"scope": 2570,
									"src": "2517:37:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2369,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2517:7:17",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2372,
									"mutability": "immutable",
									"name": "_hashedVersion",
									"nameLocation": "2586:14:17",
									"nodeType": "VariableDeclaration",
									"scope": 2570,
									"src": "2560:40:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2371,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2560:7:17",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2375,
									"mutability": "immutable",
									"name": "_name",
									"nameLocation": "2637:5:17",
									"nodeType": "VariableDeclaration",
									"scope": 2570,
									"src": "2607:35:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
										"typeString": "ShortString"
									},
									"typeName": {
										"id": 2374,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 2373,
											"name": "ShortString",
											"nameLocations": [
												"2607:11:17"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1419,
											"src": "2607:11:17"
										},
										"referencedDeclaration": 1419,
										"src": "2607:11:17",
										"typeDescriptions": {
											"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
											"typeString": "ShortString"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2378,
									"mutability": "immutable",
									"name": "_version",
									"nameLocation": "2678:8:17",
									"nodeType": "VariableDeclaration",
									"scope": 2570,
									"src": "2648:38:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
										"typeString": "ShortString"
									},
									"typeName": {
										"id": 2377,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 2376,
											"name": "ShortString",
											"nameLocations": [
												"2648:11:17"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1419,
											"src": "2648:11:17"
										},
										"referencedDeclaration": 1419,
										"src": "2648:11:17",
										"typeDescriptions": {
											"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
											"typeString": "ShortString"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2380,
									"mutability": "mutable",
									"name": "_nameFallback",
									"nameLocation": "2707:13:17",
									"nodeType": "VariableDeclaration",
									"scope": 2570,
									"src": "2692:28:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 2379,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "2692:6:17",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2382,
									"mutability": "mutable",
									"name": "_versionFallback",
									"nameLocation": "2741:16:17",
									"nodeType": "VariableDeclaration",
									"scope": 2570,
									"src": "2726:31:17",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 2381,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "2726:6:17",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 2439,
										"nodeType": "Block",
										"src": "3383:376:17",
										"statements": [
											{
												"expression": {
													"id": 2395,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2390,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2375,
														"src": "3393:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
															"typeString": "ShortString"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2393,
																"name": "_nameFallback",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2380,
																"src": "3432:13:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															],
															"expression": {
																"id": 2391,
																"name": "name",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2385,
																"src": "3401:4:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"id": 2392,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3406:25:17",
															"memberName": "toShortStringWithFallback",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1571,
															"src": "3401:30:17",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$1419_$attached_to$_t_string_memory_ptr_$",
																"typeString": "function (string memory,string storage pointer) returns (ShortString)"
															}
														},
														"id": 2394,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3401:45:17",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
															"typeString": "ShortString"
														}
													},
													"src": "3393:53:17",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
														"typeString": "ShortString"
													}
												},
												"id": 2396,
												"nodeType": "ExpressionStatement",
												"src": "3393:53:17"
											},
											{
												"expression": {
													"id": 2402,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2397,
														"name": "_version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2378,
														"src": "3456:8:17",
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
															"typeString": "ShortString"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2400,
																"name": "_versionFallback",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2382,
																"src": "3501:16:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															],
															"expression": {
																"id": 2398,
																"name": "version",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2387,
																"src": "3467:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"id": 2399,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3475:25:17",
															"memberName": "toShortStringWithFallback",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1571,
															"src": "3467:33:17",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$1419_$attached_to$_t_string_memory_ptr_$",
																"typeString": "function (string memory,string storage pointer) returns (ShortString)"
															}
														},
														"id": 2401,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3467:51:17",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
															"typeString": "ShortString"
														}
													},
													"src": "3456:62:17",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
														"typeString": "ShortString"
													}
												},
												"id": 2403,
												"nodeType": "ExpressionStatement",
												"src": "3456:62:17"
											},
											{
												"expression": {
													"id": 2411,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2404,
														"name": "_hashedName",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2370,
														"src": "3528:11:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2408,
																		"name": "name",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2385,
																		"src": "3558:4:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2407,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3552:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2406,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3552:5:17",
																		"typeDescriptions": {}
																	}
																},
																"id": 2409,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3552:11:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 2405,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "3542:9:17",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 2410,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3542:22:17",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3528:36:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2412,
												"nodeType": "ExpressionStatement",
												"src": "3528:36:17"
											},
											{
												"expression": {
													"id": 2420,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2413,
														"name": "_hashedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2372,
														"src": "3574:14:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2417,
																		"name": "version",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2387,
																		"src": "3607:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2416,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3601:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2415,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3601:5:17",
																		"typeDescriptions": {}
																	}
																},
																"id": 2418,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3601:14:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 2414,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "3591:9:17",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 2419,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3591:25:17",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3574:42:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2421,
												"nodeType": "ExpressionStatement",
												"src": "3574:42:17"
											},
											{
												"expression": {
													"id": 2425,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2422,
														"name": "_cachedChainId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2366,
														"src": "3627:14:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 2423,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "3644:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 2424,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3650:7:17",
														"memberName": "chainid",
														"nodeType": "MemberAccess",
														"src": "3644:13:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3627:30:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2426,
												"nodeType": "ExpressionStatement",
												"src": "3627:30:17"
											},
											{
												"expression": {
													"id": 2430,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2427,
														"name": "_cachedDomainSeparator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2364,
														"src": "3667:22:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2428,
															"name": "_buildDomainSeparator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2487,
															"src": "3692:21:17",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																"typeString": "function () view returns (bytes32)"
															}
														},
														"id": 2429,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3692:23:17",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3667:48:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2431,
												"nodeType": "ExpressionStatement",
												"src": "3667:48:17"
											},
											{
												"expression": {
													"id": 2437,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2432,
														"name": "_cachedThis",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2368,
														"src": "3725:11:17",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2435,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "3747:4:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_EIP712_$2570",
																	"typeString": "contract EIP712"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_EIP712_$2570",
																	"typeString": "contract EIP712"
																}
															],
															"id": 2434,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3739:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2433,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3739:7:17",
																"typeDescriptions": {}
															}
														},
														"id": 2436,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3739:13:17",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3725:27:17",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2438,
												"nodeType": "ExpressionStatement",
												"src": "3725:27:17"
											}
										]
									},
									"documentation": {
										"id": 2383,
										"nodeType": "StructuredDocumentation",
										"src": "2764:559:17",
										"text": " @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."
									},
									"id": 2440,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2388,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2385,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "3354:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2440,
												"src": "3340:18:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2384,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3340:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2387,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "3374:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 2440,
												"src": "3360:21:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2386,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3360:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3339:43:17"
									},
									"returnParameters": {
										"id": 2389,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3383:0:17"
									},
									"scope": 2570,
									"src": "3328:431:17",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2465,
										"nodeType": "Block",
										"src": "3907:200:17",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2456,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 2451,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2448,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3929:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_EIP712_$2570",
																		"typeString": "contract EIP712"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_EIP712_$2570",
																		"typeString": "contract EIP712"
																	}
																],
																"id": 2447,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3921:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2446,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3921:7:17",
																	"typeDescriptions": {}
																}
															},
															"id": 2449,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3921:13:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 2450,
															"name": "_cachedThis",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2368,
															"src": "3938:11:17",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "3921:28:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2455,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 2452,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "3953:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 2453,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3959:7:17",
															"memberName": "chainid",
															"nodeType": "MemberAccess",
															"src": "3953:13:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 2454,
															"name": "_cachedChainId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2366,
															"src": "3970:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3953:31:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3921:63:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2463,
													"nodeType": "Block",
													"src": "4046:55:17",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2460,
																	"name": "_buildDomainSeparator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2487,
																	"src": "4067:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																		"typeString": "function () view returns (bytes32)"
																	}
																},
																"id": 2461,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4067:23:17",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 2445,
															"id": 2462,
															"nodeType": "Return",
															"src": "4060:30:17"
														}
													]
												},
												"id": 2464,
												"nodeType": "IfStatement",
												"src": "3917:184:17",
												"trueBody": {
													"id": 2459,
													"nodeType": "Block",
													"src": "3986:54:17",
													"statements": [
														{
															"expression": {
																"id": 2457,
																"name": "_cachedDomainSeparator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2364,
																"src": "4007:22:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 2445,
															"id": 2458,
															"nodeType": "Return",
															"src": "4000:29:17"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2441,
										"nodeType": "StructuredDocumentation",
										"src": "3765:75:17",
										"text": " @dev Returns the domain separator for the current chain."
									},
									"id": 2466,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_domainSeparatorV4",
									"nameLocation": "3854:18:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2442,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3872:2:17"
									},
									"returnParameters": {
										"id": 2445,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2444,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2466,
												"src": "3898:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2443,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3898:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3897:9:17"
									},
									"scope": 2570,
									"src": "3845:262:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2486,
										"nodeType": "Block",
										"src": "4177:115:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2474,
																	"name": "TYPE_HASH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2362,
																	"src": "4215:9:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2475,
																	"name": "_hashedName",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2370,
																	"src": "4226:11:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2476,
																	"name": "_hashedVersion",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2372,
																	"src": "4239:14:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"expression": {
																		"id": 2477,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "4255:5:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 2478,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "4261:7:17",
																	"memberName": "chainid",
																	"nodeType": "MemberAccess",
																	"src": "4255:13:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 2481,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4278:4:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_EIP712_$2570",
																				"typeString": "contract EIP712"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_EIP712_$2570",
																				"typeString": "contract EIP712"
																			}
																		],
																		"id": 2480,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4270:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2479,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4270:7:17",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2482,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4270:13:17",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 2472,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "4204:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2473,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4208:6:17",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "4204:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2483,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4204:80:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2471,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "4194:9:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2484,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4194:91:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2470,
												"id": 2485,
												"nodeType": "Return",
												"src": "4187:98:17"
											}
										]
									},
									"id": 2487,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_buildDomainSeparator",
									"nameLocation": "4122:21:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2467,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4143:2:17"
									},
									"returnParameters": {
										"id": 2470,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2469,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2487,
												"src": "4168:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2468,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4168:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4167:9:17"
									},
									"scope": 2570,
									"src": "4113:179:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2502,
										"nodeType": "Block",
										"src": "5003:90:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2497,
																"name": "_domainSeparatorV4",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2466,
																"src": "5053:18:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																	"typeString": "function () view returns (bytes32)"
																}
															},
															"id": 2498,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5053:20:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2499,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2490,
															"src": "5075:10:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 2495,
															"name": "MessageHashUtils",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2644,
															"src": "5020:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_MessageHashUtils_$2644_$",
																"typeString": "type(library MessageHashUtils)"
															}
														},
														"id": 2496,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5037:15:17",
														"memberName": "toTypedDataHash",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2643,
														"src": "5020:32:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
														}
													},
													"id": 2500,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5020:66:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2494,
												"id": 2501,
												"nodeType": "Return",
												"src": "5013:73:17"
											}
										]
									},
									"documentation": {
										"id": 2488,
										"nodeType": "StructuredDocumentation",
										"src": "4298:614:17",
										"text": " @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"
									},
									"id": 2503,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_hashTypedDataV4",
									"nameLocation": "4926:16:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2491,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2490,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "4951:10:17",
												"nodeType": "VariableDeclaration",
												"scope": 2503,
												"src": "4943:18:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2489,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4943:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4942:20:17"
									},
									"returnParameters": {
										"id": 2494,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2493,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2503,
												"src": "4994:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2492,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4994:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4993:9:17"
									},
									"scope": 2570,
									"src": "4917:176:17",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										171
									],
									"body": {
										"id": 2544,
										"nodeType": "Block",
										"src": "5472:229:17",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"hexValue": "0f",
															"id": 2522,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "hexString",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5503:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c",
																"typeString": "literal_string hex\"0f\""
															},
															"value": "\u000f"
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2523,
																"name": "_EIP712Name",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2557,
																"src": "5533:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
																	"typeString": "function () view returns (string memory)"
																}
															},
															"id": 2524,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5533:13:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2525,
																"name": "_EIP712Version",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2569,
																"src": "5560:14:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
																	"typeString": "function () view returns (string memory)"
																}
															},
															"id": 2526,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5560:16:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"expression": {
																"id": 2527,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "5590:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 2528,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5596:7:17",
															"memberName": "chainid",
															"nodeType": "MemberAccess",
															"src": "5590:13:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [
																{
																	"id": 2531,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5625:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_EIP712_$2570",
																		"typeString": "contract EIP712"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_EIP712_$2570",
																		"typeString": "contract EIP712"
																	}
																],
																"id": 2530,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5617:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2529,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5617:7:17",
																	"typeDescriptions": {}
																}
															},
															"id": 2532,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5617:13:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2535,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5652:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2534,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5644:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 2533,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "5644:7:17",
																	"typeDescriptions": {}
																}
															},
															"id": 2536,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5644:10:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2540,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5682:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2539,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "5668:13:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (uint256[] memory)"
																},
																"typeName": {
																	"baseType": {
																		"id": 2537,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "5672:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2538,
																	"nodeType": "ArrayTypeName",
																	"src": "5672:9:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																		"typeString": "uint256[]"
																	}
																}
															},
															"id": 2541,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5668:16:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																"typeString": "uint256[] memory"
															}
														}
													],
													"id": 2542,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "5489:205:17",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$_t_address_$_t_bytes32_$_t_array$_t_uint256_$dyn_memory_ptr_$",
														"typeString": "tuple(literal_string hex\"0f\",string memory,string memory,uint256,address,bytes32,uint256[] memory)"
													}
												},
												"functionReturnParameters": 2521,
												"id": 2543,
												"nodeType": "Return",
												"src": "5482:212:17"
											}
										]
									},
									"documentation": {
										"id": 2504,
										"nodeType": "StructuredDocumentation",
										"src": "5099:40:17",
										"text": " @dev See {IERC-5267}."
									},
									"functionSelector": "84b0196e",
									"id": 2545,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "eip712Domain",
									"nameLocation": "5153:12:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2505,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5165:2:17"
									},
									"returnParameters": {
										"id": 2521,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2507,
												"mutability": "mutable",
												"name": "fields",
												"nameLocation": "5249:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 2545,
												"src": "5242:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes1",
													"typeString": "bytes1"
												},
												"typeName": {
													"id": 2506,
													"name": "bytes1",
													"nodeType": "ElementaryTypeName",
													"src": "5242:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2509,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "5283:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2545,
												"src": "5269:18:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2508,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5269:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2511,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "5315:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 2545,
												"src": "5301:21:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2510,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5301:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2513,
												"mutability": "mutable",
												"name": "chainId",
												"nameLocation": "5344:7:17",
												"nodeType": "VariableDeclaration",
												"scope": 2545,
												"src": "5336:15:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2512,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5336:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2515,
												"mutability": "mutable",
												"name": "verifyingContract",
												"nameLocation": "5373:17:17",
												"nodeType": "VariableDeclaration",
												"scope": 2545,
												"src": "5365:25:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2514,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5365:7:17",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2517,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "5412:4:17",
												"nodeType": "VariableDeclaration",
												"scope": 2545,
												"src": "5404:12:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2516,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5404:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2520,
												"mutability": "mutable",
												"name": "extensions",
												"nameLocation": "5447:10:17",
												"nodeType": "VariableDeclaration",
												"scope": 2545,
												"src": "5430:27:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 2518,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "5430:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2519,
													"nodeType": "ArrayTypeName",
													"src": "5430:9:17",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5228:239:17"
									},
									"scope": 2570,
									"src": "5144:557:17",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2556,
										"nodeType": "Block",
										"src": "6082:65:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2553,
															"name": "_nameFallback",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2380,
															"src": "6126:13:17",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														],
														"expression": {
															"id": 2551,
															"name": "_name",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2375,
															"src": "6099:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
																"typeString": "ShortString"
															}
														},
														"id": 2552,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6105:20:17",
														"memberName": "toStringWithFallback",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1598,
														"src": "6099:26:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1419_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$1419_$",
															"typeString": "function (ShortString,string storage pointer) pure returns (string memory)"
														}
													},
													"id": 2554,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6099:41:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2550,
												"id": 2555,
												"nodeType": "Return",
												"src": "6092:48:17"
											}
										]
									},
									"documentation": {
										"id": 2546,
										"nodeType": "StructuredDocumentation",
										"src": "5707:256:17",
										"text": " @dev The name parameter for the EIP712 domain.\n NOTE: By default this function reads _name which is an immutable value.\n It only reads from storage if necessary (in case the value is too large to fit in a ShortString)."
									},
									"id": 2557,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_EIP712Name",
									"nameLocation": "6030:11:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2547,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6041:2:17"
									},
									"returnParameters": {
										"id": 2550,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2549,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2557,
												"src": "6067:13:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2548,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6067:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6066:15:17"
									},
									"scope": 2570,
									"src": "6021:126:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2568,
										"nodeType": "Block",
										"src": "6537:71:17",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2565,
															"name": "_versionFallback",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2382,
															"src": "6584:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														],
														"expression": {
															"id": 2563,
															"name": "_version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2378,
															"src": "6554:8:17",
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1419",
																"typeString": "ShortString"
															}
														},
														"id": 2564,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6563:20:17",
														"memberName": "toStringWithFallback",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1598,
														"src": "6554:29:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1419_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$1419_$",
															"typeString": "function (ShortString,string storage pointer) pure returns (string memory)"
														}
													},
													"id": 2566,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6554:47:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2562,
												"id": 2567,
												"nodeType": "Return",
												"src": "6547:54:17"
											}
										]
									},
									"documentation": {
										"id": 2558,
										"nodeType": "StructuredDocumentation",
										"src": "6153:262:17",
										"text": " @dev The version parameter for the EIP712 domain.\n NOTE: By default this function reads _version which is an immutable value.\n It only reads from storage if necessary (in case the value is too large to fit in a ShortString)."
									},
									"id": 2569,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_EIP712Version",
									"nameLocation": "6482:14:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2559,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6496:2:17"
									},
									"returnParameters": {
										"id": 2562,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2561,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2569,
												"src": "6522:13:17",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2560,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6522:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6521:15:17"
									},
									"scope": 2570,
									"src": "6473:135:17",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2571,
							"src": "1960:4650:17",
							"usedErrors": [
								1427,
								1429
							],
							"usedEvents": [
								152
							]
						}
					],
					"src": "113:6498:17"
				},
				"id": 17
			},
			"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol",
					"exportedSymbols": {
						"MessageHashUtils": [
							2644
						],
						"Strings": [
							1995
						]
					},
					"id": 2645,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2572,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "123:24:18"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Strings.sol",
							"file": "../Strings.sol",
							"id": 2574,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2645,
							"sourceUnit": 1996,
							"src": "149:39:18",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2573,
										"name": "Strings",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1995,
										"src": "157:7:18",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MessageHashUtils",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2575,
								"nodeType": "StructuredDocumentation",
								"src": "190:330:18",
								"text": " @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n The library provides methods for generating a hash of a message that conforms to the\n https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n specifications."
							},
							"fullyImplemented": true,
							"id": 2644,
							"linearizedBaseContracts": [
								2644
							],
							"name": "MessageHashUtils",
							"nameLocation": "529:16:18",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2584,
										"nodeType": "Block",
										"src": "1314:368:18",
										"statements": [
											{
												"AST": {
													"nativeSrc": "1376:300:18",
													"nodeType": "YulBlock",
													"src": "1376:300:18",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1397:4:18",
																		"nodeType": "YulLiteral",
																		"src": "1397:4:18",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a3332",
																		"kind": "string",
																		"nativeSrc": "1403:34:18",
																		"nodeType": "YulLiteral",
																		"src": "1403:34:18",
																		"type": "",
																		"value": "\u0019Ethereum Signed Message:\n32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1390:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "1390:6:18"
																},
																"nativeSrc": "1390:48:18",
																"nodeType": "YulFunctionCall",
																"src": "1390:48:18"
															},
															"nativeSrc": "1390:48:18",
															"nodeType": "YulExpressionStatement",
															"src": "1390:48:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1499:4:18",
																		"nodeType": "YulLiteral",
																		"src": "1499:4:18",
																		"type": "",
																		"value": "0x1c"
																	},
																	{
																		"name": "messageHash",
																		"nativeSrc": "1505:11:18",
																		"nodeType": "YulIdentifier",
																		"src": "1505:11:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1492:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "1492:6:18"
																},
																"nativeSrc": "1492:25:18",
																"nodeType": "YulFunctionCall",
																"src": "1492:25:18"
															},
															"nativeSrc": "1492:25:18",
															"nodeType": "YulExpressionStatement",
															"src": "1492:25:18"
														},
														{
															"nativeSrc": "1571:31:18",
															"nodeType": "YulAssignment",
															"src": "1571:31:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1591:4:18",
																		"nodeType": "YulLiteral",
																		"src": "1591:4:18",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1597:4:18",
																		"nodeType": "YulLiteral",
																		"src": "1597:4:18",
																		"type": "",
																		"value": "0x3c"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "1581:9:18",
																	"nodeType": "YulIdentifier",
																	"src": "1581:9:18"
																},
																"nativeSrc": "1581:21:18",
																"nodeType": "YulFunctionCall",
																"src": "1581:21:18"
															},
															"variableNames": [
																{
																	"name": "digest",
																	"nativeSrc": "1571:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "1571:6:18"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 2581,
														"isOffset": false,
														"isSlot": false,
														"src": "1571:6:18",
														"valueSize": 1
													},
													{
														"declaration": 2578,
														"isOffset": false,
														"isSlot": false,
														"src": "1505:11:18",
														"valueSize": 1
													}
												],
												"id": 2583,
												"nodeType": "InlineAssembly",
												"src": "1367:309:18"
											}
										]
									},
									"documentation": {
										"id": 2576,
										"nodeType": "StructuredDocumentation",
										"src": "552:665:18",
										"text": " @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing a bytes32 `messageHash` with\n `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n keccak256, although any bytes32 value can be safely used because the final digest will\n be re-hashed.\n See {ECDSA-recover}."
									},
									"id": 2585,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "1231:22:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2579,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2578,
												"mutability": "mutable",
												"name": "messageHash",
												"nameLocation": "1262:11:18",
												"nodeType": "VariableDeclaration",
												"scope": 2585,
												"src": "1254:19:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2577,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1254:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1253:21:18"
									},
									"returnParameters": {
										"id": 2582,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2581,
												"mutability": "mutable",
												"name": "digest",
												"nameLocation": "1306:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 2585,
												"src": "1298:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2580,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1298:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1297:16:18"
									},
									"scope": 2644,
									"src": "1222:460:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2610,
										"nodeType": "Block",
										"src": "2234:143:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a",
																	"id": 2597,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2286:32:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	"value": "\u0019Ethereum Signed Message:\n"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"expression": {
																						"id": 2602,
																						"name": "message",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2588,
																						"src": "2343:7:18",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					},
																					"id": 2603,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "2351:6:18",
																					"memberName": "length",
																					"nodeType": "MemberAccess",
																					"src": "2343:14:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 2600,
																					"name": "Strings",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1995,
																					"src": "2326:7:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_Strings_$1995_$",
																						"typeString": "type(library Strings)"
																					}
																				},
																				"id": 2601,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2334:8:18",
																				"memberName": "toString",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1808,
																				"src": "2326:16:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																					"typeString": "function (uint256) pure returns (string memory)"
																				}
																			},
																			"id": 2604,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2326:32:18",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 2599,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2320:5:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 2598,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "2320:5:18",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2605,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2320:39:18",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																{
																	"id": 2606,
																	"name": "message",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2588,
																	"src": "2361:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 2595,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2273:5:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2594,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "2273:5:18",
																		"typeDescriptions": {}
																	}
																},
																"id": 2596,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2279:6:18",
																"memberName": "concat",
																"nodeType": "MemberAccess",
																"src": "2273:12:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2607,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2273:96:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2593,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2263:9:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2608,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2263:107:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2592,
												"id": 2609,
												"nodeType": "Return",
												"src": "2244:126:18"
											}
										]
									},
									"documentation": {
										"id": 2586,
										"nodeType": "StructuredDocumentation",
										"src": "1688:455:18",
										"text": " @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing an arbitrary `message` with\n `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n See {ECDSA-recover}."
									},
									"id": 2611,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "2157:22:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2589,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2588,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "2193:7:18",
												"nodeType": "VariableDeclaration",
												"scope": 2611,
												"src": "2180:20:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2587,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2180:5:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2179:22:18"
									},
									"returnParameters": {
										"id": 2592,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2591,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2611,
												"src": "2225:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2590,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2225:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2224:9:18"
									},
									"scope": 2644,
									"src": "2148:229:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2630,
										"nodeType": "Block",
										"src": "2831:80:18",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "1900",
																	"id": 2624,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "hexString",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2875:10:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	"value": "\u0019\u0000"
																},
																{
																	"id": 2625,
																	"name": "validator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2614,
																	"src": "2887:9:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2626,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2616,
																	"src": "2898:4:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 2622,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2858:3:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2623,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2862:12:18",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "2858:16:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2627,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2858:45:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2621,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2848:9:18",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2628,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2848:56:18",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2620,
												"id": 2629,
												"nodeType": "Return",
												"src": "2841:63:18"
											}
										]
									},
									"documentation": {
										"id": 2612,
										"nodeType": "StructuredDocumentation",
										"src": "2383:332:18",
										"text": " @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x00` (data with intended validator).\n The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n `validator` address. Then hashing the result.\n See {ECDSA-recover}."
									},
									"id": 2631,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toDataWithIntendedValidatorHash",
									"nameLocation": "2729:31:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2617,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2614,
												"mutability": "mutable",
												"name": "validator",
												"nameLocation": "2769:9:18",
												"nodeType": "VariableDeclaration",
												"scope": 2631,
												"src": "2761:17:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2613,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2761:7:18",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2616,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2793:4:18",
												"nodeType": "VariableDeclaration",
												"scope": 2631,
												"src": "2780:17:18",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2615,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2780:5:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2760:38:18"
									},
									"returnParameters": {
										"id": 2620,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2619,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2631,
												"src": "2822:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2618,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2822:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2821:9:18"
									},
									"scope": 2644,
									"src": "2720:191:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2642,
										"nodeType": "Block",
										"src": "3462:292:18",
										"statements": [
											{
												"AST": {
													"nativeSrc": "3524:224:18",
													"nodeType": "YulBlock",
													"src": "3524:224:18",
													"statements": [
														{
															"nativeSrc": "3538:22:18",
															"nodeType": "YulVariableDeclaration",
															"src": "3538:22:18",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "3555:4:18",
																		"nodeType": "YulLiteral",
																		"src": "3555:4:18",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "3549:5:18",
																	"nodeType": "YulIdentifier",
																	"src": "3549:5:18"
																},
																"nativeSrc": "3549:11:18",
																"nodeType": "YulFunctionCall",
																"src": "3549:11:18"
															},
															"variables": [
																{
																	"name": "ptr",
																	"nativeSrc": "3542:3:18",
																	"nodeType": "YulTypedName",
																	"src": "3542:3:18",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "3580:3:18",
																		"nodeType": "YulIdentifier",
																		"src": "3580:3:18"
																	},
																	{
																		"hexValue": "1901",
																		"kind": "string",
																		"nativeSrc": "3585:10:18",
																		"nodeType": "YulLiteral",
																		"src": "3585:10:18",
																		"type": "",
																		"value": "\u0019\u0001"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3573:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "3573:6:18"
																},
																"nativeSrc": "3573:23:18",
																"nodeType": "YulFunctionCall",
																"src": "3573:23:18"
															},
															"nativeSrc": "3573:23:18",
															"nodeType": "YulExpressionStatement",
															"src": "3573:23:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "3620:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "3620:3:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3625:4:18",
																				"nodeType": "YulLiteral",
																				"src": "3625:4:18",
																				"type": "",
																				"value": "0x02"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3616:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "3616:3:18"
																		},
																		"nativeSrc": "3616:14:18",
																		"nodeType": "YulFunctionCall",
																		"src": "3616:14:18"
																	},
																	{
																		"name": "domainSeparator",
																		"nativeSrc": "3632:15:18",
																		"nodeType": "YulIdentifier",
																		"src": "3632:15:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3609:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "3609:6:18"
																},
																"nativeSrc": "3609:39:18",
																"nodeType": "YulFunctionCall",
																"src": "3609:39:18"
															},
															"nativeSrc": "3609:39:18",
															"nodeType": "YulExpressionStatement",
															"src": "3609:39:18"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "3672:3:18",
																				"nodeType": "YulIdentifier",
																				"src": "3672:3:18"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3677:4:18",
																				"nodeType": "YulLiteral",
																				"src": "3677:4:18",
																				"type": "",
																				"value": "0x22"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3668:3:18",
																			"nodeType": "YulIdentifier",
																			"src": "3668:3:18"
																		},
																		"nativeSrc": "3668:14:18",
																		"nodeType": "YulFunctionCall",
																		"src": "3668:14:18"
																	},
																	{
																		"name": "structHash",
																		"nativeSrc": "3684:10:18",
																		"nodeType": "YulIdentifier",
																		"src": "3684:10:18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3661:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "3661:6:18"
																},
																"nativeSrc": "3661:34:18",
																"nodeType": "YulFunctionCall",
																"src": "3661:34:18"
															},
															"nativeSrc": "3661:34:18",
															"nodeType": "YulExpressionStatement",
															"src": "3661:34:18"
														},
														{
															"nativeSrc": "3708:30:18",
															"nodeType": "YulAssignment",
															"src": "3708:30:18",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "3728:3:18",
																		"nodeType": "YulIdentifier",
																		"src": "3728:3:18"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3733:4:18",
																		"nodeType": "YulLiteral",
																		"src": "3733:4:18",
																		"type": "",
																		"value": "0x42"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "3718:9:18",
																	"nodeType": "YulIdentifier",
																	"src": "3718:9:18"
																},
																"nativeSrc": "3718:20:18",
																"nodeType": "YulFunctionCall",
																"src": "3718:20:18"
															},
															"variableNames": [
																{
																	"name": "digest",
																	"nativeSrc": "3708:6:18",
																	"nodeType": "YulIdentifier",
																	"src": "3708:6:18"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 2639,
														"isOffset": false,
														"isSlot": false,
														"src": "3708:6:18",
														"valueSize": 1
													},
													{
														"declaration": 2634,
														"isOffset": false,
														"isSlot": false,
														"src": "3632:15:18",
														"valueSize": 1
													},
													{
														"declaration": 2636,
														"isOffset": false,
														"isSlot": false,
														"src": "3684:10:18",
														"valueSize": 1
													}
												],
												"id": 2641,
												"nodeType": "InlineAssembly",
												"src": "3515:233:18"
											}
										]
									},
									"documentation": {
										"id": 2632,
										"nodeType": "StructuredDocumentation",
										"src": "2917:431:18",
										"text": " @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n See {ECDSA-recover}."
									},
									"id": 2643,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toTypedDataHash",
									"nameLocation": "3362:15:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2637,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2634,
												"mutability": "mutable",
												"name": "domainSeparator",
												"nameLocation": "3386:15:18",
												"nodeType": "VariableDeclaration",
												"scope": 2643,
												"src": "3378:23:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2633,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3378:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2636,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "3411:10:18",
												"nodeType": "VariableDeclaration",
												"scope": 2643,
												"src": "3403:18:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2635,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3403:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3377:45:18"
									},
									"returnParameters": {
										"id": 2640,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2639,
												"mutability": "mutable",
												"name": "digest",
												"nameLocation": "3454:6:18",
												"nodeType": "VariableDeclaration",
												"scope": 2643,
												"src": "3446:14:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2638,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3446:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3445:16:18"
									},
									"scope": 2644,
									"src": "3353:401:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2645,
							"src": "521:3235:18",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "123:3634:18"
				},
				"id": 18
			},
			"@openzeppelin/contracts/utils/math/Math.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							3698
						]
					},
					"id": 3699,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2646,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "103:24:19"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Math",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2647,
								"nodeType": "StructuredDocumentation",
								"src": "129:73:19",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3698,
							"linearizedBaseContracts": [
								3698
							],
							"name": "Math",
							"nameLocation": "211:4:19",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2648,
										"nodeType": "StructuredDocumentation",
										"src": "222:50:19",
										"text": " @dev Muldiv operation overflow."
									},
									"errorSelector": "227bc153",
									"id": 2650,
									"name": "MathOverflowedMulDiv",
									"nameLocation": "283:20:19",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2649,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "303:2:19"
									},
									"src": "277:29:19"
								},
								{
									"canonicalName": "Math.Rounding",
									"id": 2655,
									"members": [
										{
											"id": 2651,
											"name": "Floor",
											"nameLocation": "336:5:19",
											"nodeType": "EnumValue",
											"src": "336:5:19"
										},
										{
											"id": 2652,
											"name": "Ceil",
											"nameLocation": "379:4:19",
											"nodeType": "EnumValue",
											"src": "379:4:19"
										},
										{
											"id": 2653,
											"name": "Trunc",
											"nameLocation": "421:5:19",
											"nodeType": "EnumValue",
											"src": "421:5:19"
										},
										{
											"id": 2654,
											"name": "Expand",
											"nameLocation": "451:6:19",
											"nodeType": "EnumValue",
											"src": "451:6:19"
										}
									],
									"name": "Rounding",
									"nameLocation": "317:8:19",
									"nodeType": "EnumDefinition",
									"src": "312:169:19"
								},
								{
									"body": {
										"id": 2686,
										"nodeType": "Block",
										"src": "661:140:19",
										"statements": [
											{
												"id": 2685,
												"nodeType": "UncheckedBlock",
												"src": "671:124:19",
												"statements": [
													{
														"assignments": [
															2668
														],
														"declarations": [
															{
																"constant": false,
																"id": 2668,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "703:1:19",
																"nodeType": "VariableDeclaration",
																"scope": 2685,
																"src": "695:9:19",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2667,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "695:7:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2672,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2671,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2669,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2658,
																"src": "707:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 2670,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2660,
																"src": "711:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "707:5:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "695:17:19"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2675,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2673,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2668,
																"src": "730:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 2674,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2658,
																"src": "734:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "730:5:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2680,
														"nodeType": "IfStatement",
														"src": "726:28:19",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2676,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "745:5:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2677,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "752:1:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2678,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "744:10:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2666,
															"id": 2679,
															"nodeType": "Return",
															"src": "737:17:19"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2681,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "776:4:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2682,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2668,
																	"src": "782:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2683,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "775:9:19",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2666,
														"id": 2684,
														"nodeType": "Return",
														"src": "768:16:19"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2656,
										"nodeType": "StructuredDocumentation",
										"src": "487:93:19",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag."
									},
									"id": 2687,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nameLocation": "594:6:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2658,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "609:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2687,
												"src": "601:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2657,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "601:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2660,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "620:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2687,
												"src": "612:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2659,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "612:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "600:22:19"
									},
									"returnParameters": {
										"id": 2666,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2663,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2687,
												"src": "646:4:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2662,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "646:4:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2665,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2687,
												"src": "652:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2664,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "645:15:19"
									},
									"scope": 3698,
									"src": "585:216:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2714,
										"nodeType": "Block",
										"src": "984:113:19",
										"statements": [
											{
												"id": 2713,
												"nodeType": "UncheckedBlock",
												"src": "994:97:19",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2701,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2699,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2692,
																"src": "1022:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 2700,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2690,
																"src": "1026:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1022:5:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2706,
														"nodeType": "IfStatement",
														"src": "1018:28:19",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2702,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1037:5:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2703,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1044:1:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2704,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1036:10:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2698,
															"id": 2705,
															"nodeType": "Return",
															"src": "1029:17:19"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2707,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1068:4:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2710,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2708,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2690,
																		"src": "1074:1:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 2709,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2692,
																		"src": "1078:1:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1074:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2711,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1067:13:19",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2698,
														"id": 2712,
														"nodeType": "Return",
														"src": "1060:20:19"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2688,
										"nodeType": "StructuredDocumentation",
										"src": "807:96:19",
										"text": " @dev Returns the subtraction of two unsigned integers, with an overflow flag."
									},
									"id": 2715,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nameLocation": "917:6:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2693,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2690,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "932:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2715,
												"src": "924:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2689,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "924:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2692,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "943:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2715,
												"src": "935:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2691,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "935:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "923:22:19"
									},
									"returnParameters": {
										"id": 2698,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2695,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2715,
												"src": "969:4:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2694,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "969:4:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2697,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2715,
												"src": "975:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2696,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "975:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "968:15:19"
									},
									"scope": 3698,
									"src": "908:189:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2756,
										"nodeType": "Block",
										"src": "1283:417:19",
										"statements": [
											{
												"id": 2755,
												"nodeType": "UncheckedBlock",
												"src": "1293:401:19",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2729,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2727,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2718,
																"src": "1551:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2728,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1556:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1551:6:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2734,
														"nodeType": "IfStatement",
														"src": "1547:28:19",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 2730,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1567:4:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 2731,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1573:1:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2732,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1566:9:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2726,
															"id": 2733,
															"nodeType": "Return",
															"src": "1559:16:19"
														}
													},
													{
														"assignments": [
															2736
														],
														"declarations": [
															{
																"constant": false,
																"id": 2736,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "1597:1:19",
																"nodeType": "VariableDeclaration",
																"scope": 2755,
																"src": "1589:9:19",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2735,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1589:7:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2740,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2739,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2737,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2718,
																"src": "1601:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2738,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2720,
																"src": "1605:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1601:5:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1589:17:19"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2745,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2743,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2741,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2736,
																	"src": "1624:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2742,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2718,
																	"src": "1628:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1624:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 2744,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2720,
																"src": "1633:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1624:10:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2750,
														"nodeType": "IfStatement",
														"src": "1620:33:19",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2746,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1644:5:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2747,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1651:1:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2748,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1643:10:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2726,
															"id": 2749,
															"nodeType": "Return",
															"src": "1636:17:19"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2751,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1675:4:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2752,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2736,
																	"src": "1681:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2753,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1674:9:19",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2726,
														"id": 2754,
														"nodeType": "Return",
														"src": "1667:16:19"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2716,
										"nodeType": "StructuredDocumentation",
										"src": "1103:99:19",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag."
									},
									"id": 2757,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nameLocation": "1216:6:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2721,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2718,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1231:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2757,
												"src": "1223:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2717,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2720,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1242:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2757,
												"src": "1234:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2719,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1222:22:19"
									},
									"returnParameters": {
										"id": 2726,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2723,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2757,
												"src": "1268:4:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2722,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1268:4:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2725,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2757,
												"src": "1274:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2724,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1274:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1267:15:19"
									},
									"scope": 3698,
									"src": "1207:493:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2784,
										"nodeType": "Block",
										"src": "1887:114:19",
										"statements": [
											{
												"id": 2783,
												"nodeType": "UncheckedBlock",
												"src": "1897:98:19",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2771,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2769,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2762,
																"src": "1925:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2770,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1930:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1925:6:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2776,
														"nodeType": "IfStatement",
														"src": "1921:29:19",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2772,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1941:5:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2773,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1948:1:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2774,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1940:10:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2768,
															"id": 2775,
															"nodeType": "Return",
															"src": "1933:17:19"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2777,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1972:4:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2780,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2778,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2760,
																		"src": "1978:1:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2779,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2762,
																		"src": "1982:1:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1978:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2781,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1971:13:19",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2768,
														"id": 2782,
														"nodeType": "Return",
														"src": "1964:20:19"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2758,
										"nodeType": "StructuredDocumentation",
										"src": "1706:100:19",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag."
									},
									"id": 2785,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nameLocation": "1820:6:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2763,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2760,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1835:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2785,
												"src": "1827:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2759,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1827:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2762,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1846:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2785,
												"src": "1838:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2761,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1838:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1826:22:19"
									},
									"returnParameters": {
										"id": 2768,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2765,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2785,
												"src": "1872:4:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2764,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1872:4:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2767,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2785,
												"src": "1878:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2766,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1878:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1871:15:19"
									},
									"scope": 3698,
									"src": "1811:190:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2812,
										"nodeType": "Block",
										"src": "2198:114:19",
										"statements": [
											{
												"id": 2811,
												"nodeType": "UncheckedBlock",
												"src": "2208:98:19",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2799,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2797,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2790,
																"src": "2236:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2798,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2241:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2236:6:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2804,
														"nodeType": "IfStatement",
														"src": "2232:29:19",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2800,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2252:5:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2801,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2259:1:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2802,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2251:10:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2796,
															"id": 2803,
															"nodeType": "Return",
															"src": "2244:17:19"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2805,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2283:4:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2808,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2806,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2788,
																		"src": "2289:1:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 2807,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2790,
																		"src": "2293:1:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2289:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2809,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2282:13:19",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2796,
														"id": 2810,
														"nodeType": "Return",
														"src": "2275:20:19"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2786,
										"nodeType": "StructuredDocumentation",
										"src": "2007:110:19",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."
									},
									"id": 2813,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nameLocation": "2131:6:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2791,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2788,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2146:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2813,
												"src": "2138:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2787,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2138:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2790,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2157:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2813,
												"src": "2149:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2789,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2149:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2137:22:19"
									},
									"returnParameters": {
										"id": 2796,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2793,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2813,
												"src": "2183:4:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2792,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2183:4:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2795,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2813,
												"src": "2189:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2794,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2189:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2182:15:19"
									},
									"scope": 3698,
									"src": "2122:190:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2830,
										"nodeType": "Block",
										"src": "2449:37:19",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2825,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2823,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2816,
															"src": "2466:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 2824,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2818,
															"src": "2470:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2466:5:19",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2827,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2818,
														"src": "2478:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2828,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2466:13:19",
													"trueExpression": {
														"id": 2826,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2816,
														"src": "2474:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2822,
												"id": 2829,
												"nodeType": "Return",
												"src": "2459:20:19"
											}
										]
									},
									"documentation": {
										"id": 2814,
										"nodeType": "StructuredDocumentation",
										"src": "2318:59:19",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 2831,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "2391:3:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2819,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2816,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2403:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2831,
												"src": "2395:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2815,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2395:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2818,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2414:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2831,
												"src": "2406:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2817,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2406:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2394:22:19"
									},
									"returnParameters": {
										"id": 2822,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2821,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2831,
												"src": "2440:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2820,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2440:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2439:9:19"
									},
									"scope": 3698,
									"src": "2382:104:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2848,
										"nodeType": "Block",
										"src": "2624:37:19",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2843,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2841,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2834,
															"src": "2641:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 2842,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2836,
															"src": "2645:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2641:5:19",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2845,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2836,
														"src": "2653:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2846,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2641:13:19",
													"trueExpression": {
														"id": 2844,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2834,
														"src": "2649:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2840,
												"id": 2847,
												"nodeType": "Return",
												"src": "2634:20:19"
											}
										]
									},
									"documentation": {
										"id": 2832,
										"nodeType": "StructuredDocumentation",
										"src": "2492:60:19",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 2849,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "2566:3:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2837,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2834,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2578:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2849,
												"src": "2570:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2833,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2836,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2589:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2849,
												"src": "2581:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2835,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2581:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:22:19"
									},
									"returnParameters": {
										"id": 2840,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2839,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2849,
												"src": "2615:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2838,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2615:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2614:9:19"
									},
									"scope": 3698,
									"src": "2557:104:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2871,
										"nodeType": "Block",
										"src": "2845:82:19",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2869,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2861,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2859,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2852,
																	"src": "2900:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 2860,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2854,
																	"src": "2904:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2900:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2862,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2899:7:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2868,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2865,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2863,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2852,
																		"src": "2910:1:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 2864,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2854,
																		"src": "2914:1:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2910:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2866,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2909:7:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 2867,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2919:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "2909:11:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2899:21:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2858,
												"id": 2870,
												"nodeType": "Return",
												"src": "2892:28:19"
											}
										]
									},
									"documentation": {
										"id": 2850,
										"nodeType": "StructuredDocumentation",
										"src": "2667:102:19",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 2872,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "2783:7:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2855,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2852,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2799:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2872,
												"src": "2791:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2851,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2791:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2854,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2810:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2872,
												"src": "2802:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2853,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2802:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2790:22:19"
									},
									"returnParameters": {
										"id": 2858,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2857,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2872,
												"src": "2836:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2856,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2836:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2835:9:19"
									},
									"scope": 3698,
									"src": "2774:153:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2905,
										"nodeType": "Block",
										"src": "3219:260:19",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2884,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2882,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2877,
														"src": "3233:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2883,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3238:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3233:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2890,
												"nodeType": "IfStatement",
												"src": "3229:127:19",
												"trueBody": {
													"id": 2889,
													"nodeType": "Block",
													"src": "3241:115:19",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2887,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2885,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2875,
																	"src": "3340:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2886,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2877,
																	"src": "3344:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3340:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 2881,
															"id": 2888,
															"nodeType": "Return",
															"src": "3333:12:19"
														}
													]
												}
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2893,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2891,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2875,
															"src": "3444:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 2892,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3449:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "3444:6:19",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2902,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2900,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2897,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2895,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2875,
																			"src": "3458:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 2896,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3462:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3458:5:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2898,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3457:7:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 2899,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2877,
																"src": "3467:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3457:11:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 2901,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3471:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "3457:15:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2903,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "3444:28:19",
													"trueExpression": {
														"hexValue": "30",
														"id": 2894,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3453:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2881,
												"id": 2904,
												"nodeType": "Return",
												"src": "3437:35:19"
											}
										]
									},
									"documentation": {
										"id": 2873,
										"nodeType": "StructuredDocumentation",
										"src": "2933:210:19",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."
									},
									"id": 2906,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "3157:7:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2878,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2875,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3173:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2906,
												"src": "3165:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2874,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3165:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2877,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3184:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 2906,
												"src": "3176:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2876,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3176:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3164:22:19"
									},
									"returnParameters": {
										"id": 2881,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2880,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2906,
												"src": "3210:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2879,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3210:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3209:9:19"
									},
									"scope": 3698,
									"src": "3148:331:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3031,
										"nodeType": "Block",
										"src": "3901:4018:19",
										"statements": [
											{
												"id": 3030,
												"nodeType": "UncheckedBlock",
												"src": "3911:4002:19",
												"statements": [
													{
														"assignments": [
															2919
														],
														"declarations": [
															{
																"constant": false,
																"id": 2919,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "4240:5:19",
																"nodeType": "VariableDeclaration",
																"scope": 3030,
																"src": "4232:13:19",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2918,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4232:7:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2923,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2922,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2920,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2909,
																"src": "4248:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2921,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2911,
																"src": "4252:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4248:5:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4232:21:19"
													},
													{
														"assignments": [
															2925
														],
														"declarations": [
															{
																"constant": false,
																"id": 2925,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "4320:5:19",
																"nodeType": "VariableDeclaration",
																"scope": 3030,
																"src": "4312:13:19",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2924,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4312:7:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2926,
														"nodeType": "VariableDeclarationStatement",
														"src": "4312:13:19"
													},
													{
														"AST": {
															"nativeSrc": "4392:122:19",
															"nodeType": "YulBlock",
															"src": "4392:122:19",
															"statements": [
																{
																	"nativeSrc": "4410:30:19",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4410:30:19",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nativeSrc": "4427:1:19",
																				"nodeType": "YulIdentifier",
																				"src": "4427:1:19"
																			},
																			{
																				"name": "y",
																				"nativeSrc": "4430:1:19",
																				"nodeType": "YulIdentifier",
																				"src": "4430:1:19"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "4437:1:19",
																						"nodeType": "YulLiteral",
																						"src": "4437:1:19",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "4433:3:19",
																					"nodeType": "YulIdentifier",
																					"src": "4433:3:19"
																				},
																				"nativeSrc": "4433:6:19",
																				"nodeType": "YulFunctionCall",
																				"src": "4433:6:19"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nativeSrc": "4420:6:19",
																			"nodeType": "YulIdentifier",
																			"src": "4420:6:19"
																		},
																		"nativeSrc": "4420:20:19",
																		"nodeType": "YulFunctionCall",
																		"src": "4420:20:19"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nativeSrc": "4414:2:19",
																			"nodeType": "YulTypedName",
																			"src": "4414:2:19",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4457:43:19",
																	"nodeType": "YulAssignment",
																	"src": "4457:43:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nativeSrc": "4474:2:19",
																						"nodeType": "YulIdentifier",
																						"src": "4474:2:19"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "4478:5:19",
																						"nodeType": "YulIdentifier",
																						"src": "4478:5:19"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "4470:3:19",
																					"nodeType": "YulIdentifier",
																					"src": "4470:3:19"
																				},
																				"nativeSrc": "4470:14:19",
																				"nodeType": "YulFunctionCall",
																				"src": "4470:14:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nativeSrc": "4489:2:19",
																						"nodeType": "YulIdentifier",
																						"src": "4489:2:19"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "4493:5:19",
																						"nodeType": "YulIdentifier",
																						"src": "4493:5:19"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "4486:2:19",
																					"nodeType": "YulIdentifier",
																					"src": "4486:2:19"
																				},
																				"nativeSrc": "4486:13:19",
																				"nodeType": "YulFunctionCall",
																				"src": "4486:13:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4466:3:19",
																			"nodeType": "YulIdentifier",
																			"src": "4466:3:19"
																		},
																		"nativeSrc": "4466:34:19",
																		"nodeType": "YulFunctionCall",
																		"src": "4466:34:19"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nativeSrc": "4457:5:19",
																			"nodeType": "YulIdentifier",
																			"src": "4457:5:19"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 2919,
																"isOffset": false,
																"isSlot": false,
																"src": "4478:5:19",
																"valueSize": 1
															},
															{
																"declaration": 2919,
																"isOffset": false,
																"isSlot": false,
																"src": "4493:5:19",
																"valueSize": 1
															},
															{
																"declaration": 2925,
																"isOffset": false,
																"isSlot": false,
																"src": "4457:5:19",
																"valueSize": 1
															},
															{
																"declaration": 2909,
																"isOffset": false,
																"isSlot": false,
																"src": "4427:1:19",
																"valueSize": 1
															},
															{
																"declaration": 2911,
																"isOffset": false,
																"isSlot": false,
																"src": "4430:1:19",
																"valueSize": 1
															}
														],
														"id": 2927,
														"nodeType": "InlineAssembly",
														"src": "4383:131:19"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2930,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2928,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2925,
																"src": "4595:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2929,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4604:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4595:10:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2936,
														"nodeType": "IfStatement",
														"src": "4591:368:19",
														"trueBody": {
															"id": 2935,
															"nodeType": "Block",
															"src": "4607:352:19",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2933,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2931,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2919,
																			"src": "4925:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 2932,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2913,
																			"src": "4933:11:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4925:19:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 2917,
																	"id": 2934,
																	"nodeType": "Return",
																	"src": "4918:26:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2939,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2937,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2913,
																"src": "5065:11:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 2938,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2925,
																"src": "5080:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5065:20:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2944,
														"nodeType": "IfStatement",
														"src": "5061:88:19",
														"trueBody": {
															"id": 2943,
															"nodeType": "Block",
															"src": "5087:62:19",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 2940,
																			"name": "MathOverflowedMulDiv",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2650,
																			"src": "5112:20:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																				"typeString": "function () pure returns (error)"
																			}
																		},
																		"id": 2941,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5112:22:19",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_error",
																			"typeString": "error"
																		}
																	},
																	"id": 2942,
																	"nodeType": "RevertStatement",
																	"src": "5105:29:19"
																}
															]
														}
													},
													{
														"assignments": [
															2946
														],
														"declarations": [
															{
																"constant": false,
																"id": 2946,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "5412:9:19",
																"nodeType": "VariableDeclaration",
																"scope": 3030,
																"src": "5404:17:19",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2945,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5404:7:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2947,
														"nodeType": "VariableDeclarationStatement",
														"src": "5404:17:19"
													},
													{
														"AST": {
															"nativeSrc": "5444:291:19",
															"nodeType": "YulBlock",
															"src": "5444:291:19",
															"statements": [
																{
																	"nativeSrc": "5513:38:19",
																	"nodeType": "YulAssignment",
																	"src": "5513:38:19",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nativeSrc": "5533:1:19",
																				"nodeType": "YulIdentifier",
																				"src": "5533:1:19"
																			},
																			{
																				"name": "y",
																				"nativeSrc": "5536:1:19",
																				"nodeType": "YulIdentifier",
																				"src": "5536:1:19"
																			},
																			{
																				"name": "denominator",
																				"nativeSrc": "5539:11:19",
																				"nodeType": "YulIdentifier",
																				"src": "5539:11:19"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nativeSrc": "5526:6:19",
																			"nodeType": "YulIdentifier",
																			"src": "5526:6:19"
																		},
																		"nativeSrc": "5526:25:19",
																		"nodeType": "YulFunctionCall",
																		"src": "5526:25:19"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nativeSrc": "5513:9:19",
																			"nodeType": "YulIdentifier",
																			"src": "5513:9:19"
																		}
																	]
																},
																{
																	"nativeSrc": "5633:41:19",
																	"nodeType": "YulAssignment",
																	"src": "5633:41:19",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nativeSrc": "5646:5:19",
																				"nodeType": "YulIdentifier",
																				"src": "5646:5:19"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nativeSrc": "5656:9:19",
																						"nodeType": "YulIdentifier",
																						"src": "5656:9:19"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "5667:5:19",
																						"nodeType": "YulIdentifier",
																						"src": "5667:5:19"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nativeSrc": "5653:2:19",
																					"nodeType": "YulIdentifier",
																					"src": "5653:2:19"
																				},
																				"nativeSrc": "5653:20:19",
																				"nodeType": "YulFunctionCall",
																				"src": "5653:20:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5642:3:19",
																			"nodeType": "YulIdentifier",
																			"src": "5642:3:19"
																		},
																		"nativeSrc": "5642:32:19",
																		"nodeType": "YulFunctionCall",
																		"src": "5642:32:19"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nativeSrc": "5633:5:19",
																			"nodeType": "YulIdentifier",
																			"src": "5633:5:19"
																		}
																	]
																},
																{
																	"nativeSrc": "5691:30:19",
																	"nodeType": "YulAssignment",
																	"src": "5691:30:19",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nativeSrc": "5704:5:19",
																				"nodeType": "YulIdentifier",
																				"src": "5704:5:19"
																			},
																			{
																				"name": "remainder",
																				"nativeSrc": "5711:9:19",
																				"nodeType": "YulIdentifier",
																				"src": "5711:9:19"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5700:3:19",
																			"nodeType": "YulIdentifier",
																			"src": "5700:3:19"
																		},
																		"nativeSrc": "5700:21:19",
																		"nodeType": "YulFunctionCall",
																		"src": "5700:21:19"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nativeSrc": "5691:5:19",
																			"nodeType": "YulIdentifier",
																			"src": "5691:5:19"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 2913,
																"isOffset": false,
																"isSlot": false,
																"src": "5539:11:19",
																"valueSize": 1
															},
															{
																"declaration": 2919,
																"isOffset": false,
																"isSlot": false,
																"src": "5667:5:19",
																"valueSize": 1
															},
															{
																"declaration": 2919,
																"isOffset": false,
																"isSlot": false,
																"src": "5691:5:19",
																"valueSize": 1
															},
															{
																"declaration": 2919,
																"isOffset": false,
																"isSlot": false,
																"src": "5704:5:19",
																"valueSize": 1
															},
															{
																"declaration": 2925,
																"isOffset": false,
																"isSlot": false,
																"src": "5633:5:19",
																"valueSize": 1
															},
															{
																"declaration": 2925,
																"isOffset": false,
																"isSlot": false,
																"src": "5646:5:19",
																"valueSize": 1
															},
															{
																"declaration": 2946,
																"isOffset": false,
																"isSlot": false,
																"src": "5513:9:19",
																"valueSize": 1
															},
															{
																"declaration": 2946,
																"isOffset": false,
																"isSlot": false,
																"src": "5656:9:19",
																"valueSize": 1
															},
															{
																"declaration": 2946,
																"isOffset": false,
																"isSlot": false,
																"src": "5711:9:19",
																"valueSize": 1
															},
															{
																"declaration": 2909,
																"isOffset": false,
																"isSlot": false,
																"src": "5533:1:19",
																"valueSize": 1
															},
															{
																"declaration": 2911,
																"isOffset": false,
																"isSlot": false,
																"src": "5536:1:19",
																"valueSize": 1
															}
														],
														"id": 2948,
														"nodeType": "InlineAssembly",
														"src": "5435:300:19"
													},
													{
														"assignments": [
															2950
														],
														"declarations": [
															{
																"constant": false,
																"id": 2950,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "5947:4:19",
																"nodeType": "VariableDeclaration",
																"scope": 3030,
																"src": "5939:12:19",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2949,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5939:7:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2957,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2956,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2951,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2913,
																"src": "5954:11:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2954,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "30",
																			"id": 2952,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5969:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 2953,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2913,
																			"src": "5973:11:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5969:15:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2955,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5968:17:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5954:31:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "5939:46:19"
													},
													{
														"AST": {
															"nativeSrc": "6008:362:19",
															"nodeType": "YulBlock",
															"src": "6008:362:19",
															"statements": [
																{
																	"nativeSrc": "6073:37:19",
																	"nodeType": "YulAssignment",
																	"src": "6073:37:19",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nativeSrc": "6092:11:19",
																				"nodeType": "YulIdentifier",
																				"src": "6092:11:19"
																			},
																			{
																				"name": "twos",
																				"nativeSrc": "6105:4:19",
																				"nodeType": "YulIdentifier",
																				"src": "6105:4:19"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "6088:3:19",
																			"nodeType": "YulIdentifier",
																			"src": "6088:3:19"
																		},
																		"nativeSrc": "6088:22:19",
																		"nodeType": "YulFunctionCall",
																		"src": "6088:22:19"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nativeSrc": "6073:11:19",
																			"nodeType": "YulIdentifier",
																			"src": "6073:11:19"
																		}
																	]
																},
																{
																	"nativeSrc": "6177:25:19",
																	"nodeType": "YulAssignment",
																	"src": "6177:25:19",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nativeSrc": "6190:5:19",
																				"nodeType": "YulIdentifier",
																				"src": "6190:5:19"
																			},
																			{
																				"name": "twos",
																				"nativeSrc": "6197:4:19",
																				"nodeType": "YulIdentifier",
																				"src": "6197:4:19"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "6186:3:19",
																			"nodeType": "YulIdentifier",
																			"src": "6186:3:19"
																		},
																		"nativeSrc": "6186:16:19",
																		"nodeType": "YulFunctionCall",
																		"src": "6186:16:19"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nativeSrc": "6177:5:19",
																			"nodeType": "YulIdentifier",
																			"src": "6177:5:19"
																		}
																	]
																},
																{
																	"nativeSrc": "6317:39:19",
																	"nodeType": "YulAssignment",
																	"src": "6317:39:19",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "6337:1:19",
																								"nodeType": "YulLiteral",
																								"src": "6337:1:19",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nativeSrc": "6340:4:19",
																								"nodeType": "YulIdentifier",
																								"src": "6340:4:19"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "6333:3:19",
																							"nodeType": "YulIdentifier",
																							"src": "6333:3:19"
																						},
																						"nativeSrc": "6333:12:19",
																						"nodeType": "YulFunctionCall",
																						"src": "6333:12:19"
																					},
																					{
																						"name": "twos",
																						"nativeSrc": "6347:4:19",
																						"nodeType": "YulIdentifier",
																						"src": "6347:4:19"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nativeSrc": "6329:3:19",
																					"nodeType": "YulIdentifier",
																					"src": "6329:3:19"
																				},
																				"nativeSrc": "6329:23:19",
																				"nodeType": "YulFunctionCall",
																				"src": "6329:23:19"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6354:1:19",
																				"nodeType": "YulLiteral",
																				"src": "6354:1:19",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6325:3:19",
																			"nodeType": "YulIdentifier",
																			"src": "6325:3:19"
																		},
																		"nativeSrc": "6325:31:19",
																		"nodeType": "YulFunctionCall",
																		"src": "6325:31:19"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nativeSrc": "6317:4:19",
																			"nodeType": "YulIdentifier",
																			"src": "6317:4:19"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 2913,
																"isOffset": false,
																"isSlot": false,
																"src": "6073:11:19",
																"valueSize": 1
															},
															{
																"declaration": 2913,
																"isOffset": false,
																"isSlot": false,
																"src": "6092:11:19",
																"valueSize": 1
															},
															{
																"declaration": 2919,
																"isOffset": false,
																"isSlot": false,
																"src": "6177:5:19",
																"valueSize": 1
															},
															{
																"declaration": 2919,
																"isOffset": false,
																"isSlot": false,
																"src": "6190:5:19",
																"valueSize": 1
															},
															{
																"declaration": 2950,
																"isOffset": false,
																"isSlot": false,
																"src": "6105:4:19",
																"valueSize": 1
															},
															{
																"declaration": 2950,
																"isOffset": false,
																"isSlot": false,
																"src": "6197:4:19",
																"valueSize": 1
															},
															{
																"declaration": 2950,
																"isOffset": false,
																"isSlot": false,
																"src": "6317:4:19",
																"valueSize": 1
															},
															{
																"declaration": 2950,
																"isOffset": false,
																"isSlot": false,
																"src": "6340:4:19",
																"valueSize": 1
															},
															{
																"declaration": 2950,
																"isOffset": false,
																"isSlot": false,
																"src": "6347:4:19",
																"valueSize": 1
															}
														],
														"id": 2958,
														"nodeType": "InlineAssembly",
														"src": "5999:371:19"
													},
													{
														"expression": {
															"id": 2963,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2959,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2919,
																"src": "6436:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2962,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2960,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2925,
																	"src": "6445:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2961,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2950,
																	"src": "6453:4:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6445:12:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6436:21:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2964,
														"nodeType": "ExpressionStatement",
														"src": "6436:21:19"
													},
													{
														"assignments": [
															2966
														],
														"declarations": [
															{
																"constant": false,
																"id": 2966,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "6783:7:19",
																"nodeType": "VariableDeclaration",
																"scope": 3030,
																"src": "6775:15:19",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2965,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "6775:7:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2973,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2972,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2969,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 2967,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6794:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 2968,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2913,
																			"src": "6798:11:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6794:15:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2970,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6793:17:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 2971,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6813:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "6793:21:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "6775:39:19"
													},
													{
														"expression": {
															"id": 2980,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2974,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2966,
																"src": "7031:7:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2979,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2975,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7042:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2978,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2976,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2913,
																		"src": "7046:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2977,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2966,
																		"src": "7060:7:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7046:21:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7042:25:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7031:36:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2981,
														"nodeType": "ExpressionStatement",
														"src": "7031:36:19"
													},
													{
														"expression": {
															"id": 2988,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2982,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2966,
																"src": "7100:7:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2987,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2983,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7111:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2986,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2984,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2913,
																		"src": "7115:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2985,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2966,
																		"src": "7129:7:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7115:21:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7111:25:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7100:36:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2989,
														"nodeType": "ExpressionStatement",
														"src": "7100:36:19"
													},
													{
														"expression": {
															"id": 2996,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2990,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2966,
																"src": "7170:7:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2995,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2991,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7181:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2994,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2992,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2913,
																		"src": "7185:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2993,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2966,
																		"src": "7199:7:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7185:21:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7181:25:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7170:36:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2997,
														"nodeType": "ExpressionStatement",
														"src": "7170:36:19"
													},
													{
														"expression": {
															"id": 3004,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2998,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2966,
																"src": "7240:7:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3003,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2999,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7251:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3002,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3000,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2913,
																		"src": "7255:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 3001,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2966,
																		"src": "7269:7:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7255:21:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7251:25:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7240:36:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3005,
														"nodeType": "ExpressionStatement",
														"src": "7240:36:19"
													},
													{
														"expression": {
															"id": 3012,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3006,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2966,
																"src": "7310:7:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3011,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 3007,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7321:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3010,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3008,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2913,
																		"src": "7325:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 3009,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2966,
																		"src": "7339:7:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7325:21:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7321:25:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7310:36:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3013,
														"nodeType": "ExpressionStatement",
														"src": "7310:36:19"
													},
													{
														"expression": {
															"id": 3020,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3014,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2966,
																"src": "7381:7:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3019,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 3015,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7392:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3018,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3016,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2913,
																		"src": "7396:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 3017,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2966,
																		"src": "7410:7:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7396:21:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7392:25:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7381:36:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3021,
														"nodeType": "ExpressionStatement",
														"src": "7381:36:19"
													},
													{
														"expression": {
															"id": 3026,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3022,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2916,
																"src": "7851:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3025,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3023,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2919,
																	"src": "7860:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 3024,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2966,
																	"src": "7868:7:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7860:15:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7851:24:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3027,
														"nodeType": "ExpressionStatement",
														"src": "7851:24:19"
													},
													{
														"expression": {
															"id": 3028,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2916,
															"src": "7896:6:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2917,
														"id": 3029,
														"nodeType": "Return",
														"src": "7889:13:19"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2907,
										"nodeType": "StructuredDocumentation",
										"src": "3485:313:19",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."
									},
									"id": 3032,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "3812:6:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2914,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2909,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "3827:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 3032,
												"src": "3819:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2908,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3819:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2911,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "3838:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 3032,
												"src": "3830:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2910,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3830:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2913,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "3849:11:19",
												"nodeType": "VariableDeclaration",
												"scope": 3032,
												"src": "3841:19:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2912,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3841:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3818:43:19"
									},
									"returnParameters": {
										"id": 2917,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2916,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "3893:6:19",
												"nodeType": "VariableDeclaration",
												"scope": 3032,
												"src": "3885:14:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2915,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3885:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3884:16:19"
									},
									"scope": 3698,
									"src": "3803:4116:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3074,
										"nodeType": "Block",
										"src": "8161:192:19",
										"statements": [
											{
												"assignments": [
													3048
												],
												"declarations": [
													{
														"constant": false,
														"id": 3048,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8179:6:19",
														"nodeType": "VariableDeclaration",
														"scope": 3074,
														"src": "8171:14:19",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3047,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8171:7:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3054,
												"initialValue": {
													"arguments": [
														{
															"id": 3050,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3035,
															"src": "8195:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 3051,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3037,
															"src": "8198:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 3052,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3039,
															"src": "8201:11:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3049,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															3032,
															3075
														],
														"referencedDeclaration": 3032,
														"src": "8188:6:19",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 3053,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8188:25:19",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8171:42:19"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 3065,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 3056,
																"name": "rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3042,
																"src": "8244:8:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Rounding_$2655",
																	"typeString": "enum Math.Rounding"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_enum$_Rounding_$2655",
																	"typeString": "enum Math.Rounding"
																}
															],
															"id": 3055,
															"name": "unsignedRoundsUp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3697,
															"src": "8227:16:19",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2655_$returns$_t_bool_$",
																"typeString": "function (enum Math.Rounding) pure returns (bool)"
															}
														},
														"id": 3057,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8227:26:19",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 3064,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 3059,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3035,
																	"src": "8264:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 3060,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3037,
																	"src": "8267:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 3061,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3039,
																	"src": "8270:11:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3058,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "8257:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 3062,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8257:25:19",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 3063,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8285:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8257:29:19",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "8227:59:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3071,
												"nodeType": "IfStatement",
												"src": "8223:101:19",
												"trueBody": {
													"id": 3070,
													"nodeType": "Block",
													"src": "8288:36:19",
													"statements": [
														{
															"expression": {
																"id": 3068,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 3066,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3048,
																	"src": "8302:6:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 3067,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8312:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8302:11:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 3069,
															"nodeType": "ExpressionStatement",
															"src": "8302:11:19"
														}
													]
												}
											},
											{
												"expression": {
													"id": 3072,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3048,
													"src": "8340:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3046,
												"id": 3073,
												"nodeType": "Return",
												"src": "8333:13:19"
											}
										]
									},
									"documentation": {
										"id": 3033,
										"nodeType": "StructuredDocumentation",
										"src": "7925:121:19",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 3075,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "8060:6:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3043,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3035,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "8075:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 3075,
												"src": "8067:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3034,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8067:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3037,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "8086:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 3075,
												"src": "8078:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3036,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8078:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3039,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "8097:11:19",
												"nodeType": "VariableDeclaration",
												"scope": 3075,
												"src": "8089:19:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3038,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8089:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3042,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "8119:8:19",
												"nodeType": "VariableDeclaration",
												"scope": 3075,
												"src": "8110:17:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2655",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3041,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3040,
														"name": "Rounding",
														"nameLocations": [
															"8110:8:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2655,
														"src": "8110:8:19"
													},
													"referencedDeclaration": 2655,
													"src": "8110:8:19",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2655",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8066:62:19"
									},
									"returnParameters": {
										"id": 3046,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3045,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3075,
												"src": "8152:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3044,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8152:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8151:9:19"
									},
									"scope": 3698,
									"src": "8051:302:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3186,
										"nodeType": "Block",
										"src": "8644:1585:19",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3085,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3083,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3078,
														"src": "8658:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 3084,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8663:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8658:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 3089,
												"nodeType": "IfStatement",
												"src": "8654:45:19",
												"trueBody": {
													"id": 3088,
													"nodeType": "Block",
													"src": "8666:33:19",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 3086,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8687:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 3082,
															"id": 3087,
															"nodeType": "Return",
															"src": "8680:8:19"
														}
													]
												}
											},
											{
												"assignments": [
													3091
												],
												"declarations": [
													{
														"constant": false,
														"id": 3091,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "9386:6:19",
														"nodeType": "VariableDeclaration",
														"scope": 3186,
														"src": "9378:14:19",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3090,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9378:7:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3100,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 3099,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 3092,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9395:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3097,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 3094,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3078,
																			"src": "9406:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 3093,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			3354,
																			3389
																		],
																		"referencedDeclaration": 3354,
																		"src": "9401:4:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 3095,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9401:7:19",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3096,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9412:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9401:12:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 3098,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9400:14:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9395:19:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9378:36:19"
											},
											{
												"id": 3185,
												"nodeType": "UncheckedBlock",
												"src": "9815:408:19",
												"statements": [
													{
														"expression": {
															"id": 3110,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3101,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3091,
																"src": "9839:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3109,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3106,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3102,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3091,
																				"src": "9849:6:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3105,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3103,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3078,
																					"src": "9858:1:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3104,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3091,
																					"src": "9862:6:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9858:10:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9849:19:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3107,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9848:21:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3108,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9873:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9848:26:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9839:35:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3111,
														"nodeType": "ExpressionStatement",
														"src": "9839:35:19"
													},
													{
														"expression": {
															"id": 3121,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3112,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3091,
																"src": "9888:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3120,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3117,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3113,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3091,
																				"src": "9898:6:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3116,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3114,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3078,
																					"src": "9907:1:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3115,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3091,
																					"src": "9911:6:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9907:10:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9898:19:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3118,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9897:21:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3119,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9922:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9897:26:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9888:35:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3122,
														"nodeType": "ExpressionStatement",
														"src": "9888:35:19"
													},
													{
														"expression": {
															"id": 3132,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3123,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3091,
																"src": "9937:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3131,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3128,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3124,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3091,
																				"src": "9947:6:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3127,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3125,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3078,
																					"src": "9956:1:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3126,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3091,
																					"src": "9960:6:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9956:10:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9947:19:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3129,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9946:21:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3130,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9971:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9946:26:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9937:35:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3133,
														"nodeType": "ExpressionStatement",
														"src": "9937:35:19"
													},
													{
														"expression": {
															"id": 3143,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3134,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3091,
																"src": "9986:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3142,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3139,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3135,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3091,
																				"src": "9996:6:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3138,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3136,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3078,
																					"src": "10005:1:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3137,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3091,
																					"src": "10009:6:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10005:10:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9996:19:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3140,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9995:21:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3141,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10020:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9995:26:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9986:35:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3144,
														"nodeType": "ExpressionStatement",
														"src": "9986:35:19"
													},
													{
														"expression": {
															"id": 3154,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3145,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3091,
																"src": "10035:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3153,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3150,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3146,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3091,
																				"src": "10045:6:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3149,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3147,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3078,
																					"src": "10054:1:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3148,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3091,
																					"src": "10058:6:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10054:10:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10045:19:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3151,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10044:21:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3152,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10069:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10044:26:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10035:35:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3155,
														"nodeType": "ExpressionStatement",
														"src": "10035:35:19"
													},
													{
														"expression": {
															"id": 3165,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3156,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3091,
																"src": "10084:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3164,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3161,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3157,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3091,
																				"src": "10094:6:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3160,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3158,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3078,
																					"src": "10103:1:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3159,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3091,
																					"src": "10107:6:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10103:10:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10094:19:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3162,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10093:21:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3163,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10118:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10093:26:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10084:35:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3166,
														"nodeType": "ExpressionStatement",
														"src": "10084:35:19"
													},
													{
														"expression": {
															"id": 3176,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3167,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3091,
																"src": "10133:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3175,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3172,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3168,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3091,
																				"src": "10143:6:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3171,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3169,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3078,
																					"src": "10152:1:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3170,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3091,
																					"src": "10156:6:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10152:10:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10143:19:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3173,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10142:21:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3174,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10167:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10142:26:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10133:35:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3177,
														"nodeType": "ExpressionStatement",
														"src": "10133:35:19"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 3179,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3091,
																	"src": "10193:6:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3182,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3180,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3078,
																		"src": "10201:1:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 3181,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3091,
																		"src": "10205:6:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "10201:10:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3178,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2849,
																"src": "10189:3:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 3183,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10189:23:19",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3082,
														"id": 3184,
														"nodeType": "Return",
														"src": "10182:30:19"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3076,
										"nodeType": "StructuredDocumentation",
										"src": "8359:223:19",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 3187,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "8596:4:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3079,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3078,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "8609:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 3187,
												"src": "8601:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3077,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8601:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8600:11:19"
									},
									"returnParameters": {
										"id": 3082,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3081,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3187,
												"src": "8635:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3080,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8635:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8634:9:19"
									},
									"scope": 3698,
									"src": "8587:1642:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3221,
										"nodeType": "Block",
										"src": "10405:164:19",
										"statements": [
											{
												"id": 3220,
												"nodeType": "UncheckedBlock",
												"src": "10415:148:19",
												"statements": [
													{
														"assignments": [
															3199
														],
														"declarations": [
															{
																"constant": false,
																"id": 3199,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "10447:6:19",
																"nodeType": "VariableDeclaration",
																"scope": 3220,
																"src": "10439:14:19",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3198,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "10439:7:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3203,
														"initialValue": {
															"arguments": [
																{
																	"id": 3201,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3190,
																	"src": "10461:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3200,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3187,
																	3222
																],
																"referencedDeclaration": 3187,
																"src": "10456:4:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3202,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10456:7:19",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "10439:24:19"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3218,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3204,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3199,
																"src": "10484:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3213,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3206,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3193,
																						"src": "10511:8:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2655",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2655",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3205,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3697,
																					"src": "10494:16:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2655_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3207,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "10494:26:19",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3212,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3210,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 3208,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3199,
																						"src": "10524:6:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 3209,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3199,
																						"src": "10533:6:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "10524:15:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3211,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3190,
																					"src": "10542:1:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10524:19:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "10494:49:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3215,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10550:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3216,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "10494:57:19",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3214,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10546:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3217,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "10493:59:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "10484:68:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3197,
														"id": 3219,
														"nodeType": "Return",
														"src": "10477:75:19"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3188,
										"nodeType": "StructuredDocumentation",
										"src": "10235:89:19",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 3222,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "10338:4:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3190,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "10351:1:19",
												"nodeType": "VariableDeclaration",
												"scope": 3222,
												"src": "10343:9:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3189,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10343:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3193,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "10363:8:19",
												"nodeType": "VariableDeclaration",
												"scope": 3222,
												"src": "10354:17:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2655",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3192,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3191,
														"name": "Rounding",
														"nameLocations": [
															"10354:8:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2655,
														"src": "10354:8:19"
													},
													"referencedDeclaration": 2655,
													"src": "10354:8:19",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2655",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10342:30:19"
									},
									"returnParameters": {
										"id": 3197,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3196,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3222,
												"src": "10396:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3195,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10396:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10395:9:19"
									},
									"scope": 3698,
									"src": "10329:240:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3353,
										"nodeType": "Block",
										"src": "10760:922:19",
										"statements": [
											{
												"assignments": [
													3231
												],
												"declarations": [
													{
														"constant": false,
														"id": 3231,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "10778:6:19",
														"nodeType": "VariableDeclaration",
														"scope": 3353,
														"src": "10770:14:19",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3230,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10770:7:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3233,
												"initialValue": {
													"hexValue": "30",
													"id": 3232,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10787:1:19",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10770:18:19"
											},
											{
												"id": 3350,
												"nodeType": "UncheckedBlock",
												"src": "10798:855:19",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3238,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3236,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3234,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3225,
																	"src": "10826:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3235,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10835:3:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "10826:12:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3237,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10841:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10826:16:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3248,
														"nodeType": "IfStatement",
														"src": "10822:99:19",
														"trueBody": {
															"id": 3247,
															"nodeType": "Block",
															"src": "10844:77:19",
															"statements": [
																{
																	"expression": {
																		"id": 3241,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3239,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3225,
																			"src": "10862:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3240,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10872:3:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "10862:13:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3242,
																	"nodeType": "ExpressionStatement",
																	"src": "10862:13:19"
																},
																{
																	"expression": {
																		"id": 3245,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3243,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3231,
																			"src": "10893:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3244,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10903:3:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "10893:13:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3246,
																	"nodeType": "ExpressionStatement",
																	"src": "10893:13:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3253,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3251,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3249,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3225,
																	"src": "10938:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3250,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10947:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "10938:11:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3252,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10952:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10938:15:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3263,
														"nodeType": "IfStatement",
														"src": "10934:96:19",
														"trueBody": {
															"id": 3262,
															"nodeType": "Block",
															"src": "10955:75:19",
															"statements": [
																{
																	"expression": {
																		"id": 3256,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3254,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3225,
																			"src": "10973:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3255,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10983:2:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "10973:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3257,
																	"nodeType": "ExpressionStatement",
																	"src": "10973:12:19"
																},
																{
																	"expression": {
																		"id": 3260,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3258,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3231,
																			"src": "11003:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3259,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11013:2:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11003:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3261,
																	"nodeType": "ExpressionStatement",
																	"src": "11003:12:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3268,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3266,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3264,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3225,
																	"src": "11047:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3265,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11056:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "11047:11:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3267,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11061:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11047:15:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3278,
														"nodeType": "IfStatement",
														"src": "11043:96:19",
														"trueBody": {
															"id": 3277,
															"nodeType": "Block",
															"src": "11064:75:19",
															"statements": [
																{
																	"expression": {
																		"id": 3271,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3269,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3225,
																			"src": "11082:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3270,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11092:2:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11082:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3272,
																	"nodeType": "ExpressionStatement",
																	"src": "11082:12:19"
																},
																{
																	"expression": {
																		"id": 3275,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3273,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3231,
																			"src": "11112:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3274,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11122:2:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11112:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3276,
																	"nodeType": "ExpressionStatement",
																	"src": "11112:12:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3283,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3281,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3279,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3225,
																	"src": "11156:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3280,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11165:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "11156:11:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3282,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11170:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11156:15:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3293,
														"nodeType": "IfStatement",
														"src": "11152:96:19",
														"trueBody": {
															"id": 3292,
															"nodeType": "Block",
															"src": "11173:75:19",
															"statements": [
																{
																	"expression": {
																		"id": 3286,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3284,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3225,
																			"src": "11191:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3285,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11201:2:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11191:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3287,
																	"nodeType": "ExpressionStatement",
																	"src": "11191:12:19"
																},
																{
																	"expression": {
																		"id": 3290,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3288,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3231,
																			"src": "11221:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3289,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11231:2:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11221:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3291,
																	"nodeType": "ExpressionStatement",
																	"src": "11221:12:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3298,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3296,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3294,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3225,
																	"src": "11265:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3295,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11274:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "11265:10:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3297,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11278:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11265:14:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3308,
														"nodeType": "IfStatement",
														"src": "11261:93:19",
														"trueBody": {
															"id": 3307,
															"nodeType": "Block",
															"src": "11281:73:19",
															"statements": [
																{
																	"expression": {
																		"id": 3301,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3299,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3225,
																			"src": "11299:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3300,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11309:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11299:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3302,
																	"nodeType": "ExpressionStatement",
																	"src": "11299:11:19"
																},
																{
																	"expression": {
																		"id": 3305,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3303,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3231,
																			"src": "11328:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3304,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11338:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11328:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3306,
																	"nodeType": "ExpressionStatement",
																	"src": "11328:11:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3313,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3311,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3309,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3225,
																	"src": "11371:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 3310,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11380:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "11371:10:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3312,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11384:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11371:14:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3323,
														"nodeType": "IfStatement",
														"src": "11367:93:19",
														"trueBody": {
															"id": 3322,
															"nodeType": "Block",
															"src": "11387:73:19",
															"statements": [
																{
																	"expression": {
																		"id": 3316,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3314,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3225,
																			"src": "11405:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3315,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11415:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11405:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3317,
																	"nodeType": "ExpressionStatement",
																	"src": "11405:11:19"
																},
																{
																	"expression": {
																		"id": 3320,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3318,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3231,
																			"src": "11434:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3319,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11444:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11434:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3321,
																	"nodeType": "ExpressionStatement",
																	"src": "11434:11:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3328,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3326,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3324,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3225,
																	"src": "11477:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3325,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11486:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "11477:10:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3327,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11490:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11477:14:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3338,
														"nodeType": "IfStatement",
														"src": "11473:93:19",
														"trueBody": {
															"id": 3337,
															"nodeType": "Block",
															"src": "11493:73:19",
															"statements": [
																{
																	"expression": {
																		"id": 3331,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3329,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3225,
																			"src": "11511:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3330,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11521:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11511:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3332,
																	"nodeType": "ExpressionStatement",
																	"src": "11511:11:19"
																},
																{
																	"expression": {
																		"id": 3335,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3333,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3231,
																			"src": "11540:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3334,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11550:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11540:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3336,
																	"nodeType": "ExpressionStatement",
																	"src": "11540:11:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3343,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3341,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3339,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3225,
																	"src": "11583:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3340,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11592:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "11583:10:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3342,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11596:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11583:14:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3349,
														"nodeType": "IfStatement",
														"src": "11579:64:19",
														"trueBody": {
															"id": 3348,
															"nodeType": "Block",
															"src": "11599:44:19",
															"statements": [
																{
																	"expression": {
																		"id": 3346,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3344,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3231,
																			"src": "11617:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3345,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11627:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "11617:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3347,
																	"nodeType": "ExpressionStatement",
																	"src": "11617:11:19"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3351,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3231,
													"src": "11669:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3229,
												"id": 3352,
												"nodeType": "Return",
												"src": "11662:13:19"
											}
										]
									},
									"documentation": {
										"id": 3223,
										"nodeType": "StructuredDocumentation",
										"src": "10575:119:19",
										"text": " @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 3354,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "10708:4:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3226,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3225,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10721:5:19",
												"nodeType": "VariableDeclaration",
												"scope": 3354,
												"src": "10713:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3224,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10713:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10712:15:19"
									},
									"returnParameters": {
										"id": 3229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3228,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3354,
												"src": "10751:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3227,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10751:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10750:9:19"
									},
									"scope": 3698,
									"src": "10699:983:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3388,
										"nodeType": "Block",
										"src": "11915:168:19",
										"statements": [
											{
												"id": 3387,
												"nodeType": "UncheckedBlock",
												"src": "11925:152:19",
												"statements": [
													{
														"assignments": [
															3366
														],
														"declarations": [
															{
																"constant": false,
																"id": 3366,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "11957:6:19",
																"nodeType": "VariableDeclaration",
																"scope": 3387,
																"src": "11949:14:19",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3365,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11949:7:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3370,
														"initialValue": {
															"arguments": [
																{
																	"id": 3368,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3357,
																	"src": "11971:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3367,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3354,
																	3389
																],
																"referencedDeclaration": 3354,
																"src": "11966:4:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3369,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11966:11:19",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11949:28:19"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3385,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3371,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3366,
																"src": "11998:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3380,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3373,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3360,
																						"src": "12025:8:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2655",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2655",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3372,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3697,
																					"src": "12008:16:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2655_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3374,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "12008:26:19",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3379,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3377,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3375,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12038:1:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 3376,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3366,
																						"src": "12043:6:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12038:11:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3378,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3357,
																					"src": "12052:5:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12038:19:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12008:49:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3382,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12064:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3383,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12008:57:19",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3381,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12060:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3384,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12007:59:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "11998:68:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3364,
														"id": 3386,
														"nodeType": "Return",
														"src": "11991:75:19"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3355,
										"nodeType": "StructuredDocumentation",
										"src": "11688:142:19",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3389,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "11844:4:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3361,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3357,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11857:5:19",
												"nodeType": "VariableDeclaration",
												"scope": 3389,
												"src": "11849:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3356,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11849:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3360,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "11873:8:19",
												"nodeType": "VariableDeclaration",
												"scope": 3389,
												"src": "11864:17:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2655",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3359,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3358,
														"name": "Rounding",
														"nameLocations": [
															"11864:8:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2655,
														"src": "11864:8:19"
													},
													"referencedDeclaration": 2655,
													"src": "11864:8:19",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2655",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11848:34:19"
									},
									"returnParameters": {
										"id": 3364,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3363,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3389,
												"src": "11906:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3362,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11906:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11905:9:19"
									},
									"scope": 3698,
									"src": "11835:248:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3517,
										"nodeType": "Block",
										"src": "12276:854:19",
										"statements": [
											{
												"assignments": [
													3398
												],
												"declarations": [
													{
														"constant": false,
														"id": 3398,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "12294:6:19",
														"nodeType": "VariableDeclaration",
														"scope": 3517,
														"src": "12286:14:19",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3397,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12286:7:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3400,
												"initialValue": {
													"hexValue": "30",
													"id": 3399,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "12303:1:19",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12286:18:19"
											},
											{
												"id": 3514,
												"nodeType": "UncheckedBlock",
												"src": "12314:787:19",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3405,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3401,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3392,
																"src": "12342:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 3404,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3402,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12351:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3403,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12357:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "12351:8:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "12342:17:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3417,
														"nodeType": "IfStatement",
														"src": "12338:103:19",
														"trueBody": {
															"id": 3416,
															"nodeType": "Block",
															"src": "12361:80:19",
															"statements": [
																{
																	"expression": {
																		"id": 3410,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3406,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3392,
																			"src": "12379:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 3409,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3407,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12388:2:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 3408,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12394:2:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "12388:8:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "12379:17:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3411,
																	"nodeType": "ExpressionStatement",
																	"src": "12379:17:19"
																},
																{
																	"expression": {
																		"id": 3414,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3412,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3398,
																			"src": "12414:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3413,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12424:2:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "12414:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3415,
																	"nodeType": "ExpressionStatement",
																	"src": "12414:12:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3422,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3418,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3392,
																"src": "12458:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 3421,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3419,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12467:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3420,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12473:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "12467:8:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "12458:17:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3434,
														"nodeType": "IfStatement",
														"src": "12454:103:19",
														"trueBody": {
															"id": 3433,
															"nodeType": "Block",
															"src": "12477:80:19",
															"statements": [
																{
																	"expression": {
																		"id": 3427,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3423,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3392,
																			"src": "12495:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 3426,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3424,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12504:2:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 3425,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12510:2:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "12504:8:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "12495:17:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3428,
																	"nodeType": "ExpressionStatement",
																	"src": "12495:17:19"
																},
																{
																	"expression": {
																		"id": 3431,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3429,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3398,
																			"src": "12530:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3430,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12540:2:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "12530:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3432,
																	"nodeType": "ExpressionStatement",
																	"src": "12530:12:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3439,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3435,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3392,
																"src": "12574:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 3438,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3436,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12583:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3437,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12589:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "12583:8:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "12574:17:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3451,
														"nodeType": "IfStatement",
														"src": "12570:103:19",
														"trueBody": {
															"id": 3450,
															"nodeType": "Block",
															"src": "12593:80:19",
															"statements": [
																{
																	"expression": {
																		"id": 3444,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3440,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3392,
																			"src": "12611:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 3443,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3441,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12620:2:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 3442,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12626:2:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "12620:8:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "12611:17:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3445,
																	"nodeType": "ExpressionStatement",
																	"src": "12611:17:19"
																},
																{
																	"expression": {
																		"id": 3448,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3446,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3398,
																			"src": "12646:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3447,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12656:2:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "12646:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3449,
																	"nodeType": "ExpressionStatement",
																	"src": "12646:12:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3456,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3452,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3392,
																"src": "12690:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 3455,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3453,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12699:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3454,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12705:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "12699:7:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "12690:16:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3468,
														"nodeType": "IfStatement",
														"src": "12686:100:19",
														"trueBody": {
															"id": 3467,
															"nodeType": "Block",
															"src": "12708:78:19",
															"statements": [
																{
																	"expression": {
																		"id": 3461,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3457,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3392,
																			"src": "12726:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 3460,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3458,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12735:2:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 3459,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12741:1:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "12735:7:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "12726:16:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3462,
																	"nodeType": "ExpressionStatement",
																	"src": "12726:16:19"
																},
																{
																	"expression": {
																		"id": 3465,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3463,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3398,
																			"src": "12760:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3464,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12770:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "12760:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3466,
																	"nodeType": "ExpressionStatement",
																	"src": "12760:11:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3473,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3469,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3392,
																"src": "12803:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 3472,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3470,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12812:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 3471,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12818:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "12812:7:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "12803:16:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3485,
														"nodeType": "IfStatement",
														"src": "12799:100:19",
														"trueBody": {
															"id": 3484,
															"nodeType": "Block",
															"src": "12821:78:19",
															"statements": [
																{
																	"expression": {
																		"id": 3478,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3474,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3392,
																			"src": "12839:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 3477,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3475,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12848:2:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 3476,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12854:1:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "12848:7:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "12839:16:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3479,
																	"nodeType": "ExpressionStatement",
																	"src": "12839:16:19"
																},
																{
																	"expression": {
																		"id": 3482,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3480,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3398,
																			"src": "12873:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3481,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12883:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "12873:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3483,
																	"nodeType": "ExpressionStatement",
																	"src": "12873:11:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3490,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3486,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3392,
																"src": "12916:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 3489,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3487,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12925:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3488,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12931:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "12925:7:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "12916:16:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3502,
														"nodeType": "IfStatement",
														"src": "12912:100:19",
														"trueBody": {
															"id": 3501,
															"nodeType": "Block",
															"src": "12934:78:19",
															"statements": [
																{
																	"expression": {
																		"id": 3495,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3491,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3392,
																			"src": "12952:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 3494,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3492,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12961:2:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 3493,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12967:1:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "12961:7:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "12952:16:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3496,
																	"nodeType": "ExpressionStatement",
																	"src": "12952:16:19"
																},
																{
																	"expression": {
																		"id": 3499,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3497,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3398,
																			"src": "12986:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3498,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12996:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "12986:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3500,
																	"nodeType": "ExpressionStatement",
																	"src": "12986:11:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3507,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3503,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3392,
																"src": "13029:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 3506,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3504,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13038:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3505,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13044:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "13038:7:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "13029:16:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3513,
														"nodeType": "IfStatement",
														"src": "13025:66:19",
														"trueBody": {
															"id": 3512,
															"nodeType": "Block",
															"src": "13047:44:19",
															"statements": [
																{
																	"expression": {
																		"id": 3510,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3508,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3398,
																			"src": "13065:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3509,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13075:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "13065:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3511,
																	"nodeType": "ExpressionStatement",
																	"src": "13065:11:19"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3515,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3398,
													"src": "13117:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3396,
												"id": 3516,
												"nodeType": "Return",
												"src": "13110:13:19"
											}
										]
									},
									"documentation": {
										"id": 3390,
										"nodeType": "StructuredDocumentation",
										"src": "12089:120:19",
										"text": " @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 3518,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "12223:5:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3392,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12237:5:19",
												"nodeType": "VariableDeclaration",
												"scope": 3518,
												"src": "12229:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3391,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12229:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12228:15:19"
									},
									"returnParameters": {
										"id": 3396,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3395,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3518,
												"src": "12267:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3394,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12267:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12266:9:19"
									},
									"scope": 3698,
									"src": "12214:916:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3552,
										"nodeType": "Block",
										"src": "13365:170:19",
										"statements": [
											{
												"id": 3551,
												"nodeType": "UncheckedBlock",
												"src": "13375:154:19",
												"statements": [
													{
														"assignments": [
															3530
														],
														"declarations": [
															{
																"constant": false,
																"id": 3530,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "13407:6:19",
																"nodeType": "VariableDeclaration",
																"scope": 3551,
																"src": "13399:14:19",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3529,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "13399:7:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3534,
														"initialValue": {
															"arguments": [
																{
																	"id": 3532,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3521,
																	"src": "13422:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3531,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3518,
																	3553
																],
																"referencedDeclaration": 3518,
																"src": "13416:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3533,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13416:12:19",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "13399:29:19"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3549,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3535,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3530,
																"src": "13449:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3544,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3537,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3524,
																						"src": "13476:8:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2655",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2655",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3536,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3697,
																					"src": "13459:16:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2655_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3538,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "13459:26:19",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3543,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3541,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 3539,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "13489:2:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 3540,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3530,
																						"src": "13495:6:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "13489:12:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3542,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3521,
																					"src": "13504:5:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "13489:20:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "13459:50:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3546,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13516:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3547,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "13459:58:19",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3545,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13512:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3548,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "13458:60:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "13449:69:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3528,
														"id": 3550,
														"nodeType": "Return",
														"src": "13442:76:19"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3519,
										"nodeType": "StructuredDocumentation",
										"src": "13136:143:19",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3553,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "13293:5:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3525,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3521,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13307:5:19",
												"nodeType": "VariableDeclaration",
												"scope": 3553,
												"src": "13299:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3520,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13299:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3524,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "13323:8:19",
												"nodeType": "VariableDeclaration",
												"scope": 3553,
												"src": "13314:17:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2655",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3523,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3522,
														"name": "Rounding",
														"nameLocations": [
															"13314:8:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2655,
														"src": "13314:8:19"
													},
													"referencedDeclaration": 2655,
													"src": "13314:8:19",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2655",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13298:34:19"
									},
									"returnParameters": {
										"id": 3528,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3527,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3553,
												"src": "13356:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3526,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13356:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13355:9:19"
									},
									"scope": 3698,
									"src": "13284:251:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3639,
										"nodeType": "Block",
										"src": "13855:600:19",
										"statements": [
											{
												"assignments": [
													3562
												],
												"declarations": [
													{
														"constant": false,
														"id": 3562,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "13873:6:19",
														"nodeType": "VariableDeclaration",
														"scope": 3639,
														"src": "13865:14:19",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3561,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13865:7:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3564,
												"initialValue": {
													"hexValue": "30",
													"id": 3563,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "13882:1:19",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13865:18:19"
											},
											{
												"id": 3636,
												"nodeType": "UncheckedBlock",
												"src": "13893:533:19",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3569,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3567,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3565,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3556,
																	"src": "13921:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3566,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13930:3:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "13921:12:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3568,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13936:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "13921:16:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3579,
														"nodeType": "IfStatement",
														"src": "13917:98:19",
														"trueBody": {
															"id": 3578,
															"nodeType": "Block",
															"src": "13939:76:19",
															"statements": [
																{
																	"expression": {
																		"id": 3572,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3570,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3556,
																			"src": "13957:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3571,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13967:3:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "13957:13:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3573,
																	"nodeType": "ExpressionStatement",
																	"src": "13957:13:19"
																},
																{
																	"expression": {
																		"id": 3576,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3574,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3562,
																			"src": "13988:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3575,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13998:2:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "13988:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3577,
																	"nodeType": "ExpressionStatement",
																	"src": "13988:12:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3584,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3582,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3580,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3556,
																	"src": "14032:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3581,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14041:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "14032:11:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3583,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14046:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14032:15:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3594,
														"nodeType": "IfStatement",
														"src": "14028:95:19",
														"trueBody": {
															"id": 3593,
															"nodeType": "Block",
															"src": "14049:74:19",
															"statements": [
																{
																	"expression": {
																		"id": 3587,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3585,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3556,
																			"src": "14067:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3586,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14077:2:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "14067:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3588,
																	"nodeType": "ExpressionStatement",
																	"src": "14067:12:19"
																},
																{
																	"expression": {
																		"id": 3591,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3589,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3562,
																			"src": "14097:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3590,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14107:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "14097:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3592,
																	"nodeType": "ExpressionStatement",
																	"src": "14097:11:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3599,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3597,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3595,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3556,
																	"src": "14140:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3596,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14149:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "14140:11:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3598,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14154:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14140:15:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3609,
														"nodeType": "IfStatement",
														"src": "14136:95:19",
														"trueBody": {
															"id": 3608,
															"nodeType": "Block",
															"src": "14157:74:19",
															"statements": [
																{
																	"expression": {
																		"id": 3602,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3600,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3556,
																			"src": "14175:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3601,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14185:2:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "14175:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3603,
																	"nodeType": "ExpressionStatement",
																	"src": "14175:12:19"
																},
																{
																	"expression": {
																		"id": 3606,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3604,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3562,
																			"src": "14205:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3605,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14215:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "14205:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3607,
																	"nodeType": "ExpressionStatement",
																	"src": "14205:11:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3614,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3612,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3610,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3556,
																	"src": "14248:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3611,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14257:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "14248:11:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3613,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14262:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14248:15:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3624,
														"nodeType": "IfStatement",
														"src": "14244:95:19",
														"trueBody": {
															"id": 3623,
															"nodeType": "Block",
															"src": "14265:74:19",
															"statements": [
																{
																	"expression": {
																		"id": 3617,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3615,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3556,
																			"src": "14283:5:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3616,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14293:2:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "14283:12:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3618,
																	"nodeType": "ExpressionStatement",
																	"src": "14283:12:19"
																},
																{
																	"expression": {
																		"id": 3621,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3619,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3562,
																			"src": "14313:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3620,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14323:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "14313:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3622,
																	"nodeType": "ExpressionStatement",
																	"src": "14313:11:19"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3629,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3627,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3625,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3556,
																	"src": "14356:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3626,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14365:1:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "14356:10:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3628,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14369:1:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14356:14:19",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3635,
														"nodeType": "IfStatement",
														"src": "14352:64:19",
														"trueBody": {
															"id": 3634,
															"nodeType": "Block",
															"src": "14372:44:19",
															"statements": [
																{
																	"expression": {
																		"id": 3632,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3630,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3562,
																			"src": "14390:6:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3631,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14400:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "14390:11:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3633,
																	"nodeType": "ExpressionStatement",
																	"src": "14390:11:19"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3637,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3562,
													"src": "14442:6:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3560,
												"id": 3638,
												"nodeType": "Return",
												"src": "14435:13:19"
											}
										]
									},
									"documentation": {
										"id": 3554,
										"nodeType": "StructuredDocumentation",
										"src": "13541:246:19",
										"text": " @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 3640,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "13801:6:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3557,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3556,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13816:5:19",
												"nodeType": "VariableDeclaration",
												"scope": 3640,
												"src": "13808:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3555,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13808:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13807:15:19"
									},
									"returnParameters": {
										"id": 3560,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3559,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3640,
												"src": "13846:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3558,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13846:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13845:9:19"
									},
									"scope": 3698,
									"src": "13792:663:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3677,
										"nodeType": "Block",
										"src": "14692:177:19",
										"statements": [
											{
												"id": 3676,
												"nodeType": "UncheckedBlock",
												"src": "14702:161:19",
												"statements": [
													{
														"assignments": [
															3652
														],
														"declarations": [
															{
																"constant": false,
																"id": 3652,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "14734:6:19",
																"nodeType": "VariableDeclaration",
																"scope": 3676,
																"src": "14726:14:19",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3651,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "14726:7:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3656,
														"initialValue": {
															"arguments": [
																{
																	"id": 3654,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3643,
																	"src": "14750:5:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3653,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3640,
																	3678
																],
																"referencedDeclaration": 3640,
																"src": "14743:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3655,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14743:13:19",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "14726:30:19"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3674,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3657,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3652,
																"src": "14777:6:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3669,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3659,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3646,
																						"src": "14804:8:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2655",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2655",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3658,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3697,
																					"src": "14787:16:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2655_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3660,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "14787:26:19",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3668,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3666,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3661,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "14817:1:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 3664,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 3662,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3652,
																									"src": "14823:6:19",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "33",
																									"id": 3663,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "14833:1:19",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_3_by_1",
																										"typeString": "int_const 3"
																									},
																									"value": "3"
																								},
																								"src": "14823:11:19",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 3665,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "14822:13:19",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "14817:18:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3667,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3643,
																					"src": "14838:5:19",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "14817:26:19",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "14787:56:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3671,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14850:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3672,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "14787:64:19",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3670,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14846:1:19",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3673,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "14786:66:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "14777:75:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3650,
														"id": 3675,
														"nodeType": "Return",
														"src": "14770:82:19"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3641,
										"nodeType": "StructuredDocumentation",
										"src": "14461:144:19",
										"text": " @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3678,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "14619:6:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3647,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3643,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "14634:5:19",
												"nodeType": "VariableDeclaration",
												"scope": 3678,
												"src": "14626:13:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3642,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14626:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3646,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "14650:8:19",
												"nodeType": "VariableDeclaration",
												"scope": 3678,
												"src": "14641:17:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2655",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3645,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3644,
														"name": "Rounding",
														"nameLocations": [
															"14641:8:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2655,
														"src": "14641:8:19"
													},
													"referencedDeclaration": 2655,
													"src": "14641:8:19",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2655",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14625:34:19"
									},
									"returnParameters": {
										"id": 3650,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3649,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3678,
												"src": "14683:7:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3648,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14683:7:19",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14682:9:19"
									},
									"scope": 3698,
									"src": "14610:259:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3696,
										"nodeType": "Block",
										"src": "15067:48:19",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 3694,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 3692,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 3689,
																	"name": "rounding",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3682,
																	"src": "15090:8:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_Rounding_$2655",
																		"typeString": "enum Math.Rounding"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_enum$_Rounding_$2655",
																		"typeString": "enum Math.Rounding"
																	}
																],
																"id": 3688,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "15084:5:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 3687,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "15084:5:19",
																	"typeDescriptions": {}
																}
															},
															"id": 3690,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "15084:15:19",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "%",
														"rightExpression": {
															"hexValue": "32",
															"id": 3691,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15102:1:19",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "15084:19:19",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "31",
														"id": 3693,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "15107:1:19",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "15084:24:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 3686,
												"id": 3695,
												"nodeType": "Return",
												"src": "15077:31:19"
											}
										]
									},
									"documentation": {
										"id": 3679,
										"nodeType": "StructuredDocumentation",
										"src": "14875:113:19",
										"text": " @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."
									},
									"id": 3697,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unsignedRoundsUp",
									"nameLocation": "15002:16:19",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3683,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3682,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "15028:8:19",
												"nodeType": "VariableDeclaration",
												"scope": 3697,
												"src": "15019:17:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2655",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3681,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3680,
														"name": "Rounding",
														"nameLocations": [
															"15019:8:19"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2655,
														"src": "15019:8:19"
													},
													"referencedDeclaration": 2655,
													"src": "15019:8:19",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2655",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15018:19:19"
									},
									"returnParameters": {
										"id": 3686,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3685,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3697,
												"src": "15061:4:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3684,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "15061:4:19",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15060:6:19"
									},
									"scope": 3698,
									"src": "14993:122:19",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3699,
							"src": "203:14914:19",
							"usedErrors": [
								2650
							],
							"usedEvents": []
						}
					],
					"src": "103:15015:19"
				},
				"id": 19
			},
			"@openzeppelin/contracts/utils/math/SignedMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/math/SignedMath.sol",
					"exportedSymbols": {
						"SignedMath": [
							3803
						]
					},
					"id": 3804,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3700,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "109:24:20"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SignedMath",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 3701,
								"nodeType": "StructuredDocumentation",
								"src": "135:80:20",
								"text": " @dev Standard signed math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3803,
							"linearizedBaseContracts": [
								3803
							],
							"name": "SignedMath",
							"nameLocation": "224:10:20",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 3718,
										"nodeType": "Block",
										"src": "376:37:20",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 3713,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3711,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3704,
															"src": "393:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 3712,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3706,
															"src": "397:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "393:5:20",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 3715,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3706,
														"src": "405:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3716,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "393:13:20",
													"trueExpression": {
														"id": 3714,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3704,
														"src": "401:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3710,
												"id": 3717,
												"nodeType": "Return",
												"src": "386:20:20"
											}
										]
									},
									"documentation": {
										"id": 3702,
										"nodeType": "StructuredDocumentation",
										"src": "241:66:20",
										"text": " @dev Returns the largest of two signed numbers."
									},
									"id": 3719,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "321:3:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3707,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3704,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "332:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 3719,
												"src": "325:8:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3703,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "325:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3706,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "342:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 3719,
												"src": "335:8:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3705,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "335:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "324:20:20"
									},
									"returnParameters": {
										"id": 3710,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3709,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3719,
												"src": "368:6:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3708,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "368:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "367:8:20"
									},
									"scope": 3803,
									"src": "312:101:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3736,
										"nodeType": "Block",
										"src": "555:37:20",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 3731,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3729,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3722,
															"src": "572:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 3730,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3724,
															"src": "576:1:20",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "572:5:20",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 3733,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3724,
														"src": "584:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3734,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "572:13:20",
													"trueExpression": {
														"id": 3732,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3722,
														"src": "580:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3728,
												"id": 3735,
												"nodeType": "Return",
												"src": "565:20:20"
											}
										]
									},
									"documentation": {
										"id": 3720,
										"nodeType": "StructuredDocumentation",
										"src": "419:67:20",
										"text": " @dev Returns the smallest of two signed numbers."
									},
									"id": 3737,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "500:3:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3725,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3722,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "511:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 3737,
												"src": "504:8:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3721,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "504:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3724,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "521:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 3737,
												"src": "514:8:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3723,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "514:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "503:20:20"
									},
									"returnParameters": {
										"id": 3728,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3727,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3737,
												"src": "547:6:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3726,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "547:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "546:8:20"
									},
									"scope": 3803,
									"src": "491:101:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3780,
										"nodeType": "Block",
										"src": "797:162:20",
										"statements": [
											{
												"assignments": [
													3748
												],
												"declarations": [
													{
														"constant": false,
														"id": 3748,
														"mutability": "mutable",
														"name": "x",
														"nameLocation": "866:1:20",
														"nodeType": "VariableDeclaration",
														"scope": 3780,
														"src": "859:8:20",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 3747,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "859:6:20",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3761,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 3760,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3751,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3749,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3740,
																	"src": "871:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 3750,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3742,
																	"src": "875:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "871:5:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3752,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "870:7:20",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3758,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 3755,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3753,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3740,
																				"src": "882:1:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 3754,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3742,
																				"src": "886:1:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "882:5:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 3756,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "881:7:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3757,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "892:1:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "881:12:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3759,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "880:14:20",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "870:24:20",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "859:35:20"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 3778,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3762,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3748,
														"src": "911:1:20",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3776,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3770,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3767,
																						"name": "x",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3748,
																						"src": "931:1:20",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					],
																					"id": 3766,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "923:7:20",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 3765,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "923:7:20",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 3768,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "923:10:20",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "323535",
																				"id": 3769,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "937:3:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_255_by_1",
																					"typeString": "int_const 255"
																				},
																				"value": "255"
																			},
																			"src": "923:17:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 3764,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "916:6:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 3763,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "916:6:20",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3771,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "916:25:20",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 3774,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3772,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3740,
																				"src": "945:1:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 3773,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3742,
																				"src": "949:1:20",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "945:5:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 3775,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "944:7:20",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "916:35:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3777,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "915:37:20",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "911:41:20",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3746,
												"id": 3779,
												"nodeType": "Return",
												"src": "904:48:20"
											}
										]
									},
									"documentation": {
										"id": 3738,
										"nodeType": "StructuredDocumentation",
										"src": "598:126:20",
										"text": " @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."
									},
									"id": 3781,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "738:7:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3743,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3740,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "753:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 3781,
												"src": "746:8:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3739,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "746:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3742,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "763:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 3781,
												"src": "756:8:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3741,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "756:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "745:20:20"
									},
									"returnParameters": {
										"id": 3746,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3745,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3781,
												"src": "789:6:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3744,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "789:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "788:8:20"
									},
									"scope": 3803,
									"src": "729:230:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3801,
										"nodeType": "Block",
										"src": "1103:158:20",
										"statements": [
											{
												"id": 3800,
												"nodeType": "UncheckedBlock",
												"src": "1113:142:20",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 3793,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 3791,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3784,
																			"src": "1228:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 3792,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1233:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1228:6:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"id": 3796,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "-",
																		"prefix": true,
																		"src": "1241:2:20",
																		"subExpression": {
																			"id": 3795,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3784,
																			"src": "1242:1:20",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"id": 3797,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "1228:15:20",
																	"trueExpression": {
																		"id": 3794,
																		"name": "n",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3784,
																		"src": "1237:1:20",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																],
																"id": 3790,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1220:7:20",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 3789,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1220:7:20",
																	"typeDescriptions": {}
																}
															},
															"id": 3798,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1220:24:20",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3788,
														"id": 3799,
														"nodeType": "Return",
														"src": "1213:31:20"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3782,
										"nodeType": "StructuredDocumentation",
										"src": "965:78:20",
										"text": " @dev Returns the absolute unsigned value of a signed value."
									},
									"id": 3802,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "abs",
									"nameLocation": "1057:3:20",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3785,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3784,
												"mutability": "mutable",
												"name": "n",
												"nameLocation": "1068:1:20",
												"nodeType": "VariableDeclaration",
												"scope": 3802,
												"src": "1061:8:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3783,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1061:6:20",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1060:10:20"
									},
									"returnParameters": {
										"id": 3788,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3787,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3802,
												"src": "1094:7:20",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3786,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1094:7:20",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1093:9:20"
									},
									"scope": 3803,
									"src": "1048:213:20",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3804,
							"src": "216:1047:20",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "109:1155:20"
				},
				"id": 20
			},
			"contracts/ERC_Token.sol": {
				"ast": {
					"absolutePath": "contracts/ERC_Token.sol",
					"exportedSymbols": {
						"Context": [
							1228
						],
						"ECDSA": [
							2343
						],
						"EIP712": [
							2570
						],
						"ERC20": [
							824
						],
						"ERC20Burnable": [
							948
						],
						"ERC20Pausable": [
							982
						],
						"ERC20Permit": [
							1136
						],
						"GhanaCommunicationTechnologyUniversity": [
							3891
						],
						"IERC20": [
							902
						],
						"IERC20Errors": [
							214
						],
						"IERC20Metadata": [
							1162
						],
						"IERC20Permit": [
							1198
						],
						"Nonces": [
							1296
						],
						"Ownable": [
							147
						],
						"Pausable": [
							1413
						]
					},
					"id": 3892,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3805,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "83:24:21"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"id": 3806,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3892,
							"sourceUnit": 825,
							"src": "111:55:21",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol",
							"id": 3807,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3892,
							"sourceUnit": 949,
							"src": "168:74:21",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol",
							"id": 3808,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3892,
							"sourceUnit": 983,
							"src": "244:74:21",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/access/Ownable.sol",
							"file": "@openzeppelin/contracts/access/Ownable.sol",
							"id": 3809,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3892,
							"sourceUnit": 148,
							"src": "320:52:21",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
							"file": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol",
							"id": 3810,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3892,
							"sourceUnit": 1137,
							"src": "374:72:21",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3811,
										"name": "ERC20",
										"nameLocations": [
											"501:5:21"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 824,
										"src": "501:5:21"
									},
									"id": 3812,
									"nodeType": "InheritanceSpecifier",
									"src": "501:5:21"
								},
								{
									"baseName": {
										"id": 3813,
										"name": "ERC20Burnable",
										"nameLocations": [
											"508:13:21"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 948,
										"src": "508:13:21"
									},
									"id": 3814,
									"nodeType": "InheritanceSpecifier",
									"src": "508:13:21"
								},
								{
									"baseName": {
										"id": 3815,
										"name": "ERC20Pausable",
										"nameLocations": [
											"523:13:21"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 982,
										"src": "523:13:21"
									},
									"id": 3816,
									"nodeType": "InheritanceSpecifier",
									"src": "523:13:21"
								},
								{
									"baseName": {
										"id": 3817,
										"name": "Ownable",
										"nameLocations": [
											"538:7:21"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 147,
										"src": "538:7:21"
									},
									"id": 3818,
									"nodeType": "InheritanceSpecifier",
									"src": "538:7:21"
								},
								{
									"baseName": {
										"id": 3819,
										"name": "ERC20Permit",
										"nameLocations": [
											"547:11:21"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1136,
										"src": "547:11:21"
									},
									"id": 3820,
									"nodeType": "InheritanceSpecifier",
									"src": "547:11:21"
								}
							],
							"canonicalName": "GhanaCommunicationTechnologyUniversity",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 3891,
							"linearizedBaseContracts": [
								3891,
								1136,
								1296,
								2570,
								172,
								1198,
								147,
								982,
								1413,
								948,
								824,
								214,
								1162,
								902,
								1228
							],
							"name": "GhanaCommunicationTechnologyUniversity",
							"nameLocation": "459:38:21",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 3835,
										"nodeType": "Block",
										"src": "772:2:21",
										"statements": []
									},
									"id": 3836,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"hexValue": "4768616e6120436f6d6d756e69636174696f6e20546563686e6f6c6f677920556e697665727369747920",
													"id": 3825,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "615:44:21",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_0d9fec584a25f4929244dc338dcb423f6e6b1b07580ab8fbd5dd5174210da996",
														"typeString": "literal_string \"Ghana Communication Technology University \""
													},
													"value": "Ghana Communication Technology University "
												},
												{
													"hexValue": "47435455",
													"id": 3826,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "661:6:21",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_87efbb84537ae9db41b14fa0f767eea02450dc9eb722bd42e4ffbf24efc12209",
														"typeString": "literal_string \"GCTU\""
													},
													"value": "GCTU"
												}
											],
											"id": 3827,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3824,
												"name": "ERC20",
												"nameLocations": [
													"609:5:21"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 824,
												"src": "609:5:21"
											},
											"nodeType": "ModifierInvocation",
											"src": "609:59:21"
										},
										{
											"arguments": [
												{
													"id": 3829,
													"name": "initialOwner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3822,
													"src": "686:12:21",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 3830,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3828,
												"name": "Ownable",
												"nameLocations": [
													"678:7:21"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 147,
												"src": "678:7:21"
											},
											"nodeType": "ModifierInvocation",
											"src": "678:21:21"
										},
										{
											"arguments": [
												{
													"hexValue": "4768616e6120436f6d6d756e69636174696f6e20546563686e6f6c6f677920556e697665727369747920",
													"id": 3832,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "721:44:21",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_0d9fec584a25f4929244dc338dcb423f6e6b1b07580ab8fbd5dd5174210da996",
														"typeString": "literal_string \"Ghana Communication Technology University \""
													},
													"value": "Ghana Communication Technology University "
												}
											],
											"id": 3833,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3831,
												"name": "ERC20Permit",
												"nameLocations": [
													"709:11:21"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1136,
												"src": "709:11:21"
											},
											"nodeType": "ModifierInvocation",
											"src": "709:57:21"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3823,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3822,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "586:12:21",
												"nodeType": "VariableDeclaration",
												"scope": 3836,
												"src": "578:20:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3821,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "578:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "577:22:21"
									},
									"returnParameters": {
										"id": 3834,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "772:0:21"
									},
									"scope": 3891,
									"src": "566:208:21",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3844,
										"nodeType": "Block",
										"src": "816:27:21",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3841,
														"name": "_pause",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1396,
														"src": "827:6:21",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 3842,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "827:8:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3843,
												"nodeType": "ExpressionStatement",
												"src": "827:8:21"
											}
										]
									},
									"functionSelector": "8456cb59",
									"id": 3845,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3839,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3838,
												"name": "onlyOwner",
												"nameLocations": [
													"806:9:21"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "806:9:21"
											},
											"nodeType": "ModifierInvocation",
											"src": "806:9:21"
										}
									],
									"name": "pause",
									"nameLocation": "791:5:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3837,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "796:2:21"
									},
									"returnParameters": {
										"id": 3840,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "816:0:21"
									},
									"scope": 3891,
									"src": "782:61:21",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3853,
										"nodeType": "Block",
										"src": "887:29:21",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 3850,
														"name": "_unpause",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1412,
														"src": "898:8:21",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 3851,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "898:10:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3852,
												"nodeType": "ExpressionStatement",
												"src": "898:10:21"
											}
										]
									},
									"functionSelector": "3f4ba83a",
									"id": 3854,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3848,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3847,
												"name": "onlyOwner",
												"nameLocations": [
													"877:9:21"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "877:9:21"
											},
											"nodeType": "ModifierInvocation",
											"src": "877:9:21"
										}
									],
									"name": "unpause",
									"nameLocation": "860:7:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3846,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "867:2:21"
									},
									"returnParameters": {
										"id": 3849,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "887:0:21"
									},
									"scope": 3891,
									"src": "851:65:21",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 3868,
										"nodeType": "Block",
										"src": "983:36:21",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 3864,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3856,
															"src": "1000:2:21",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3865,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3858,
															"src": "1004:6:21",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3863,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 664,
														"src": "994:5:21",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 3866,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "994:17:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3867,
												"nodeType": "ExpressionStatement",
												"src": "994:17:21"
											}
										]
									},
									"functionSelector": "40c10f19",
									"id": 3869,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 3861,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 3860,
												"name": "onlyOwner",
												"nameLocations": [
													"973:9:21"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "973:9:21"
											},
											"nodeType": "ModifierInvocation",
											"src": "973:9:21"
										}
									],
									"name": "mint",
									"nameLocation": "933:4:21",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3859,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3856,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "946:2:21",
												"nodeType": "VariableDeclaration",
												"scope": 3869,
												"src": "938:10:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3855,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "938:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3858,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "958:6:21",
												"nodeType": "VariableDeclaration",
												"scope": 3869,
												"src": "950:14:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3857,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "950:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "937:28:21"
									},
									"returnParameters": {
										"id": 3862,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "983:0:21"
									},
									"scope": 3891,
									"src": "924:95:21",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										631,
										981
									],
									"body": {
										"id": 3889,
										"nodeType": "Block",
										"src": "1218:49:21",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 3884,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3871,
															"src": "1243:4:21",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3885,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3873,
															"src": "1249:2:21",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 3886,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3875,
															"src": "1253:5:21",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 3881,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "1229:5:21",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_GhanaCommunicationTechnologyUniversity_$3891_$",
																"typeString": "type(contract super GhanaCommunicationTechnologyUniversity)"
															}
														},
														"id": 3883,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1235:7:21",
														"memberName": "_update",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 981,
														"src": "1229:13:21",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 3887,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1229:30:21",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3888,
												"nodeType": "ExpressionStatement",
												"src": "1229:30:21"
											}
										]
									},
									"id": 3890,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "1106:7:21",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 3879,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 3877,
												"name": "ERC20",
												"nameLocations": [
													"1191:5:21"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 824,
												"src": "1191:5:21"
											},
											{
												"id": 3878,
												"name": "ERC20Pausable",
												"nameLocations": [
													"1198:13:21"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 982,
												"src": "1198:13:21"
											}
										],
										"src": "1182:30:21"
									},
									"parameters": {
										"id": 3876,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3871,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1122:4:21",
												"nodeType": "VariableDeclaration",
												"scope": 3890,
												"src": "1114:12:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3870,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1114:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3873,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1136:2:21",
												"nodeType": "VariableDeclaration",
												"scope": 3890,
												"src": "1128:10:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3872,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1128:7:21",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3875,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1148:5:21",
												"nodeType": "VariableDeclaration",
												"scope": 3890,
												"src": "1140:13:21",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3874,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1140:7:21",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1113:41:21"
									},
									"returnParameters": {
										"id": 3880,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1218:0:21"
									},
									"scope": 3891,
									"src": "1097:170:21",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3892,
							"src": "450:820:21",
							"usedErrors": [
								13,
								18,
								184,
								189,
								194,
								203,
								208,
								213,
								1013,
								1020,
								1238,
								1318,
								1321,
								1427,
								1429,
								2006,
								2011,
								2016
							],
							"usedEvents": [
								24,
								152,
								836,
								845,
								1310,
								1315
							]
						}
					],
					"src": "83:1187:21"
				},
				"id": 21
			}
		}
	}
}